function loged() { } function Tour(e) { this.name = e, this.tourSteps = [], this.stepCount = 0, this.defaultOptions = {} } function _getUUID() { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) { var t = 16 * Math.random() | 0; return ("x" == e ? t : 3 & t | 8).toString(16) }) } function VideoTour(e) { this.name = e } new Krafty2.View("Modal", { abstract: !0, data: { static: !1 }, filters: { onCreate: function () { }, afterCreate: function () { var e = this; setTimeout(function () { e.container.find(".kr-modal").css({ backgroundColor: "rgba(0,0,0,0.8)" }), e.html.find(".kr-modal-container").css({ top: 0, opacity: 1 }) }, 100) }, beforeDestroy: function (e) { var t = this; t.html.find(".kr-modal-container").css({ top: 200, opacity: 0 }), t.container.find(".kr-modal").css({ backgroundColor: "transparent" }), t.trigger("modal-close"), setTimeout(function () { e() }, 400) } }, events: { "click -> .kr-modal-container": function (e, t) { t.stopPropagation() }, "click -> .kr-modal": function (e, t) { this.data.static || this.destroy() }, "click -> .kr-modal-close-btn": function (e, t) { this.destroy() } } }), window.i18n = function (e, t) { var a = ""; if (localeStringsV4.locale[e] ? a = localeStringsV4.locale[e] : localeStrings.locale[e] ? a = localeStrings.locale[e] : localeStringsV4.default[e] ? a = localeStringsV4.default[e] : localeStrings.default[e] ? a = localeStrings.default[e] : "dev" === env && krDebugFlag && (a = "kr-i18n-err-*"), (t = t || []).length && "kr-i18n-err-*" !== a) for (var i = 0; i < t.length; i++) { var s = new RegExp("#\\s*" + (i + 1)); a = a.replace(s, t[i]) } return "dev" === env && krDebugFlag ? "kr-i18n-str-* " + a : a }, window.i18nReverse = function (e) { var t = ""; for (var a in localeStringsV4.default) if (localeStringsV4.default[a] === e) { t = a; break } return i18n(t) }, Globals.URL = { isValidURL: function (e) { return !(!(e = e.trim()) || "undefined" === e || "null" === e) }, sluggify: function (e) { e = (e = e.replace(/^\s+|\s+$/g, "")).toLowerCase(); for (var t = "åàáãäâèéëêìíïîòóöôùúüûñç·/_,:;", a = 0, i = t.length; a < i; a++)e = e.replace(new RegExp(t.charAt(a), "g"), "aaaaaaeeeeiiiioooouuuunc------".charAt(a)); return e = e.replace(/[^a-z0-9 -]/g, "").replace(/\s+/g, "-").replace(/-+/g, "-") } }, Globals.MathQuillHelper = { displayMathQuill: function (e) { setTimeout(function () { e.find(".kr-math").each(function (e, t) { $(t).hasClass("mq-math-mode") || MathQuill.StaticMath(t) }) }, 0) } }, Globals.GoogleClassroomApi = { getCourses: function () { return $.ajax({ type: "GET", url: "/lms/gcl/courses" }) }, assign: function (e) { return $.ajax({ type: "POST", url: "/lms/gcl/assignment", contentType: "application/json", data: JSON.stringify(e), headers: { "x-csrf-token": Globals.CSRFToken } }) } }, Globals.EdmodoClassroomApi = { getCourses: function () { return $.ajax({ type: "GET", url: "/lms/edmodo/courses" }) }, assign: function (e) { return loged("Assign:", e), $.ajax({ type: "POST", url: "/lms/edmodo/assignment", contentType: "application/json", data: JSON.stringify(e), headers: { "x-csrf-token": Globals.CSRFToken } }) } }, new Krafty2.View("AdminPanel", { template: Krafty2.Templates.AdminPanel, parent: $("body"), state: { showLocale: !0 }, filters: { afterCreate: function () { var e = this; $(".app-container").css({ height: window.innerHeight - 64 }), $("body").addClass("i18n-show"), e.postProcessi18n(), e.postProcessInterval = setInterval(function () { e.postProcessi18n(), console.log("processing") }, 5e3) } }, methods: { postProcessi18n: function () { $(":contains(kr-i18n-str-*)").each(function () { for (var e = $(this)[0].childNodes, t = !1, a = 0; a < e.length; a++)if (3 === e[a].nodeType && -1 !== e[a].nodeValue.indexOf("kr-i18n-str-*")) { t = !0, e[a].nodeValue = e[a].nodeValue.replace("kr-i18n-str-*", ""), e[a].nodeValue = e[a].nodeValue.replace("kr-i18n-err-*", ""); break } t && ($(this).addClass("kr-i18n"), -1 !== $(this).text().indexOf("kr-i18n-err-*") && $(this).addClass("kr-i18n-err")) }), $("input[placeholder]").each(function () { -1 !== $(this).attr("placeholder").indexOf("kr-i18n-str-*") && ($(this).addClass("kr-i18n"), $(this).attr("placeholder", $(this).attr("placeholder").replace("kr-i18n-str-*", ""))) }) } }, events: { "click -> .lang-btn": function (e, t) { var i = this, s = Math.random() + Date.now(); $("body").css({ cursor: "wait" }), $("body").on("mouseover." + s, function (e) { var a = $(e.originalEvent.srcElement); a.css({ "box-shadow": "0 0 0 3px red" }), a.on("click." + s, function (e) { var t = ""; t = "INPUT" === a.get(0).nodeName ? a.attr("placeholder") : a.text(), a.hasClass("kr-i18n") ? $.ajax({ type: "GET", url: "/adminPanel/searchNew", data: { str: a.text().trim() } }).done(function (e) { e.key && (i.editLocaleString = new Krafty2.Views.EditLocaleString({ data: { locale: e.locale, key: e.key } })) }) : i.langPopover = new Krafty2.Views.LangPopover({ data: { str: t, parent: a, position: "bottom" } }), a.css({ "box-shadow": "" }), a.off("click." + s), $("body").css({ cursor: "initial" }), $("body").off("mouseover." + s), $("body").off("mouseout." + s), e.stopPropagation(), e.preventDefault() }) }), $("body").on("mouseout." + s, function (e) { var t = $(e.originalEvent.srcElement); t.css({ "box-shadow": "" }), t.off("click." + s) }), t.stopPropagation() }, "click -> .locale-visibility": function () { var e = this; e.setState({ showLocale: !e.state.showLocale }), e.state.showLocale ? $("body").addClass("i18n-show") : $("body").removeClass("i18n-show") } } }), new Krafty2.View("EditLocaleString", { template: Krafty2.Templates.EditLocaleString, parent: $("body"), extends: Krafty2.Views.Modal, events: { "click -> .save-btn": function () { var e = this, t = { en: e.html.find("#en").val(), es: e.html.find("#es").val(), fr: e.html.find("#fr").val(), nl: e.html.find("#nl").val(), pl: e.html.find("#pl").val(), ru: e.html.find("#ru").val() }; $.ajax({ type: "POST", url: "/adminPanel/editString", data: { key: e.data.key, locale: t } }).done(function () { e.destroy() }) } } }), function () { var c = Globals.Toaster = { toasts: [], addToast: function (e, t, a, i, s, o) { var n = Krafty2.$('<div class="toast ' + a + '"><i class="icon fas fa-' + t + '"></i><span class="msg">' + e + "</span></div>"); Krafty2.$("body").append(n); var r = 20 + 80 * c.toasts.length + 20; if (s) { var l = $('<i class="fas fa-times close-btn"></i>'); n.append(l), l.on("click", function (e) { var t = $(this).parent(); c.toasts.splice(+t.data("idx"), 1), t.animate({ left: -1e3, opacity: 0 }, 500, function () { t.remove(); for (var e = 0; e < c.toasts.length; e++)c.toasts[e].animate({ bottom: 20 + 80 * e }, 500 + 100 * e) }), e.stopPropagation() }) } if (n.css({ bottom: r, opacity: 0 }), n.data("idx", c.toasts.length), n.animate({ bottom: r - 20, opacity: 1 }, 500), i) n.data("noAutoClose", !0); else var d = setTimeout(function () { var t = c.toasts.shift(); if (t.data("noAutoClose")) { var e = t; t = c.toasts.shift(), c.toasts.unshift(e) } t.animate({ left: -1e3, opacity: 0 }, 500, function () { t.remove(); for (var e = 0; e < c.toasts.length; e++)c.toasts[e].animate({ bottom: 20 + 80 * e }, 500 + 100 * e) }) }, 5e3); s ? (n.on("click", o), n.on("click", function () { var t = $(this); c.toasts.splice(+t.data("idx"), 1), t.animate({ left: -1e3, opacity: 0 }, 500, function () { t.remove(); for (var e = 0; e < c.toasts.length; e++)c.toasts[e].animate({ bottom: 20 + 80 * e }, 500 + 100 * e).data("idx", e) }), clearTimeout(d) })) : n.on("click", function () { var t = $(this); c.toasts.splice(+t.data("idx"), 1), t.animate({ left: -1e3, opacity: 0 }, 500, function () { t.remove(); for (var e = 0; e < c.toasts.length; e++)c.toasts[e].animate({ bottom: 20 + 80 * e }, 500 + 100 * e).data("idx", e) }), clearTimeout(d) }), c.toasts.push(n) }, addToastBar: function (e) { var t = Krafty2.$('<div class="toast-bar ' + e.style + " " + e.location + '"><i class="fas fa-' + e.icon + '"></i><span class="msg">' + e.message + "</span></div>"); (e.parent || $("body")).append(t), t.css({ opacity: 0 }), t.animate({ opacity: 1 }), setTimeout(function () { t.animate({ opacity: 0 }, function () { t.remove() }) }, e.duration || 1e3) } } }(), Globals.AuthApi = { checkUsernameAvail: function (e, t) { return Krafty2.$.ajax({ type: "GET", url: "/user/checkUserNameAvail", headers: { "x-csrf-token": Globals.CSRFToken }, data: { username: e }, success: function (e) { t && e.success && t(e.data) } }) }, checkEmailAvail: function (e, t) { return Krafty2.$.ajax({ type: "GET", url: "/user/checkUserEmailAvail", headers: { "x-csrf-token": Globals.CSRFToken }, data: { email: e }, success: function (e) { t && e.success && t(e.data) } }) }, register: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/user/register", contentType: "application/json", headers: { "x-csrf-token": Globals.CSRFToken }, data: JSON.stringify(e), success: function (e) { t && e.success && t(e.data) } }) }, registerStudentUnder13: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/user/register/student", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { t && e.success && t(e.data) } }) }, googleAuthStudentUnder13: function (e, t) { Krafty2.$.ajax({ type: "POST", url: "/auth/google/student", data: e, success: function (e) { t && (e.success ? t(e.data) : console.log("Error while google auth", e)) } }) }, login: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/user/login", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { sessionStorage.setItem("featuredPageCache", null), sessionStorage.setItem("searchPageCache", null), t && e.success && t(e.data) } }) }, searchOrganization: function (e, t) { return Krafty2.$.ajax({ type: "GET", url: "/organization/search", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { t && e.success && (e.data.organizations = _.sortBy(e.data.organizations, function (e) { return e.name }), t(e.data)) } }) }, register2: function (e, t) { return Krafty2.$.ajax({ type: "PUT", url: "/user/info", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { t && e.success && t(e.data) } }) }, login: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/auth/local", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, changeProfile: function (e, t, a) { return Krafty2.$.ajax({ type: "POST", url: "/user/changeProfile", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { t && e.success && t(e.data) }, fail: function (e) { a && a(e) } }) }, forgotPassword: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/user/resetPasswordLink", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, forgotPasswordTicket: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/auth/forgotPasswordTicket", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, resetPassword: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/user/resetPassword", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, updateLocals: function (e) { return Krafty2.$.ajax({ type: "PUT", url: "/user/info", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, updatePassword: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/user/updatePassword", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, sendVerificationEmail: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/auth/sendVerificationMail", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, sendReactivateLink: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/send-reactivation-link", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, deactivate: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/deactivate", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) } }, function () { Globals.Profanity = { check: function (e) { return e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = e.toLowerCase()).replace(/\s\s+/g, " ")).replace(/[\-_]/g, " ")).replace(/a+/g, "a")).replace(/u+/g, "u")).replace(/h+/g, "h")).replace(/j+/g, "j")).replace(/k+/g, "k")).replace(/q+/g, "q")).replace(/v+/g, "v")).replace(/w+/g, "w")).replace(/x+/g, "x")).replace(/y+/g, "y"), !!s(e, a) || (!!o(e, i) || (!!t(e) || !!n(e))) } }; var a = ["deez nut", "deeez nut", "fuck", "f u c k", "f uck", "fuc k", "fu ck", "asshole", "bastard", "bitch", "damn", "douche", "fag", "faggot", "porn", "slut", "nigga"], i = ["anal", "anus", "arrse", "arse", "ass", "asses", "assfukka", "asswhole", "a_s_s", "b!tch", "b17ch", "banged", "ballbag", "balls", "ballsack", "bastard", "beastial", "beastiality", "bellend", "bestial", "bestiality", "benchod", "bhenchod", "bi+ch", "biatch", "bloody", "blowjob", "blowjobs", "boiolas", "bollock", "bollok", "boner", "boob", "booty", "boobs", "booobs", "boooobs", "booooobs", "booooooobs", "breasts", "buceta", "bugger", "bullshit", "bum", "butt", "butthole", "buttmuch", "buttplug", "carpet muncher", "cawk", "chink", "cipa", "cl1t", "clit", "clitoris", "clits", "cnut", "cock", "cock-sucker", "cockface", "cockhead", "cockmunch", "cockmuncher", "cocks", "cocksuck", "cocksucked", "cocksucker", "cocksucking", "cocksucks", "cocksuka", "cocksukka", "cok", "cokmuncher", "coksucka", "coon", "crap", "cum", "cummer", "cumming", "cums", "cumshot", "cunilingus", "cunillingus", "cunnilingus", "cunt", "cuntlick", "cuntlicker", "cuntlicking", "cunts", "cyalis", "cyberfuc", "damn", "dicks", "dickhead", "dildo", "dildos", "dink", "dinks", "dirsa", "doggin", "dogging", "donkeyribber", "doosh", "duche", "dyke", "ejaculate", "ejaculated", "ejaculates", "ejaculating", "ejaculatings", "ejaculation", "ejakulate", "f4nny", "fack", "fak", "fag", "fagging", "faggitt", "faggot", "faggs", "fagot", "fagots", "fags", "fannyflaps", "fanyy", "fatass", "fcuk", "fcuker", "fcuking", "feck", "fecker", "felching", "fellate", "fellatio", "flange", "fook", "fooker", "fudge packer", "fudgepacker", "fuk", "fuker", "fukker", "fukkin", "fuks", "fukwhit", "fukwit", "fuq", "fux", "fuxor", "f_u_c_k", "gangbang", "gangbanged", "gangbangs", "gaylord", "gaysex", "goatse", "god-dam", "god-damned", "goddamn", "goddamned", "hardcoresex", "hell", "heshe", "hitler", "homo", "hore", "horniest", "horny", "hotsex", "jack-off", "jackoff", "jap", "jerk-off", "jism", "jiz", "jizm", "jizz", "kawk", "kill", "killer", "knob", "knobead", "knobed", "knobend", "knobhead", "knobjocky", "knobjokey", "kock", "kondum", "kondums", "kum", "kummer", "kumming", "kums", "kunilingus", "l3i+ch", "l3itch", "labia", "lmfao", "lust", "lusting", "m45terbate", "ma5terb8", "ma5terbate", "masochist", "master-bate", "masterb8", "masterbat*", "masterbat3", "masterbate", "masterbation", "masterbations", "masturbate", "mo-fo", "mofo", "muff", "mutha", "muthafecker", "muther", "nipple", "nipples", "n1gga", "n1gger", "nazi", "nigg3r", "nigg4h", "nigga", "niggah", "niggas", "niggaz", "nigger", "niggers", "nob", "nobhead", "nobjocky", "nobjokey", "nuts", "nutz", "numbnuts", "nutsack", "orgasim", "orgasims", "orgasm", "orgasms", "pawn", "pecker", "penis", "perv", "pervert", "phonesex", "phuck", "phuk", "phuked", "phuking", "phukked", "phukking", "phuks", "phuq", "pimpis", "piss", "pissed", "pisser", "pissers", "pisses", "pissflaps", "pissin", "pissing", "pissoff", "poop", "porn", "porno", "pornography", "pornos", "prick", "pricks", "pron", "pube", "pusse", "pussi", "pussies", "pussy", "pussys", "rectum", "retard", "rimjaw", "rimming", "s.o.b.", "sadist", "schlong", "screwing", "scroat", "scrote", "scrotum", "semen", "sex", "sh!+", "sh!t", "sh1t", "shag", "shagger", "shaggin", "shagging", "shemale", "shi+", "shit", "shitdick", "shite", "shited", "shitey", "shitfull", "shithead", "shiting", "shitings", "shits", "shitted", "shitter", "shitters", "shitting", "shittings", "shitty", "skank", "slut", "sluts", "smegma", "smut", "snatch", "spac", "spunk", "suck", "sucking", "sucks", "taint", "teets", "teez", "testical", "testicle", "tit", "tits", "titt", "titties", "titty", "tittywank", "titwank", "tosser", "turd", "tw4t", "twat", "twathead", "twatty", "twunt", "twunter", "v14gra", "v1gra", "vagina", "viagra", "vulva", "w00se", "wank", "wanker", "wanky", "whoar", "whore", "willies", "willy", "xrated", "xxx"], s = function (e, t) { for (var a = 0; a < t.length; a++)if (-1 < e.indexOf(t[a])) return !0; return !1 }, o = function (e, t) { for (var a = e.split(/[\s\.\-\?\+\(\)\[\]&,_!@#\$%=]+/), i = 0; i < a.length; i++)for (var s = 0; s < t.length; s++)if (a[i] == t[s]) return !0; return !1 }, t = function (e) { return null != e.match(/\udd95/g) }, n = function (e, t) { return e = (e = (e = (e = (e = (e = (e = e.replace(/[4@]/g, "a")).replace(/[1!|]/g, "i")).replace(/[7\+]/g, "t")).replace(/#/g, "h")).replace("0", "o")).replace(/[$5]/g, "s")).replace(/(^|\s+)(.)($|\s+)/g, "$2"), !!s(e, a) || !!o(e, i) } }(), Globals.TutorialConf = { tutorials: [{ name: "introToReports", type: "video", widgetTitle: i18n(528), page: ["report", "reports"], modalTitle: i18n(534), modalText: i18n(538), videoUrl: "https://www.youtube.com/watch?v=uHapbKtHkgk" }, { name: "printingReports", type: "video", widgetTitle: i18n(529), page: ["report", "reports"], modalTitle: i18n(535), modalText: i18n(539), videoUrl: "https://www.youtube.com/watch?v=Z3Pq87Y98lw" }, { name: "emailReports", type: "video", widgetTitle: i18n(530), page: ["report", "reports"], modalTitle: i18n(530), modalText: i18n(540), videoUrl: "https://www.youtube.com/watch?v=89R1DfgpwWc" }, { name: "collectionsIntro", type: "video", widgetTitle: i18n(531), page: ["featuredPage", "myQuizizz", "collectionsPage", "searchPage"], modalTitle: i18n(536), modalText: i18n(541), videoUrl: "https://www.youtube.com/watch?v=X44doU4Vahk" }, { name: "usingMemes", type: "video", widgetTitle: i18n(532), page: ["memeSetsPage", "memeSetEditor", "memeCreator"], modalTitle: i18n(537), modalText: i18n(542), videoUrl: "https://www.youtube.com/watch?v=WY-xovFwaC4" }, { name: "creatingMemes", type: "video", widgetTitle: i18n(533), page: ["memeSetsPage", "memeSetEditor", "memeCreator"], modalTitle: i18n(533), modalText: i18n(543), videoUrl: "https://www.youtube.com/watch?v=-PM1sNCna3s" }, { name: "downloadXL", type: "video", widgetTitle: i18n(553), page: ["report", "reports"], modalTitle: i18n(554), modalText: i18n(555), videoUrl: "https://www.youtube.com/watch?v=ldEvg7xByC0" }, { name: "usingGoogleClassroom", type: "video", widgetTitle: i18n(556), page: ["report", "reports"], modalTitle: i18n(556), modalText: i18n(557), videoUrl: "https://www.youtube.com/watch?v=-Ghv0dzjXzo" }, { name: "usingGameSettings", type: "video", widgetTitle: i18n(558), page: ["startLiveQuiz", "startHomeworkQuiz", "quiz"], modalTitle: i18n(559), modalText: i18n(560), videoUrl: "https://www.youtube.com/watch?v=yjej8NwunfU" }], groups: [{ title: i18n(561), icon: "fa-gamepad", tutorials: ["usingGameSettings"] }, { title: i18n(37), icon: "fa-bar-chart", tutorials: ["introToReports", "printingReports", "emailReports", "downloadXL", "usingGoogleClassroom"] }, { title: i18n(38), icon: "fa-smile-o", tutorials: ["usingMemes", "creatingMemes"] }, { title: i18n(36), icon: "fa-folder-o", tutorials: ["collectionsIntro"] }], prompts: [{ name: "collectionOnSearchPage", text: i18n(544), tutorial: "collectionsIntro" }, { name: "usingMemesOnMemesetPage", text: i18n(549), tutorial: "usingMemes" }, { name: "introReportsOnReportPage", text: i18n(562), tutorial: "introToReports" }] }, Globals.StandardsApi = { getJurisdictions: function () { return $.ajax({ type: "GET", url: "/jurisdictions", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json" }) }, getSubjects: function (e, t) { return $.ajax({ type: "GET", url: "/jurisdictions/" + e, data: { grade: t }, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json" }) }, getStandards: function (e) { return $.ajax({ type: "GET", url: "/standards/" + e, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json" }) }, compileDepthList: function (e, t, a) { var i = []; a = _.isNumber(a) ? a : 0; for (var s = 0; s < t; s++)i[s] = _.filter(e, function (e) { return e.info.depth === s }); for (s = t - 1; 1 <= s; s--)for (var o = 0; o < i[s].length; o++) { var n = i[s][o], r = _.find(i[s - 1], { id: n.info.ancestorIds[0] }); r && (r.children || (r.children = []), r.children.push(n)) } return i[a] }, getMeta: function (e) { return "67810E9EF6944F9383DCC602A3484C23" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "71E5AA409D894EB0B43A8CD82F727BFE" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 0, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "28903EF2A9F9469C9BF592D4D0BE10F8" === e ? { hasDomains: !1, standardsDepth: 0, standardTitle: "statementNotation", standardDesc: "description" } : "80B94A122D3D4B95884660FF09CC357E" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "BD9F1823F64844E38377E11EB39F173B" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "27D1AF28D2F54DD3A69C057DDA772BD0" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "listId", standardDesc: "description" } : "B1339AB05F0347E79200FCA63240F3B2" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "549159D28465455FB144F5B67F3ACDFF" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "F4CB2B5DF6904071BBCC671A3AB783B8" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "5A99211C6D874994A2CFEE2AE40023DD" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "AB6E6F50DDF047E8BC3EE2CCFD33DCCC" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "033B7F9D29D84F09AF312E83F31AE348" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "8A257771396B4F0792EB9D6020CC9089" === e ? { hasDomains: !0, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "175A144B44F94BFAB539F3B571A3A62C" === e ? { hasDomains: !0, standards: standards, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "listId", standardDesc: "description" } : "180878796A3C448D808F38BCCCFD26CF" === e ? { hasDomains: !0, standards: standards, domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : void 0 }, compileStandards: function (e, t) { return "67810E9EF6944F9383DCC602A3484C23" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "71E5AA409D894EB0B43A8CD82F727BFE" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 0, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "28903EF2A9F9469C9BF592D4D0BE10F8" === e ? { hasDomains: !1, standards: Globals.StandardsApi.compileDepthList(t, 3, 1), standardsDepth: 0, standardTitle: "statementNotation", standardDesc: "description" } : "80B94A122D3D4B95884660FF09CC357E" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "BD9F1823F64844E38377E11EB39F173B" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "27D1AF28D2F54DD3A69C057DDA772BD0" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 3), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "B1339AB05F0347E79200FCA63240F3B2" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 5), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "549159D28465455FB144F5B67F3ACDFF" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 3), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "F4CB2B5DF6904071BBCC671A3AB783B8" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "5A99211C6D874994A2CFEE2AE40023DD" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "AB6E6F50DDF047E8BC3EE2CCFD33DCCC" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 5), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "033B7F9D29D84F09AF312E83F31AE348" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 3), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "8A257771396B4F0792EB9D6020CC9089" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 3), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : "175A144B44F94BFAB539F3B571A3A62C" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "listId", standardDesc: "description" } : "180878796A3C448D808F38BCCCFD26CF" === e ? { hasDomains: !0, standards: Globals.StandardsApi.compileDepthList(t, 4), domainsDepth: 0, standardsDepth: 1, domainName: "description", standardTitle: "statementNotation", standardDesc: "description" } : void 0 } }, Tour.prototype.addStep = function (e) { this.tourSteps.push(e) }, Tour.prototype.nextStep = function () { if (this.stepCount === this.tourSteps.length) return !1 }, VideoTour.prototype.start = function () { var t = this, e = _.filter(Globals.TutorialConf.tutorials, ["name", t.name])[0]; t.videoView = new Krafty2.Views.VideoTutorial({ data: e }); var a = {}; a[t.name] = { version: 1, step: 0, date: (new Date).toISOString(), status: "" }, t.videoView.on("videoStarted", function () { a[t.name].status = "started", a[t.name].date = (new Date).toISOString(), Globals.UserAnalytics.sendTutorialEvent(a) }), t.videoView.on("videoEnded", function () { a[t.name].status = "done", a[t.name].date = (new Date).toISOString(), Globals.UserAnalytics.sendTutorialEvent(a) }), t.videoView.on("videoProgress", function (e) { a[t.name].step = e }), t.videoView.on("tutorialCancelled", function () { a[t.name].status = "cancelled", a[t.name].date = (new Date).toISOString(), Globals.UserAnalytics.sendTutorialEvent(a) }), t.videoView.on("tutorialRemindLater", function () { a[t.name].status = "remindLater", a[t.name].date = (new Date).toISOString(), Globals.UserAnalytics.sendTutorialEvent(a) }) }, Globals.Tour = function () { var a = null, t = null; return { getSuggestedTours: function () { var t = Globals.currentPage; return Globals.TutorialConf.tutorials.filter(function (e) { return e.page.some(function (e) { return e === t }) }) }, getSuggestedTourNames: function () { var t = Globals.currentPage; return _.map(Globals.TutorialConf.tutorials.filter(function (e) { return e.page.some(function (e) { return e === t }) }), "name") }, getAllTours: function () { return Globals.TutorialConf.groups.map(function (e) { var t = _.cloneDeep(e); return t.tutorials = e.tutorials.map(function (e) { return _.filter(Globals.TutorialConf.tutorials, ["name", e])[0] }), t }) }, canShowPrompt: function (e) { if (!user || !user.id) return !1; var t = _.filter(Globals.TutorialConf.prompts, ["name", e])[0], a = user.events.tutorials && user.events.tutorials[t.tutorial]; return !(a && "" !== a.status && "prompted" !== a.status && !function (e) { if ("remindLater" === e.status) { var t = new Date(e.date), a = new Date; if (6048e5 < a.getTime() - t.getTime()) return !0 } return !1 }(a)) }, getCurrentPrompt: function () { return t }, setCurrentPrompt: function (e) { t = e }, init: function (e) { if (!e) throw new Error("Tour name required!"); var t = _.filter(Globals.TutorialConf.tutorials, ["name", e])[0]; if (!t) throw new Error("Invalid Tour Name!"); return "video" === t.type && (a = new VideoTour(e)), a } } }(), new Krafty2.View("VideoTutorial", { template: Krafty2.Templates.VideoTutorial, parent: $("body"), extends: Krafty2.Views.Modal, data: { title: "Default Title", subtitle: "Default Subtitle", videoUrl: "" }, state: { videoStarted: !1, videoEnded: !1, isRemind: !1 }, filters: { onCreate: function () { var e = this; if (e.data.videoUrl) var t = new Globals.URI(e.data.videoUrl).props.query.v, a = 50, i = setInterval(function () { if (--a || clearInterval(i), YT) { if (clearInterval(i), e.player) return; e.player = new YT.Player("video-player", { height: 390, width: 640, videoId: t, events: { onReady: e.onPlayerReady, onStateChange: e.onPlayerStateChange } }) } }, 300) }, onDestroy: function () { var e = this; e.progressTimer && clearInterval(e.progressTimer), e.player && e.player.destroy(), e.state.videoEnded || e.state.isRemind || e.trigger("tutorialCancelled") } }, methods: { onPlayerReady: function (e) { }, onPlayerStateChange: function (e) { var t = this; e.data == YT.PlayerState.PLAYING && (t.state.videoStarted || (t.trigger("videoStarted"), t.progressTimer = setInterval(function () { t.player.getPlayerState() == YT.PlayerState.PLAYING && t.onPlayerVideoProgress(Math.ceil(t.player.getCurrentTime())) }, 1e3), t.setState({ videoStarted: !0 }))), e.data == YT.PlayerState.ENDED && (clearInterval(t.progressTimer), t.trigger("videoEnded"), t.setState({ videoEnded: !0 })) }, onPlayerVideoProgress: function (e) { this.trigger("videoProgress", e) } }, events: { "click -> .kr-modal-close-btn": function (e, t) { this.destroy() }, "click -> .remind-later-btn": function (e, t) { this.trigger("tutorialRemindLater"), this.setState({ isRemind: !0 }), this.destroy() }, "click -> .done-btn": function (e, t) { this.destroy() } } }), new Krafty2.View("TutorialWidget", { template: Krafty2.Templates.TutorialWidget, parent: $("body"), data: { targetElement: null, page: "", highlightTut: null }, state: { tutorials: [], allTutorials: [], collapse: !0 }, filters: { afterCreate: function () { var a = this; if (a.data.targetElement) { var e = a.data.targetElement.offset(), t = a.parent.offset(), i = e.top - t.top + a.data.targetElement.height(), s = e.left - t.left + a.data.targetElement.width() / 2 - $(a.html).width() / 2; $(a.html).css({ top: i + "px", left: s + "px" }) } setTimeout(function () { var t = Date.now(); $(document).on("click." + t, function (e) { $(document).off("click." + t), a.destroy() }) }, 50); var o = Globals.Tour.getSuggestedTours(), n = Globals.Tour.getAllTours(); a.setState({ tutorials: o, allTutorials: n }) }, onDestroy: function () { this.trigger("destroy") } }, methods: { isChecked: function (e) { return user.events.tutorials && user.events.tutorials[e] && "done" === user.events.tutorials[e].status ? "checked" : "" } }, events: { "click -> .tutorial-widget-view": function (e, t) { t.stopPropagation() }, "click -> .tutorials-list .list-item": function (e, t) { var a = $(e).attr("data-id"); self.tour = Globals.Tour.init(a), self.tour.start() }, "click -> .view-all-tut-btn": function (e, t) { var a = this, i = a.html.find(".widget-body-expanded"), s = a.state.collapse; s ? (i.slideDown(200), 0 === a.state.tutorials.length && a.html.find(".widget-no-tutorials").slideUp(200)) : (i.slideUp(200), 0 === a.state.tutorials.length && a.html.find(".widget-no-tutorials").slideDown(200)), setTimeout(function () { a.setState({ collapse: !s }) }, 200) } } }), new Krafty2.View("TutorialPrompt", { template: Krafty2.Templates.TutorialPrompt, parent: $("body"), data: { targetElement: null, name: null }, state: {}, filters: { onCreate: function () { var e = Globals.Tour.getCurrentPrompt(); e ? e.destroy && e.destroy() : (e = this, Globals.Tour.setCurrentPrompt(e)) }, afterCreate: function () { var e = this; if (e.data.targetElement) { var t = e.data.targetElement.offset(), a = e.parent.offset(), i = t.top - a.top + e.data.targetElement.height(), s = t.left - a.left + e.data.targetElement.width() / 2 - $(e.html).width() / 2; $(e.html).css({ top: i + "px", left: s + "px" }) } e.data.name && (e.prompt = _.filter(Globals.TutorialConf.prompts, ["name", e.data.name])[0], e.html.find(".prompt-text").html(e.prompt.text)), e.event = {}, e.event[e.prompt.tutorial] = { status: "prompted" }, Globals.UserAnalytics.sendTutorialEvent(e.event) }, onDestroy: function () { Globals.Tour.setCurrentPrompt(null) } }, events: { "click -> .action-remind-later": function (e, t) { this.event[this.prompt.tutorial].status = "remindLater", Globals.UserAnalytics.sendTutorialEvent(this.event), this.destroy() }, "click -> .action-yes": function (e, t) { var a = this; Globals.mainHeader.showTutorialWidget(a.prompt.tutorial), a.event[a.prompt.tutorial].status = "promptOk", Globals.UserAnalytics.sendTutorialEvent(a.event), a.destroy() }, "click -> .header-close": function (e, t) { this.event[this.prompt.tutorial].status = "promptClose", Globals.UserAnalytics.sendTutorialEvent(this.event), this.destroy() } } }), function () { var e = new Krafty2.Model("MediaMeta", { props: { width: Krafty2.Types.Number, height: Krafty2.Types.Number, text: Krafty2.Types.String, bgColor: Krafty2.Types.String } }), t = new Krafty2.Model("Media", { props: { url: Krafty2.Types.String, type: Krafty2.Types.String, meta: e } }), a = new Krafty2.Model("Option", { props: { text: Krafty2.Types.String, type: Krafty2.Types.String, media: new Krafty2.Collection(t), hasMath: Krafty2.Types.Boolean, renderedText: Krafty2.Types.String }, methods: { hasImage: function () { if (this.media) for (var e = 0; e < this.media.length(); e++) { if ("image" == this.media.getItem(e).type) return !0 } return !1 }, getImage: function () { if (!this.hasImage()) return ""; for (var e = 0; e < this.media.length(); e++) { var t = this.media.getItem(e); if ("image" == t.type) return t } }, preRender: function () { if (this.hasMath) { var e = $("<div/>"), t = Date.now(); e.html(this.text), e.find(".kr-math").each(function () { MathQuill.StaticMath(this) }), console.log("Math quill took " + (Date.now() - t) + " ms"), t = Date.now(), this.setRaw({ renderedText: e.html() }), console.log("Copying took " + (Date.now() - t) + " ms") } }, sanitizedText: function () { var e = $("<div/>"); return e.html(this.text), e.text().trim() } } }), i = new Krafty2.Model("Query", { props: { text: Krafty2.Types.String, type: Krafty2.Types.String, media: new Krafty2.Collection(t), hasMath: Krafty2.Types.Boolean, renderedText: Krafty2.Types.String }, methods: { hasImage: function () { if (this.media) for (var e = 0; e < this.media.length(); e++) { if ("image" == this.media.getItem(e).type) return !0 } return !1 }, getImage: function () { if (!this.hasImage()) return ""; for (var e = 0; e < this.media.length(); e++) { var t = this.media.getItem(e); if ("image" == t.type) return t } }, preRender: function () { if (this.hasMath) { var e = $("<div/>"), t = Date.now(); e.html(this.text), e.find(".kr-math").each(function () { MathQuill.StaticMath(this) }), console.log("Math quill took " + (Date.now() - t) + " ms"), t = Date.now(), this.setRaw({ renderedText: e.html() }), console.log("Copying took " + (Date.now() - t) + " ms") } }, sanitizedText: function () { var e = $("<div/>"); return e.html(this.text), e.text().trim() } } }), s = new Krafty2.Model("QuestionStructure", { props: { kind: Krafty2.Types.String, query: i, options: new Krafty2.Collection(a), answer: Krafty2.Types.Number } }); new Krafty2.Model("Question", { props: { structure: s, _id: Krafty2.Types.String, startedAt: Krafty2.Types.String, updated: Krafty2.Types.String, createdAt: Krafty2.Types.String, time: Krafty2.Types.Number, type: Krafty2.Types.String, v: Krafty2.Types.Number, clones: Krafty2.Types.Array, parent: Krafty2.Types.String, cloned: Krafty2.Types.Boolean, published: Krafty2.Types.Boolean, idx: Krafty2.Types.Number, standards: Krafty2.Types.Array }, methods: { validate: function () { var e = this, t = []; if (e.structure.query.sanitizedText() || e.structure.query.media.getItem(0) && e.structure.query.media.getItem(0).url || t.push({ err: 0, text: "Need either question text or an image" }), ("text" !== e.structure.options.getItem(0).type || e.structure.options.getItem(0).sanitizedText()) && ("text" !== e.structure.options.getItem(1).type || e.structure.options.getItem(1).sanitizedText()) && ("image" !== e.structure.options.getItem(0).type || 0 !== e.structure.options.getItem(0).media.length() && e.structure.options.getItem(0).media.getItem(0).url) && ("image" !== e.structure.options.getItem(1).type || 0 !== e.structure.options.getItem(1).media.length() && e.structure.options.getItem(1).media.getItem(0).url) || t.push({ err: 1, text: "Need the first 2 options" }), "MCQ" === e.type) e.structure.answer + 1 && e.structure.options.getItem(e.structure.answer) ? e.structure.options.getItem(e.structure.answer) && ("text" !== e.structure.options.getItem(e.structure.answer).type || e.structure.options.getItem(e.structure.answer).sanitizedText()) && ("image" !== e.structure.options.getItem(e.structure.answer).type || 0 !== e.structure.options.getItem(e.structure.answer).media.length() && e.structure.options.getItem(e.structure.answer).media.getItem(0).url) || t.push({ err: 3, text: "Correct option seems to be empty", idx: e.structure.answer }) : t.push({ err: 2, text: "Correct option not selected" }); else if ("MSQ" === e.type) { 0 === e.structure.answer.length && t.push({ err: 2, text: "Correct options not selected" }); for (var a = 0; a < e.structure.answer.length; a++)e.structure.options.getItem(e.structure.answer[a]) && ("text" !== e.structure.options.getItem(e.structure.answer[a]).type || e.structure.options.getItem(e.structure.answer[a]).sanitizedText()) && ("image" !== e.structure.options.getItem(e.structure.answer[a]).type || 0 !== e.structure.options.getItem(e.structure.answer[a]).media.length() && e.structure.options.getItem(e.structure.answer[a]).media.getItem(0).url) || t.push({ err: 3, text: "Correct option seems to be empty", idx: e.structure.answer[a] }) } return t }, getRenderStyle: function () { for (var e = this.structure, t = { queryHasImage: e.query.hasImage(), queryHasText: "text" == e.query.type, optionHasImage: !1, optionHasText: !1 }, a = 0; a < e.options.length(); a++) { var i = e.options.getItem(a); i.hasImage() && (t.optionHasImage = !0), "text" == i.type && (t.optionHasText = !0) } return t }, getOptionRenderStyle: function () { var e = this.getRenderStyle(); return e.optionHasImage && !e.optionHasText ? "onlyImages" : !e.optionHasImage && e.optionHasText ? "onlyText" : "textAndImages" }, isOptionCorrect: function (e) { var t = this.structure; if (t.options.getItem(e)) { if ("MCQ" == this.type) return this.structure.answer == e; for (var a = 0; a < t.answer.length; a++)if (t.answer[a] == e) return !0; return !1 } return !1 }, preRenderQuestion: function () { this.structure.query.preRender(); for (var e = 0; e < this.structure.options.length(); e++)this.structure.options.getItem(e).preRender() }, hasQuestionImage: function () { return this.structure.query.media.getItem(0) && this.structure.query.media.getItem(0).url }, getQuestionImage: function () { return this.structure.query.media.getItem(0) && this.structure.query.media.getItem(0).url ? this.structure.query.media.getItem(0).url : "" } } }) }(), function () { var e = new Krafty2.Model("Organization", { props: { _id: Krafty2.Types.String, name: Krafty2.Types.String, country: Krafty2.Types.String, state: Krafty2.Types.String, city: Krafty2.Types.String, zip: Krafty2.Types.String } }), t = new Krafty2.Model("UserLocal", { props: { email: Krafty2.Types.String, username: Krafty2.Types.String, casedUsername: Krafty2.Types.String } }), a = new Krafty2.Model("Preferences", { props: { notificationLevel: Krafty2.Types.Number, lang: Krafty2.Types.String } }), i = new Krafty2.Model("UserCounts", { props: { totalCollections: Krafty2.Types.Number, totalMemesets: Krafty2.Types.Number, totalQuizzes: Krafty2.Types.Number } }), s = new Krafty2.Model("Student", { props: { dob: Krafty2.Types.String, underAge: Krafty2.Types.Boolean } }), o = new Krafty2.Model("Parent", { props: { email: Krafty2.Types.String } }); new Krafty2.Model("User", { props: { _id: Krafty2.Types.String, createdAt: Krafty2.Types.String, firstName: Krafty2.Types.String, lastName: Krafty2.Types.String, title: Krafty2.Types.String, designation: Krafty2.Types.String, country: Krafty2.Types.String, city: Krafty2.Types.String, organization: e, media: Krafty2.Types.String, subject_tags: Krafty2.Types.Array, grades: Krafty2.Types.Array, occupation: Krafty2.Types.String, local: t, preferences: a, updated: Krafty2.Types.String, verified: Krafty2.Types.Boolean, profileCompleteness: Krafty2.Types.String, userCounts: i, student: s, parent: o }, methods: { find: function (e, t) { var a = this; Krafty2.$.ajax({ type: "GET", url: "/user" + (e ? "/" + e : ""), headers: { "x-csrf-token": Globals.CSRFToken }, success: function (e) { e.data && e.data.user && (e.data.user.userCounts = { totalCollections: e.data.totalCollections, totalQuizzes: e.data.totalQuizzes, totalMemesets: e.data.totalMemeSets }), e.data.user.local.username = e.data.user.local.casedUsername, e.data.user.local.email = e.data.user.local.casedEmail, a.set(e.data.user), t && t() } }) }, save: function (e, t) { var a = this; a.set(e), Krafty2.$.ajax({ type: "POST", url: "/user/changeProfile", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { a.set(e.data.user) } }) }, checkUsernameAvail: function (e, t) { Krafty2.$.ajax({ type: "GET", url: "/user/checkUserNameAvail", headers: { "x-csrf-token": Globals.CSRFToken }, data: { username: e }, success: function (e) { e.success && t(e.data.avail) } }) }, updateUsername: function (e, t) { Krafty2.$.ajax({ type: "POST", url: "/user/updateUsername", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { user.username = e.username, t(e) } }) }, checkEmailAvail: function (e, t) { Krafty2.$.ajax({ type: "GET", url: "/user/checkUserEmailAvail", headers: { "x-csrf-token": Globals.CSRFToken }, data: { email: e }, success: function (e) { e.success && t(e.data.avail) } }) }, updateEmail: function (e, t) { Krafty2.$.ajax({ type: "POST", url: "/user/updateEmail", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { user.email = e.newEmail, t(e) } }) }, getSuggestedUsers: function (e, t) { return Krafty2.$.ajax({ type: "GET", url: "/user/share", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { e.success && t(e.data) } }) }, shareWithUser: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/user/share", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }) }, saveProfileImage: function (e, a) { Globals.ImageUtils.uploadDataURLToS3(e, "users", { error: function () { a.error("Error while uploading image.") }, load: function (e) { var t = Krafty2.$.ajax({ type: "PUT", url: "/user/info", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/x-www-form-urlencoded", data: { media: e } }); a.success(t, e) } }) }, refer: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/user/refer", headers: { "x-csrf-token": Globals.CSRFToken }, data: e, success: function (e) { e.success && t && t(e.data) } }) } } }) }(), function () { function s(e) { return "K" !== e && "University" !== e ? "0" === e ? "K" : "1" === e ? "1st" : "2" === e ? "2nd" : "3" === e ? "3rd" : "13" === e ? "University" : e + "th" : e } var e = new Krafty2.Model("QuizStats", { props: { played: Krafty2.Types.Number, totalCorrect: Krafty2.Types.Number, totalPlayers: Krafty2.Types.Number, totalQuestions: Krafty2.Types.Number } }), t = new Krafty2.Model("ParentDetail", { props: { userId: Krafty2.Types.String, quizId: Krafty2.Types.String } }), a = new Krafty2.Model("StandardsModel", { props: { jurisdiction: Krafty2.Types.String, grade: Krafty2.Types.String, subject: Krafty2.Types.String } }), i = new Krafty2.Model("QuizVersion", { props: { _id: Krafty2.Types.String, createdAt: Krafty2.Types.String, updated: Krafty2.Types.String, name: Krafty2.Types.String, image: Krafty2.Types.String, description: Krafty2.Types.String, questions: new Krafty2.Collection(Krafty2.Models.Question), visibility: Krafty2.Types.Boolean, subjects: Krafty2.Types.Array, topics: Krafty2.Types.Array, subtopics: Krafty2.Types.Array, grade: Krafty2.Types.Array, gradeLevel: Krafty2.Types.Array, lang: Krafty2.Types.String, standardsData: a }, methods: { hasGrade: function () { return 2 === this.grade.length }, hasSubjects: function () { return 0 < this.subjects.length }, gradeLabel: function () { var e = this; if (e.grade[0] && e.grade[1]) { var t = s(e.grade[0]), a = s(e.grade[1]), i = " grade"; return 0 == +e.grade[0] ? (t = "KG", i = "") : 13 == +e.grade[0] ? (t = "University", i = "") : 14 == +e.grade[0] && (t = "Professional Development", i = ""), 0 == +e.grade[1] ? (a = "KG", i = "") : 13 == +e.grade[1] ? (a = "University", i = "") : 14 == +e.grade[1] && (a = "Professional Development", i = ""), t === a ? t + i : t + " - " + a + i } return "" }, subjectsAndTopics: function () { return this.subjects.getRaw().concat(this.topics.getRaw()) }, preRenderQuestions: function () { for (var e = 0; e < this.questions.length(); e++)this.questions.getItem(e).preRenderQuestion(); this.trigger("change") } } }); new Krafty2.Model("Quiz", { props: { _id: Krafty2.Types.String, updated: Krafty2.Types.String, createdAt: Krafty2.Types.String, createdBy: Krafty2.Models.User, stats: e, love: Krafty2.Types.Number, reviewed: Krafty2.Types.Boolean, cloned: Krafty2.Types.Boolean, parentDetail: t, versions: Krafty2.Types.Array, deleted: Krafty2.Types.Boolean, v: Krafty2.Types.Number, draftVersion: Krafty2.Types.String, publishedVersion: Krafty2.Types.String, hasPublishedVersion: Krafty2.Types.Boolean, hasDraftVersion: Krafty2.Types.Boolean, info: i, draft: i, latestVersion: i, isLoved: Krafty2.Types.Boolean, isTagged: Krafty2.Types.Boolean }, methods: { createWithInfo: function (e) { var t = this; return t.api = $.ajax({ type: "POST", url: "/quiz", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", data: JSON.stringify({ name: e.name, image: e.image, lang: e.lang, visibility: e.visibility }) }).done(function (e) { e.success && (t.set(e.data.quiz), t.draft = e.data.draft) }) }, updateInfo: function (e) { var t = this; return t.api = $.ajax({ type: "PUT", url: "/quiz/" + t._id + "/version/" + t.draft._id, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", data: JSON.stringify({ name: e.name, image: e.image, lang: e.lang, visibility: e.visibility, subjects: e.subjects, topics: e.topics, grade: e.grade }) }).done(function (e) { e.success && t.draft.set(e.data.version) }) }, updateStandardsData: function (e) { var t = this; return t.api = $.ajax({ type: "PUT", url: "/quiz/" + t._id + "/version/" + t.draft._id, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", data: JSON.stringify({ standardsData: e }) }).done(function (e) { e.success && t.draft.set(e.data.version) }) }, updateOrder: function (e) { var t = this; return t.api = $.ajax({ type: "PUT", url: "/quiz/" + t._id + "/version/" + t.draft._id, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", data: JSON.stringify({ questions: e }) }).done(function (e) { e.success && t.draft.set(e.data.version) }) }, getQuiz: function (e) { var t = this; return t.api = $.ajax({ type: "GET", url: "/quiz/" + e, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json" }).done(function (e) { e.success && (t.set(e.data.quiz), t.draft = e.data.draft) }) }, newQuestion: function (e, t, a) { var i = this; return t && (e.cloneFrom = t), a && (e.clone = !0), i.api = $.ajax({ type: "POST", url: "/version/" + i.draft._id + "/question", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", data: JSON.stringify(e) }).done(function (e) { e.success && i.draft.questions.new(e.data.question) }) }, newQuestions: function (e) { var a = this; return a.api = $.ajax({ type: "POST", url: "/version/" + a.draft._id + "/questions", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", data: JSON.stringify({ questions: e }) }).done(function (e) { if (e.success) for (var t = 0; t < e.data.questions.length; t++)a.draft.questions.new(e.data.questions[t]) }) }, updateQuestion: function (t, e) { var a = this; return 0 !== e.standards.length && "string" != typeof e.standards[0] && (e.standards = _.map(e.standards, function (e) { return e._id })), a.api = $.ajax({ type: "PUT", url: "/version/" + a.draft._id + "/question/" + e._id, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", data: JSON.stringify(e) }).done(function (e) { e.success && a.draft.questions.getItem(t).set(e.data.question) }) }, deleteQuestion: function (t) { var a = this; return a.api = $.ajax({ type: "DELETE", url: "/version/" + a.draft._id + "/question/" + t._id, headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json" }).done(function (e) { e.success && a.draft.questions.findAndDelete({ _id: t._id }) }) }, getVersion: function () { var e = this; return e.getProp("createdBy").getProp("_id") === user.id && e.hasDraftVersion ? e.draft : e.hasPublishedVersion || e.latestVersion._id ? e.latestVersion.name ? e.latestVersion : e.info.name ? e.info : e.draft : e.info }, loveLabel: function () { var e = this; return e.isLoved ? 1 === e.love ? i18n(26) : i18n(25, [e.love - 1]) : 1 === e.love ? i18n(23, [1]) : i18n(24, [e.love]) }, gradeLabel: function () { var e = this.getVersion().grade[0] || "K", t = this.getVersion().grade[1] || "University"; return (e === t ? s(e) : s(e) + " - " + s(t)) + ("0" !== t && "13" !== t ? " " + i18n(22) : "") }, averageScore: function () { return Math.round(this.stats.totalCorrect / (this.stats.totalQuestions || 1) * 100) }, publish: function () { return this.api = $.ajax({ type: "POST", url: "/quiz/" + this._id + "/version/" + this.draft._id + "/publish", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json" }).done(function (e) { e.success }) }, makeQuizEditableAgain: function () { var t = this; return t.api = $.ajax({ type: "POST", url: "/quiz/" + t._id + "/edit", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json" }).done(function (e) { e.success && (t.set(e.data.quiz), t.draft = e.data.draft) }) }, addLove: function () { var t = this; if (!t.loving) return t.set({ isLoved: !0, love: t.love + 1, loving: !0 }), Krafty2.$.ajax({ type: "POST", url: "/quiz/" + t._id + "/love", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { e.success ? t.set({ loving: !1 }) : t.set({ isLoved: !1, love: t.love - 1, loving: !1 }) }) }, removeLove: function () { var t = this; if (!t.loving) return t.set({ isLoved: !1, love: t.love - 1, loving: !0 }), Krafty2.$.ajax({ type: "DELETE", url: "/quiz/" + t._id + "/love", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { e.success ? t.set({ loving: !1 }) : t.set({ isLoved: !0, love: t.love + 1, loving: !1 }) }) }, startGame: function (e, t, a) { return $.ajax({ type: "POST", url: "/game", headers: { "x-csrf-token": Globals.CSRFToken }, data: JSON.stringify({ quizId: this._id, hostId: user.id, gameOptions: t, type: e, expiry: a, locale: locale, memeSet: t.memeset }), contentType: "application/json", dataType: "json" }) }, duplicate: function () { return $.ajax({ type: "POST", url: "/quiz/" + this._id + "/version/" + this.publishedVersion + "/clone", headers: { "x-csrf-token": Globals.CSRFToken }, contentType: "application/json", dataType: "json" }) }, delete: function () { return Krafty2.$.ajax({ type: "DELETE", url: "/quiz/" + this._id, headers: { "x-csrf-token": Globals.CSRFToken } }) }, humanizePlays: function () { var e = this; return 1e6 <= e.stats.totalPlayers ? (e.stats.totalPlayers / 1e6).toFixed(1).replace(".0", "") + " M" : 1e3 <= e.stats.totalPlayers ? (e.stats.totalPlayers / 1e3).toFixed(1).replace(".0", "") + " K" : e.stats.totalPlayers }, reportAbuse: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/reportQuiz", headers: { "x-csrf-token": Globals.CSRFToken }, data: { reason: e, comments: t, quizUrl: "https://quizizz.com/admin/quiz/" + this._id, quizName: (this.hasPublishedVersion ? this.info : this.draft).name, createdAt: (new Date).toString() } }) }, reportError: function (e, t) { return Krafty2.$.ajax({ type: "POST", url: "/suggestEditQuiz", headers: { "x-csrf-token": Globals.CSRFToken }, data: { typeofedit: e, comments: t, quizUrl: "https://quizizz.com/admin/quiz/" + this._id, quizName: (this.hasUnpublishedDraft ? this.draft : this.latestVersion).name, createdAt: (new Date).toString() } }) } } }) }(), function () { function a(e) { return "K" !== e && "University" !== e ? "0" === e ? "K" : "1" === e ? "1st" : "2" === e ? "2nd" : "3" === e ? "3rd" : "13" === e ? "University" : e + "th" : e } new Krafty2.Model("SearchResult", { props: { _id: Krafty2.Types.String, hasUnpublishedDraft: Krafty2.Types.Boolean, love: Krafty2.Types.Number, deleted: Krafty2.Types.Boolean, cloned: Krafty2.Types.Boolean, createdAt: Krafty2.Types.String, createdBy: Krafty2.Models.User, questions: new Krafty2.Collection(Krafty2.Models.Question), name: Krafty2.Types.String, image: Krafty2.Types.String, lang: Krafty2.Types.String, visibility: Krafty2.Types.String, totalPlayers: Krafty2.Types.Number, isLoved: Krafty2.Types.Boolean, lang: Krafty2.Types.String, subjects: Krafty2.Types.Array, subtopics: Krafty2.Types.Array, grade: Krafty2.Types.Array, loving: Krafty2.Types.Boolean, isTagged: Krafty2.Types.Boolean }, methods: { gradeLabel: function () { var e = this.grade[0] || "K", t = this.grade[1] || "University"; return (e === t ? a(e) : a(e) + " - " + a(t)) + ("K" !== t && "University" !== t ? " " + i18n(22) : "") }, humanizePlays: function () { var e = this; return 1e6 <= e.totalPlayers ? (e.totalPlayers / 1e6).toFixed(1).replace(".0", "") + " M" : 1e3 <= e.totalPlayers ? (e.totalPlayers / 1e3).toFixed(1).replace(".0", "") + " K" : e.totalPlayers }, loveLabel: function () { var e = this; return e.isLoved ? 1 === e.love ? i18n(26) : i18n(25, [e.love - 1]) : 1 === e.love ? i18n(23, [1]) : i18n(24, [e.love]) }, addLove: function () { var t = this; if (!t.loving) return t.set({ isLoved: !0, love: t.love + 1, loving: !0 }), Krafty2.$.ajax({ type: "POST", url: "/quiz/" + t._id + "/love", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { e.success ? t.set({ loving: !1 }) : t.set({ isLoved: !1, love: t.love - 1, loving: !1 }) }) }, removeLove: function () { var t = this; if (!t.loving) return t.set({ isLoved: !1, love: t.love - 1, loving: !0 }), Krafty2.$.ajax({ type: "DELETE", url: "/quiz/" + t._id + "/love", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { e.success ? t.set({ loving: !1 }) : t.set({ isLoved: !0, love: t.love + 1, loving: !1 }) }) } } }), new Krafty2.Model("SearchResults", { props: { total: Krafty2.Types.Number, pageNumber: Krafty2.Types.Number, hits: new Krafty2.Collection(Krafty2.Models.Quiz) }, methods: { getPersonalQuizzes: function (e, t, a) { var i = this, s = _.isNumber(e) ? e : i.pageNumber || 0; return i.api = Krafty2.$.ajax({ type: "GET", url: "/search", headers: { "x-csrf-token": Globals.CSRFToken }, data: { from: 10 * s, filterList: JSON.stringify({ "username.aggs": [t.toLowerCase()] }), forProfile: !0 }, success: function (e) { e.success && (i.hits.pushRaw(e.data.hits), i.set({ total: e.data.total, pageNumber: s }), a && a()) } }) }, getPublicQuizzes: function (e, t, a, i) { var s = this, o = _.isNumber(e) ? e : s.pageNumber || 0, n = "featured" === i ? "featuredPageCache" : "searchPageCache"; t.occupation && _.isArray(t.occupation) && -1 === t.occupation.indexOf("teacher") && t.occupation.push("teacher"); var r = { from: 10 * o, sortKey: t.sortKey || "_score", filterList: JSON.stringify({ "grade_type.aggs": t.grade && "all" !== t.grade ? [t.grade] : [], occupation: t.occupation || ["teacher", "teacher_school", "teacher_university", "other"], cloned: t.cloned || [!0, !1], "subjects.aggs": t.subject && "All" !== t.subject ? [t.subject] : [] }), sessionId: t.sessionId, queryId: t.queryId, source: t.source, page: t.page }, l = JSON.parse(sessionStorage.getItem(n) || null) || { total: 0, hits: [], pageNumber: 0, term: t.term }; t.term && (r.query = t.term); var d = +sessionStorage.getItem(n + "Expire") || 0; return !l || d < Date.now() || 0 === l.hits.length || l.pageNumber < o ? s.api = Krafty2.$.ajax({ type: "GET", url: "/search", headers: { "x-csrf-token": Globals.CSRFToken }, data: r }).done(function (e) { if (e.success) { console.log("Served from server..."), a ? s.hits.setRaw(e.data.hits) : s.hits.pushRaw(e.data.hits), s.set({ total: e.data.total, pageNumber: o }), l.pageNumber = o, l.total = e.data.total, l.hits = l.hits.concat(e.data.hits); try { sessionStorage.setItem(n, JSON.stringify(l)), sessionStorage.setItem(n + "Expire", Date.now() + 864e5) } catch (e) { } } }) : { done: function (e) { console.log("Served from cache..."), s.hits.setRaw(l.hits), s.set({ total: l.total, pageNumber: l.pageNumber }), setTimeout(function () { e() }, 100) } } }, getTeleportQuizzes: function (e, t, a) { var i = this, s = _.isNumber(e) ? e : i.pageNumber || 0; t.occupation && _.isArray(t.occupation) && -1 === t.occupation.indexOf("teacher") && t.occupation.push("teacher"); var o = { from: 10 * s, sortKey: "_score", personal: !!t.personal, filterList: JSON.stringify({ "grade_type.aggs": [], occupation: t.personal ? [] : ["teacher", "teacher_school", "teacher_university", "other"], cloned: t.cloned ? [!0, !1] : [!1], "subjects.aggs": [] }), sessionId: t.sessionId, queryId: t.queryId, source: t.source, page: t.page }; return t.term && (o.query = t.term.trim()), console.log("Page Number : " + s), i.api = Krafty2.$.ajax({ type: "GET", url: "/search", headers: { "x-csrf-token": Globals.CSRFToken }, data: o }).done(function (e) { e.success && (console.log("Served from server..."), a ? i.hits.setRaw(e.data.hits) : i.hits.pushRaw(e.data.hits), i.set({ total: e.data.total, pageNumber: s })) }) }, getPrivateQuizzes: function (e, t) { var a = this, i = _.isNumber(e) ? e : a.pageNumber || 0, s = { personal: !0, from: 10 * i, sortKey: t.sortKey ? t.sortKey : "createdAt", order: t.order || "desc", createdByMe: t.createdByMe, filterList: JSON.stringify({ tags: _.isArray(t.tags) ? t.tags : [] }) }; return t.term && (s.query = t.term), t.tags.length && "liked" === t.tags[0] && (s.sortKey = "updated", s.order = "desc", s.filterList = JSON.stringify({ tags: ["__love__"] })), a.api = Krafty2.$.ajax({ type: "GET", url: "/search", headers: { "x-csrf-token": Globals.CSRFToken }, data: s }).done(function (e) { e.success && (a.setRaw({ total: e.data.total, pageNumber: i }), a.hits.pushRaw(e.data.hits)) }) }, destroy: function () { this.api && !this.api.resolved && this.api.abort() } } }) }(), function () { var e = new Krafty2.Model("Tag", { props: { _id: Krafty2.Types.String, entityType: Krafty2.Types.String, name: Krafty2.Types.String, totalItems: Krafty2.Types.Number, loading: Krafty2.Types.Boolean, visibility: Krafty2.Types.Boolean }, methods: { rename: function (e) { var t = this, a = t.name; return t.name = e.name, t.api = $.ajax({ type: "PUT", url: "/tags/" + t._id, headers: { "x-csrf-token": Globals.CSRFToken }, data: e }).done(function (e) { e.success || (t.name = a) }) }, delete: function (e) { return $.ajax({ type: "DELETE", url: "/tags/" + this._id, headers: { "x-csrf-token": Globals.CSRFToken }, data: e }).done(function (e) { sessionStorage.setItem("featuredPageCache", null), sessionStorage.setItem("searchPageCache", null) }) }, addToTag: function (e) { var t = this; if (!t.loading) return t.loading = !0, t.api = Krafty2.$.ajax({ type: "POST", url: "/tags/" + t._id + "/add", headers: { "x-csrf-token": Globals.CSRFToken }, data: { type: t.entityType, entityId: e } }).done(function (e) { e.success && (t.totalItems++ , sessionStorage.setItem("featuredPageCache", null), sessionStorage.setItem("searchPageCache", null)), t.loading = !1 }) }, removeFromTag: function (e) { var t = this; if (!t.loading) return t.loading = !0, t.api = Krafty2.$.ajax({ type: "POST", url: "/tags/" + t._id + "/remove", headers: { "x-csrf-token": Globals.CSRFToken }, data: { type: t.entityType, entityId: e } }).done(function (e) { e.success && (t.totalItems-- , sessionStorage.setItem("featuredPageCache", null), sessionStorage.setItem("searchPageCache", null)), t.loading = !1 }) }, getEntities: function (e) { var t = this; return t.api = Krafty2.$.ajax({ type: "GET", url: "/tags/" + e + "/public", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { e.success && t.set(e.data) }) }, duplicate: function (e) { return Krafty2.$.ajax({ type: "POST", url: "/tags/duplicate/" + e, headers: { "x-csrf-token": Globals.CSRFToken } }) }, destroy: function () { this.api && !this.api.resolved && this.api.abort() } } }); new Krafty2.Model("Tags", { props: { list: new Krafty2.Collection(e) }, methods: { getPublicTags: function (e, t) { var a = this; return a.api = Krafty2.$.ajax({ type: "GET", url: "/tags/user/" + e, headers: { "x-csrf-token": Globals.CSRFToken }, data: { type: t } }).done(function (e) { e.success && a.set({ list: e.data }) }) }, getTags: function (e) { var t = this; return t.api = Krafty2.$.ajax({ type: "GET", url: "/tags", headers: { "x-csrf-token": Globals.CSRFToken }, data: { type: e } }).done(function (e) { e.success && t.set({ list: e.data }) }) }, getTagsForEntity: function (e) { return Krafty2.$.ajax({ type: "GET", url: "/tags/entity", headers: { "x-csrf-token": Globals.CSRFToken }, data: { ids: [e] } }) }, newTag: function (e) { var t = this; return t.api = Krafty2.$.ajax({ type: "POST", url: "/tags", headers: { "x-csrf-token": Globals.CSRFToken }, data: e }).done(function (e) { t.list.new(e.data) }) }, isUnique: function (e) { for (var t = 0; t < this.list.length(); t++)if (this.list.getItem(t).name === e) return !1; return !0 }, destroy: function () { this.api && !this.api.resolved && this.api.abort() } } }) }(), function () { var e = new Krafty2.Model("Local", { props: { username: Krafty2.Types.String, email: Krafty2.Types.String } }), t = new Krafty2.Model("CreatedBy", { props: { _id: Krafty2.Types.String, firstName: Krafty2.Types.String, lastName: Krafty2.Types.String, title: Krafty2.Types.String, local: e, media: Krafty2.Types.String } }), a = new Krafty2.Model("Meme", { props: { _id: Krafty2.Types.String, type: Krafty2.Types.String, name: Krafty2.Types.String, deleted: Krafty2.Types.Boolean, topText: Krafty2.Types.String, bottomText: Krafty2.Types.String, originalURL: Krafty2.Types.String, finalURL: Krafty2.Types.String }, methods: { create: function (e, t) { var a = this; return a.api = $.ajax({ url: "/meme/" + e, type: "POST", headers: { "x-csrf-token": Globals.CSRFToken }, data: t }).done(function (e) { t._id = e.id, a.set(t) }) }, uploadRawImage: function (e, t) { Globals.ImageUtils.uploadDataURLToS3(e, "memesraw", { error: function (e) { t.error && t.error() }, timeout: function () { t.timeout && t.timeout() }, progress: function (e) { t.progress && t.progress(e) }, load: function (e) { t.success && t.success(e) } }) }, uploadMeme: function (e, t) { Globals.ImageUtils.uploadDataURLToS3(e, "memes", { error: function (e) { t.error && t.error() }, timeout: function () { t.timeout && t.timeout() }, progress: function (e) { t.progress && t.progress(e) }, load: function (e) { t.success && t.success(e) } }) }, update: function (e, t, a) { var i = this; return i.api = $.ajax({ url: "/memeset/" + e + "/meme/" + t + "/final", type: "PUT", headers: { "x-csrf-token": Globals.CSRFToken }, data: a, success: function (e) { i.set(e) } }) }, delete: function (e, t) { return $.ajax({ url: "/meme/" + e, type: "DELETE", headers: { "x-csrf-token": Globals.CSRFToken }, data: { memeset: t } }) }, destroy: function () { this.api && !this.api.resolved && this.api.abort() } } }), i = new Krafty2.Model("Memeset", { props: { _id: Krafty2.Types.String, updated: Krafty2.Types.String, createdBy: t, thumbnail: Krafty2.Types.String, createdAt: Krafty2.Types.String, name: Krafty2.Types.String, deleted: Krafty2.Types.Boolean, isPublished: Krafty2.Types.Boolean, totalIncorrect: Krafty2.Types.Number, totalCorrect: Krafty2.Types.Number, lang: Krafty2.Types.String, isPublic: Krafty2.Types.String, isReviewed: Krafty2.Types.Boolean, totalMemes: Krafty2.Types.Number, memes: new Krafty2.Collection(a), featured: Krafty2.Types.Boolean }, methods: { getMemeset: function (e) { var t = this; return t.api = $.ajax({ type: "GET", url: "/memeset/" + e + "?showUser=true", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { t.set(e) }) }, create: function () { var t = this; return t.api = $.ajax({ type: "POST", url: "/memeset", headers: { "x-csrf-token": Globals.CSRFToken }, success: function (e) { t.set(e.data) } }) }, update: function (e, t) { var a = this; return a.api = $.ajax({ url: "/memeset/" + e, type: "PUT", data: t, headers: { "x-csrf-token": Globals.CSRFToken }, success: function (e) { a.set(e.data) } }) }, delete: function (e) { return $.ajax({ type: "DELETE", url: "/memeset/" + e, headers: { "x-csrf-token": Globals.CSRFToken } }) }, publish: function (e) { return $.ajax({ method: "POST", url: "/publishMemeSet/" + e._id, data: e, headers: { "x-csrf-token": Globals.CSRFToken }, success: function (e) { } }) }, clone: function (e) { return $.ajax({ type: "GET", url: "/memeset/" + e + "/clone", headers: { "x-csrf-token": Globals.CSRFToken } }) }, destroy: function () { this.api && !this.api.resolved && this.api.abort() } } }); new Krafty2.Model("Memesets", { props: { list: new Krafty2.Collection(i) }, methods: { getList: function (e, t) { var a = this; a.api = Krafty2.$.ajax({ type: "GET", url: "/memesets/user/" + e, headers: { "x-csrf-token": Globals.CSRFToken }, success: function (e) { t && (a.set({ list: e.data }), t()) } }) }, getFeatured: function () { var t = this; return t.api = $.ajax({ type: "GET", url: "/memesets?featured=true", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { t.set({ list: e }) }) }, getPrivateList: function () { var t = this; return t.api = $.ajax({ type: "GET", url: "/memesets", headers: { "x-csrf-token": Globals.CSRFToken } }).done(function (e) { t.set({ list: e }), t.list.sortBy(function (e) { return -new Date(e.updated).getTime() }) }) }, destroy: function () { this.api && !this.api.resolved && this.api.abort() } } }) }(), new Krafty2.View("MainHeader", { template: Krafty2.Templates.MainHeader, parent: $(".app-container"), data: { searchContextList: [{ text: "All Quizzes", val: "all_quizzes" }, { text: "My Quizzes", val: "my_quizzes" }, { text: "Reports", val: "reports" }], hideJoinGame: !1, hideHeader: !1 }, state: { type: "", title: "", bottomHeader: !1, searchOpen: !1, showNav: !1, pageTitle: "", focused: !1, shadowIncrease: !1, mobileTitle: "Default", searchTerm: "", isNotifWidgetOpen: !1, unreadNotifications: 0 }, filters: { afterCreate: function () { var t = this; setTimeout(function () { t.html.removeClass("up").addClass("down") }, 200), Globals.media.on("change", function () { Globals.media.desktop ? t.setState({ showNav: !0 }) : t.setState({ showNav: !1 }) }), t.childViews.searchContext.selectVal("all_quizzes"), 24 < $(document).scrollTop() ? t.increaseShadow() : t.normalShadow(), $("body").on("mousewheel.header DOMMouseScroll.header", function (e) { 24 < $(document).scrollTop() ? t.increaseShadow() : t.normalShadow() }), $("body").on("click.header", function () { t.state.focused && t.setState({ focused: !1 }) }) }, beforeDestroy: function (e) { $("body").off("mousewheel.header DOMMouseScroll.header"), $("body").off("click.header"), e() } }, messages: { "select -> userDropdown": function (e) { "profile" === e.val ? App.setRoute("/profile/" + user.id) : "settings" === e.val ? App.setRoute("/settings") : "signout" === e.val && (window.location = "/auth/logout") } }, methods: { setHeaderType: function (e, t, a) { var i = this; i.setState({ type: e, bottomHeader: !0 }), i.bottomHeader && i.bottomHeader.destroy(), $(".page-container").css({ paddingTop: 128 }), "search" === e ? (i.bottomHeader = new Krafty2.Views.SearchResultsHeader({ parent: i.html.find(".bottom-header"), parentView: i, data: t, state: a, viewModels: { media: Globals.media } }), i.childViews.searchContext.selectVal("all_quizzes")) : "myQuizizz" === e ? (i.bottomHeader = new Krafty2.Views.MyQuizizzHeader({ parent: i.html.find(".bottom-header"), parentView: i, data: t, state: a, viewModels: { media: Globals.media } }), i.childViews.searchContext.selectVal("my_quizzes")) : "report" === e || "reports" === e ? (i.childViews.searchContext.selectVal("reports"), i.setState({ type: e, bottomHeader: !1 }), $(".page-container").css({ paddingTop: 64 })) : "collectionsPublic" === e ? i.bottomHeader = new Krafty2.Views.CollectionsPublicHeader({ parent: i.html.find(".bottom-header"), parentView: i, data: t, state: a, viewModels: { media: Globals.media } }) : "editor" === e ? $(".page-container").css({ paddingTop: 0 }) : "marketingHome" === e ? $(".page-container").css({ paddingTop: 0 }) : (i.setState({ type: e, bottomHeader: !1 }), $(".page-container").css({ paddingTop: 64 }), i.setSearchText(""), i.childViews.searchContext.selectVal("all_quizzes")) }, setSearchText: function (e) { this.html.find(".main-search-input").val(e), this.setState({ searchTerm: e }) }, pullUp: function () { this.container.find(".main-header").removeClass("down").addClass("up") }, pushDown: function () { var e = this; setTimeout(function () { e.container.find(".main-header").removeClass("up").addClass("down") }, 200) }, toggleNav: function () { this.setState({ showNav: !this.state.showNav }) }, setPage: function (e) { this.setState({ pageTitle: e }) }, increaseShadow: function () { this.setState({ shadowIncrease: !0 }) }, normalShadow: function () { this.setState({ shadowIncrease: !1 }) }, hide: function () { this.html.hide() }, showTutorialWidget: function (e) { var t = this; t.tutorialWidget || (t.tutorialWidget = new Krafty2.Views.TutorialWidget({ parent: $(".help-tut-btn").parent(), data: { targetElement: $(".help-tut-btn"), highlightTut: e || null } }), t.tutorialWidget.on("destroy", function () { t.tutorialWidget = null })) }, openSignupPrompt: function (e) { this.promptSignupModal && this.promptSignupModal.destroy(), this.promptSignupModal = new Krafty2.Views.PromptSignupModal({ data: { promptFrom: e } }), Globals.Analytics.sendEvent("signupPromptModal", { status: "prompted", source: e }) }, getSearchContext: function () { var e = ""; switch (this.state.type) { case "myQuizizz": e = "Search my quizzes"; break; case "report": case "reports": e = "Search reports"; break; default: e = "Find a Quiz" }return e }, clearSearch: function () { this.setState({ searchOpen: !1, searchTerm: "" }) }, getUnreadNotifCount: function () { return 9 < this.state.unreadNotifications ? "9+" : this.state.unreadNotifications }, updateUnreadNotifCount: function (e, t) { var a = this; a.setState({ unreadNotifications: e }), t && 0 < e && (a.html.find(".notification-bell").addClass("notify"), setTimeout(function () { a.html.find(".notification-bell").removeClass("notify") }, 1500)) } }, events: { "click -> .bars": function () { Globals.mainNavigation.toggle(), Globals.media.desktop && (Globals.mainNavigation.state.openNav ? ($(".page-container").css({ marginLeft: 192, width: "calc(100% - 192px)" }), this.html.find(".bars .burger-icon").removeClass("burger").addClass("cross")) : ($(".page-container").css({ marginLeft: 0, width: "100%" }), this.html.find(".bars .burger-icon").removeClass("cross").addClass("burger"))), this.trigger("burger", Globals.mainNavigation.state.openNav), Globals.Analytics.sendEvent("BurgerClick", { event: Globals.mainNavigation.state.openNav ? "opened" : "closed", page: Globals.Analytics.pageFromPathname(window.location.pathname) }) }, "click -> .search-icon": function (e, t) { var a = this; "SearchPage" !== App.currentState.state && (a.setState({ searchOpen: !a.state.searchOpen }), a.state.searchOpen ? a.state.bottomHeader ? $(".page-container").css({ paddingTop: 192 }) : $(".page-container").css({ paddingTop: 128 }) : a.state.bottomHeader ? $(".page-container").css({ paddingTop: 128 }) : $(".page-container").css({ paddingTop: 64 }), $("body").on("click.search-icon", function () { "SearchPage" !== App.currentState.state && (a.setState({ searchOpen: !1 }), $("body").off("click.search-icon"), a.state.bottomHeader ? $(".page-container").css({ paddingTop: 128 }) : $(".page-container").css({ paddingTop: 64 })) }), t.stopPropagation()) }, "click -> .close-search-btn": function () { this.setState({ searchOpen: !1 }) }, "click -> .main-search": function (e, t) { t.stopPropagation() }, "keyup -> .main-search-input": function (e, t) { var a = this; 13 === t.which && e.val() && (Globals.Analytics.sendEvent("search", { source: "MainHeader", page: Globals.Analytics.pageFromPathname(window.location.pathname), term: e.val() }), "my_quizzes" === a.childViews.searchContext.val() ? ("MyQuizizz" === App.currentState.state ? a.trigger("mainSearch", e.val()) : App.setRoute("/admin/private?term=" + encodeURIComponent(e.val())), Globals.UserAnalytics.sendEvent("search.privateQuiz")) : "all_quizzes" === a.childViews.searchContext.val() ? (sessionStorage.setItem("queryId", (user.id || Math.random() * Number.MAX_SAFE_INTEGER) + "-" + Date.now()), "SearchPage" === App.currentState.state ? a.trigger("mainSearch", e.val()) : App.setRoute("/admin/search/" + encodeURIComponent(e.val()), null, { page: Globals.Analytics.pageFromPathname(window.location.pathname), source: "MainHeader" }), Globals.UserAnalytics.sendEvent("search.publicQuiz")) : (App.setRoute("/admin/reports?term=" + encodeURIComponent(e.val())), Globals.UserAnalytics.sendEvent("search.report")), a.setState({ searchTerm: e.val() }), e.blur()) }, "focus -> .main-search-input": function (e, t) { this.setState({ focused: !0 }) }, "click -> .sign-in-btn": function (e, t) { $(e).hasClass("login-action") ? this.loginView = new Krafty2.Views.LoginModal({ data: { query: { q: encodeURIComponent(window.location.pathname) }, title: i18n(250) } }) : window.location.href = "/signup?source=" + Globals.currentPage + "&q=" + encodeURIComponent(window.location.href) }, "click -> .help-tut-btn": function (e, t) { Globals.Tour.getCurrentPrompt() || (this.showTutorialWidget(), Globals.Analytics.sendEvent("helpTutorialClicked")) }, "click -> .join-game-btn": function (e, t) { Globals.Analytics.sendEvent("joinClicked", { source: Globals.currentPage }) }, "click -> .search-icon-desktop, .search-icon-label": function () { var e = this; this.setState({ focused: !0 }), setTimeout(function () { e.html.find(".main-search-input").focus() }, 0) }, "click -> .create-quiz-btn": function (e, t) { t.preventDefault(), user && user.id ? Globals.Analytics.sendEvent("Create", { source: "MainHeader", complete: function () { window.location = "/admin/quiz/new" } }) : this.openSignupPrompt("create") }, "click -> .notification-bell i, .notification-bell span": function (e, t) { var a = this; t.stopPropagation(), a.state.isNotifWidgetOpen ? a.notificationWidget.destroy() : (a.notificationWidget = new Krafty2.Views.NotificationWidget({ parent: Globals.media.mobile ? $(".top-header") : a.html.find(".notification-bell") }), a.notificationWidget.on("destroy", function () { a.setState({ isNotifWidgetOpen: !1 }) }), a.setState({ isNotifWidgetOpen: !0 }), Globals.Analytics.sendEvent("notif-bell-click", { category: "notification", unreadCount: a.state.unreadNotifications, notifIds: Globals.NotificationService.getNotifications().map(function (e) { return e._id }).join(",") })) } } }), new Krafty2.View("MainNavigation", { template: Krafty2.Templates.MainNavigation, parent: $(".app-container"), data: { showNav: !0 }, state: { openNav: !1, openDrawer: !1, showAccountNav: !1, page: "" }, filters: { afterCreate: function () { var e = this; Globals.media.desktop && e.data.showNav ? setTimeout(function () { e.setState({ openNav: !0 }), $(".page-container").css({ marginLeft: 192, width: "calc(100% - 192px)" }) }, 200) : $(".page-container").css({ marginLeft: 0, width: "100%" }), Globals.media.on("change", function () { Globals.media.desktop && e.data.showNav ? (e.setState({ openNav: !0 }), $(".page-container").css({ marginLeft: 192, width: "calc(100% - 192px)" })) : (e.setState({ openNav: !1 }), $(".page-container").css({ marginLeft: 0, width: "100%" })) }) } }, methods: { setTop: function (e) { this.html.find(".main-navigation .main-navigation-inner").css({ top: e }) }, toggle: function (e) { var t = this; Globals.media.desktop ? (t.setState({ openNav: !t.state.openNav }), t.state.openNav ? $(".page-container").css({ marginLeft: 200, width: "initial" }) : $(".page-container").css({ marginLeft: 0, width: "100%" }), Globals.mainHeader.toggleNav()) : t.setState({ openDrawer: !t.state.openDrawer }) }, setPage: function (e) { this.setState({ page: e }) }, hide: function (e) { this.html.hide() }, open: function (e, t) { t.ctrlKey || t.metaKey ? window.open(e) : App.setRoute(e) }, openSignupPrompt: function (e) { this.promptSignupModal && this.promptSignupModal.destroy(), this.promptSignupModal = new Krafty2.Views.PromptSignupModal({ data: { promptFrom: e } }), Globals.Analytics.sendEvent("signupPromptModal", { status: "prompted", source: e }) } }, events: { "click -> .back-btn": function () { this.toggle() }, "click -> .not-signed-in": function (e, t) { this.loginView = new Krafty2.Views.LoginModal({ data: { query: { q: encodeURIComponent(window.location.pathname) }, title: i18n(250) } }), Globals.Analytics.sendEvent("sideNavLoginClicked") }, "click -> .main-navigation-drawer": function (e, t) { t.stopPropagation() }, "click -> .main-navigation-drawer-container": function (e, t) { this.toggle() }, "click -> #explore": function (e, t) { this.open("/admin", t), Globals.Analytics.sendEvent("MainNavLink", { url: "/admin", page: "FeaturedPage", navbarState: this.state.openNav, source: "MainNavigation" }) }, "click -> #create": function (e, t) { user && user.id ? Globals.Analytics.sendEvent("Create", { source: "MainNavigation", success: function () { window.location = "/admin/quiz/new" } }) : this.signupPromptSpecial = new Krafty2.Views.SignupPromptSpecial({ data: { modalFor: "create" } }) }, "click -> #my-quizzes": function (e, t) { user && user.id ? (this.open("/admin/private", t), Globals.Analytics.sendEvent("MainNavLink", { url: "/admin/private", navbarState: this.state.openNav, source: "MainNavigation", page: "MyQuizizzPage" }), Globals.media.desktop || this.toggle()) : this.openSignupPrompt("myQuizzes") }, "click -> #reports": function (e, t) { user && user.id ? (this.open("/admin/reports", t), Globals.Analytics.sendEvent("MainNavLink", { url: "/admin/reports", navbarState: this.state.openNav, source: "MainNavigation", page: "ReportsPage" }), Globals.media.desktop || this.toggle()) : this.openSignupPrompt("reports") }, "click -> #memes": function (e, t) { user && user.id ? (this.open("/admin/memes", t), Globals.Analytics.sendEvent("MainNavLink", { url: "/admin/memes", navbarState: this.state.openNav, source: "MainNavigation", page: "MemesPage" }), Globals.media.desktop || this.toggle()) : this.openSignupPrompt("memes") }, "click -> #profile": function (e, t) { this.open("/profile/" + user.id, t), Globals.Analytics.sendEvent("MainNavLink", { url: "/profile/" + user.id, navbarState: this.state.openNav, source: "MainNavigation", page: "ProfilePage" }), Globals.media.desktop || this.toggle() }, "click -> #settings": function (e, t) { this.open("/settings", t), Globals.Analytics.sendEvent("MainNavLink", { url: "/settings", navbarState: this.state.openNav, source: "MainNavigation", page: "SettingsPage" }), Globals.media.desktop || this.toggle() }, "click -> #signout": function (e, t) { window.location = "/auth/logout" }, "click -> #refer": function (e, t) { this.referFriendModal = new Krafty2.Views.ReferFriendModal({ data: { triggerSource: "referBtn" } }), Globals.media.desktop || this.toggle() }, "click -> .email-verification": function () { this.emailVerificationModal = new Krafty2.Views.EmailVerificationModal({}), Globals.media.desktop || this.toggle() }, "click -> #collections": function (e, t) { user && user.id ? (this.open("/admin/collections", t), Globals.Analytics.sendEvent("MainNavLink", { url: "/admin/collections", navbarState: this.state.openNav, source: "MainNavigation", page: "CollectionsPage" }), Globals.media.desktop || this.toggle()) : this.openSignupPrompt("collections") }, "click -> .signed-in .user-details": function () { App.setRoute("/profile/" + user.id), Globals.Analytics.sendEvent("MainNavLink", { url: "/profile/" + user.id, navbarState: this.state.openNav, source: "MainNavigationHeader", page: "ProfilePage" }), Globals.media.desktop || this.toggle() }, "click -> #switch-design": function () { Globals.Analytics.sendEvent("switchToOldDesign", {}, function () { window.location = "/user/beta-subscription?set=false" }) }, "click -> .signup-banner .signup-btn": function () { window.location.href = "/signup?source=signupPromptNav" } } }), new Krafty2.View("RemoveFromCollectionModal", { template: Krafty2.Templates.RemoveFromCollectionModal, parent: $("body"), extends: Krafty2.Views.Modal, events: { "click -> #delete-btn": function () { this.trigger("delete") } } }), new Krafty2.View("PlayModesModal", { template: Krafty2.Templates.PlayModesModal, parent: $("body"), extends: Krafty2.Views.Modal }), new Krafty2.View("EmailVerificationModal", { template: Krafty2.Templates.EmailVerificationModal, parent: $("body"), extends: Krafty2.Views.Modal, state: { view: "step-1", message: "", loading: !1, cls: "", ok: !1, modalLoading: !1 }, events: { "click -> .edit-btn": function (e, t) { this.setState({ view: "email-edit" }) }, "click -> .back-btn": function (e, t) { this.setState({ view: "step-1" }) }, "keyup -> #email": function (e, t) { var a = e.val(), i = this; /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(a) ? (i.emailTimeout && clearTimeout(i.emailTimeout), i.emailTimeout = setTimeout(function () { console.log("Checking email please wait ..."), i.setState({ loading: !0, ok: !1, message: "" }), Globals.AuthApi.checkEmailAvail(a, function (e) { i.setState({ loading: !1, ok: e.avail, message: e.err ? i18n(locale, "account_already_exists") : "Email looks good", cls: e.err ? "fail" : "ok" }) }) }, 500)) : i.setState({ message: i18n(locale, "enter_valid_email"), ok: !1, loading: !1, cls: "fail" }) }, "click -> .save-email": function (e, t) { var a = this; Krafty2.$.ajax({ type: "POST", url: "/user/updateEmail", headers: { "x-csrf-token": Globals.CSRFToken }, data: { currentEmail: user.email, newEmail: a.html.find("#email").val() }, success: function (e) { user.email = e.newEmail, a.setState({ view: "step-1" }) } }) }, "click -> .send-verification-email": function () { var e = this; e.setState({ modalLoading: !0 }), Globals.AuthApi.sendVerificationEmail({ zendesk: !1 }).done(function () { e.setState({ view: "step-2", modalLoading: !1 }) }) }, "click -> .email-fail-1": function () { var e = this; e.setState({ modalLoading: !0 }), Globals.AuthApi.sendVerificationEmail({ zendesk: !0 }).done(function () { e.setState({ view: "step-3", modalLoading: !1 }) }) }, "click -> .email-fail-2": function () { var e = this; e.setState({ modalLoading: !0 }), Globals.AuthApi.register2({ verified: 2 }, function () { e.setState({ view: "step-4", modalLoading: !1 }), Globals.mainNavigation.setState({}) }, function () { }) }, "click -> .cancel-btn": function () { this.destroy() } } }), new Krafty2.State("SearchPage", { load: function (a) { var i = this; try { sessionStorage.getItem("searchSearchedAt") || sessionStorage.setItem("searchSearchedAt", Date.now()) } catch (e) { } var s = JSON.parse(localStorage.getItem("QuizizzAnalytics")); a.params.term = decodeURIComponent(a.params.term), a.query.sortBy = a.query.sortBy ? decodeURIComponent(a.query.sortBy) : "_score", a.query.grade = a.query.grade ? decodeURIComponent(a.query.grade) : "all", a.query.subject = a.query.subject ? decodeURIComponent(a.query.subject) : "All", a.query.duplicates = a.query.duplicates ? decodeURIComponent(a.query.duplicates) : "false", a.query.studentQuizzes = a.query.studentQuizzes ? decodeURIComponent(a.query.studentQuizzes) : "false", Globals.Init(), Globals.mainHeader.setPage(i18n(5)), Globals.mainNavigation.setPage("explore"), Globals.mainHeader.setState({ searchOpen: !0 }), Globals.mainHeader.setSearchText(a.params.term), Globals.SEO.setPage({ title: '"' + a.params.term + " | Search Results - Quizizz", page: window.location.pathname, desc: "Quizizz search results for " + a.params.term }); var e = JSON.parse(sessionStorage.getItem("searchPageCache") || null) || { total: 0, hits: [], pageNumber: 0 }; try { e.term !== a.params.term && (sessionStorage.setItem("searchPageCache", ""), sessionStorage.setItem("lastScrollTop", "")) } catch (e) { } function o(e, t) { i.searchResults && i.searchResults.destroy(), i.searchPageView && i.searchPageView.destroy(), JSON.parse(sessionStorage.getItem("searchPageCache") || null), i.searchResults = new Krafty2.Models.SearchResults({}), i.tags = new Krafty2.Models.Tags({}), i.tags.getTags("quiz"), i.searchPageView = new Krafty2.Views.SearchPage({ viewModels: { searchResults: i.searchResults, media: Globals.media, tags: i.tags }, state: { loading: !0, term: a.params.term } }), i.searchPageView.on("hoverEnd", function (e) { 500 <= e.actionTime && Globals.AnalyticsApi.send({ sortKey: a.query.sortBy, searchTerm: a.params.term, actionType: "hover", actionTime: e.actionTime, position: e.position, quizId: e.quizId, searchedAt: sessionStorage.getItem("searchSearchedAt"), love: e.love, totalPlayers: e.totalPlayers, sessionId: s.sessionId, queryId: sessionStorage.getItem("queryId") }) }), i.searchPageView.on("click", function (e) { try { sessionStorage.setItem("lastScrollTop", $(document).scrollTop()) } catch (e) { } Globals.AnalyticsApi.send({ sortKey: a.query.sortBy, searchTerm: a.params.term, actionType: "click", actionTime: e.actionTime, position: e.position, quizId: e.quizId, searchedAt: sessionStorage.getItem("searchSearchedAt"), love: e.love, totalPlayers: e.totalPlayers, sessionId: s.sessionId, queryId: sessionStorage.getItem("queryId") }) }), i.searchPageView.on("like", function (e) { try { var t = JSON.parse(sessionStorage.getItem("searchPageCache")); t.hits[e].isLoved = i.searchResults.hits.getItem(e).isLoved, sessionStorage.setItem("searchPageCache", JSON.stringify(t)) } catch (e) { } }), i.searchPageView.on("nextPage", function () { i.searchResults.getPublicQuizzes(++e, t, !1, "search").done(function () { i.searchPageView.childViews.searchResults.setState({ loading: !1 }) }) }), i.searchResults.getPublicQuizzes(e, t, !1, "search").done(function () { var e = sessionStorage.getItem("lastScrollTop"); i.searchPageView.childViews.searchResults.setState({ pageLoading: !1, moveTo: e }), i.searchPageView.setState({ loading: !1 }), Globals.mainHeader.bottomHeader.setState({ title: i.searchResults.total + ' results for "' + a.params.term + '"' }) }) } i.mainSearchEvent = Globals.mainHeader.on("mainSearch", function (e) { a.params.term = e, $("html, body").scrollTop(0); try { sessionStorage.setItem("searchPageCache", ""), sessionStorage.setItem(cache + "Expire", 0), sessionStorage.setItem("lastScrollTop", "") } catch (e) { } o(0, { term: a.params.term, sortKey: a.query.sortBy, grade: a.query.grade, subject: a.query.subject, cloned: "true" === a.query.duplicates ? [!0, !1] : [!1], occupation: "true" === a.query.studentQuizzes ? ["teacher_school", "teacher_university", "other", "student"] : ["teacher_school", "teacher_university", "other"], sessionId: s.sessionId, queryId: sessionStorage.getItem("queryId"), source: "MainHeader", page: "SearchPage" }); var t = "/admin/search/" + e + window.location.search; App.setRouteSoft(t), Globals.SEO.setPage({ title: '"' + e + '" | Search Results - Quizizz', page: window.location.pathname, desc: "Quizizz search results for " + e }) }), i.filterEvent = Globals.mainHeader.on("filter", function (e) { try { sessionStorage.setItem("lastScrollTop", ""), sessionStorage.setItem("searchPageCache", "") } catch (e) { } $(document).scrollTop(0), a.query.sortBy = e.sortBy, a.query.grade = e.grade, a.query.duplicates = e.duplicates ? [!0, !1] : [!1], a.query.studentQuizzes = e.studentQuizzes || "false", o(0, { sortKey: e.sortBy, grade: e.grade, subject: e.subject, cloned: e.duplicates ? [!0, !1] : [!1], occupation: e.studentQuizzes ? ["teacher_school", "teacher_university", "other", "student"] : ["teacher_school", "teacher_university", "other"], term: a.params.term, sessionId: s.sessionId, queryId: sessionStorage.getItem("queryId"), page: "SearchPage", source: "FilterComponent" }) }), Globals.mainHeader.setHeaderType("search", {}, { title: "", sortBy: a.query.sortBy, grade: a.query.grade, subject: a.query.subject, duplicates: "true" === a.query.duplicates, studentQuizzes: "true" === a.query.studentQuizzes }), o(0, { term: a.params.term, sortKey: a.query.sortBy, grade: a.query.grade, subject: a.query.subject, cloned: "true" === a.query.duplicates ? [!0, !1] : [!1], occupation: "true" === a.query.studentQuizzes ? ["teacher_school", "teacher_university", "other", "student"] : ["teacher_school", "teacher_university", "other"], sessionId: s.sessionId, queryId: sessionStorage.getItem("queryId"), page: a.params.page || "SearchPage", source: a.params.source || "BrowserLoad" }), Globals.media.desktop || $(".page-container").css({ paddingTop: 192 }) }, unload: function () { var e = this; e.searchResults && e.searchResults.destroy(), e.tags && e.tags.destroy(), e.searchPageView && e.searchPageView.destroy(), Globals.mainHeader.off(e.filterEvent), Globals.mainHeader.off(e.mainSearchEvent), Globals.mainHeader.clearSearch() } }), new Krafty2.View("SearchPage", { template: Krafty2.Templates.SearchPage, parent: $(".page-inner"), state: { selectedQuiz: null, loading: !1, term: "" }, filters: { afterCreate: function () { var e = this; Globals.media.on("change", function () { Globals.media.mobile && e.previewView && e.previewView.destroy() }), !Globals.media.desktop || Globals.mainHeader.state.showNav || user && user.id || Globals.mainHeader.toggleNav() }, afterRender: function () { !Globals.media.desktop && this.previewView && this.previewView.destroy() }, beforeDestroy: function (e) { this.previewView && this.previewView.destroy(), e() } }, messages: { "hover -> searchResults": function (e) { var t = this; Globals.media.desktop && (t.previewView && t.previewView.destroy(), t.previewView = new Krafty2.Views.SearchResultsPreview({ parent: t.html.find(".search-results-preview-container"), viewModels: { quiz: e }, data: { stickType: "static", stickTop: 128 } }), t.setState({ selectedQuiz: e._id })) }, "hoverEnd -> searchResults": function (e) { } }, events: { "click -> .e-create-quiz": function () { var t = this; Globals.QuizApi.create().done(function (e) { !0 === e.success && (window.location = "/quiz/" + e.data.id + "/edit"), Globals.Analytics.sendEvent("SearchQuizzesNoQuizViewCreateQuizBtn", { url: "/quiz/" + e.data.id + "/edit", navbarState: t.state.openNav, source: "MainNavigation", page: "Editor" }), Globals.Analytics.sendEvent("Create", { source: "MainNavigation" }) }) } } }), new Krafty2.View("SearchResults", { template: Krafty2.Templates.SearchResults, parent: Krafty2.$(".app-container"), data: { noPreview: !1, removeButton: !1, nospinner: !1 }, state: { selectedItem: -1, loading: !1, pageLoading: !1, loadingRemove: null, moveTo: null, endOfResults: !1 }, filters: { afterCreate: function () { var t = this; t.html.find(".search-results-list")[0].getBoundingClientRect().right, t.html.find(".preview").width(), $(window).on("scroll", function () { var e = $("body").height() - window.innerHeight - 100; Krafty2.$(window).scrollTop() > e && !t.state.loading && t.viewModels.quizzes.pageNumber < Math.floor(t.viewModels.quizzes.total / 10) && (t.trigger("nextPage"), t.setState({ loading: !0 }), $("body,html").scrollTop(99999)) }) }, onDestroy: function () { $(window).off("scroll") }, afterRender: function () { var e = this; e.state.moveTo && ($(document).scrollTop(+e.state.moveTo), console.log("Scrolled To " + e.state.moveTo), e.state.moveTo = null, sessionStorage.setItem("lastScrollTop", "")), e.viewModels.quizzes.hits.length() === e.viewModels.quizzes.total && !e.state.endOfResults && 10 < e.viewModels.quizzes.total && e.setState({ endOfResults: !0 }), Globals.media.desktop && e.data.noPreview ? e.html.find(".data .name .num-questions").addClass("hidden") : Globals.media.tablet && e.html.find(".data .name .num-questions").removeClass("hidden") } }, props: { htmlEscape: function (e) { return Krafty2.$("<div>" + e + "</div>").text() } }, events: { "click -> .username": function (e, t) { var a = e.attr("data-id"); Globals.Analytics.sendEvent("SearchResultUsernameClick", { url: "/profile/" + a, navbarState: Globals.mainNavigation.state.openNav, source: Globals.Analytics.pageFromPathname(window.location.pathname), page: "ProfilePage" }), App.setRoute("/profile/" + a), t.stopPropagation() }, "click -> .search-results-item": function (e, t) { var a, i = this, s = +e.attr("data-idx"), o = i.viewModels.quizzes.hits.getItem(s); i.trigger("click", { actionTime: Date.now() - i.mouseEnterTime, quizId: o._id, position: s, love: o.love, totalPlayers: o.totalPlayers }), Globals.Analytics.sendEvent("SearchResultsItemClick", { url: "/admin/quiz/" + i.viewModels.quizzes.hits.getItem(s)._id, navbarState: Globals.mainNavigation.state.openNav, source: Globals.Analytics.pageFromPathname(window.location.pathname), page: "QuizPage" }), t.metaKey || t.ctrlKey ? (a = (a = "/admin/quiz/" + i.viewModels.quizzes.hits.getItem(s)._id + "/" + Globals.URL.sluggify(o.getVersion().name)).replace("//", "/"), window.open(a)) : (a = (a = "/admin/quiz/" + i.viewModels.quizzes.hits.getItem(s)._id + "/" + Globals.URL.sluggify(o.getVersion().name)).replace("//", "/"), App.setRoute(a)) }, "click -> .search-results-item-mobile": function (e, t) { var a = this, i = +e.attr("data-idx"), s = a.viewModels.quizzes.hits.getItem(i); a.trigger("click", { actionTime: Date.now() - a.mouseEnterTime, quizId: s._id, position: i, love: s.love, totalPlayers: s.totalPlayers }), Globals.Analytics.sendEvent("SearchResultsItemClick", { url: "/admin/quiz/" + a.viewModels.quizzes.hits.getItem(i)._id, navbarState: Globals.mainNavigation.state.openNav, source: Globals.Analytics.pageFromPathname(window.location.pathname), page: "QuizPage" }); var o = "/admin/quiz/" + a.viewModels.quizzes.hits.getItem(i)._id + "/" + Globals.URL.sluggify(s.getVersion().name); o = o.replace("//", "/"), App.setRoute(o) }, "mouseenter -> .search-results-item": function (e, t) { var a = this, i = +e.attr("data-idx"); a.state.selectedItem === i || a.data.noPreview || a.html.find(".preview").scrollTop(0), a.setState({ selectedItem: i }), a.mouseEnterTime = Date.now(), a.viewModels.quizzes.hits.length() && (a.viewModels.quizzes.hits.getItem(i).getRaw(), a.trigger("hover", a.viewModels.quizzes.hits.getItem(i)), a.sendMessage("hover", a.viewModels.quizzes.hits.getItem(i))) }, "mouseenter -> .search-results-item-mobile": function (e, t) { var a = this, i = +e.attr("data-idx"); a.state.selectedItem === i || a.data.noPreview || a.html.find(".preview").scrollTop(0), a.setState({ selectedItem: i }), a.mouseEnterTime = Date.now(), a.viewModels.quizzes.hits.getItem(i).getRaw(), a.trigger("hover", a.viewModels.quizzes.hits.getItem(i)), a.sendMessage("hover", a.viewModels.quizzes.hits.getItem(i)) }, "mouseleave -> .search-results-item": function (e, t) { var a = this, i = +e.attr("data-idx"), s = a.viewModels.quizzes.hits.getItem(i); a.trigger("hoverEnd", { actionTime: Date.now() - a.mouseEnterTime, quizId: s._id, position: i, love: s.love, totalPlayers: s.totalPlayers }), a.sendMessage("hoverEnd", { actionTime: Date.now() - a.mouseEnterTime, quizId: s._id, position: i, love: s.love, totalPlayers: s.totalPlayers }) }, "mouseleave -> .search-results-item-mobile": function (e, t) { var a = this, i = +e.attr("data-idx"), s = a.viewModels.quizzes.hits.getItem(i); a.trigger("hoverEnd", { actionTime: Date.now() - a.mouseEnterTime, quizId: s._id, position: i, love: s.love, totalPlayers: s.totalPlayers }), a.sendMessage("hoverEnd", { actionTime: Date.now() - a.mouseEnterTime, quizId: s._id, position: i, love: s.love, totalPlayers: s.totalPlayers }) }, "click -> .save-btn": function (e, t) { var a = this, i = +e.attr("data-idx"); Globals.Analytics.sendEvent("QuizAddButton", { page: Globals.Analytics.pageFromPathname(window.location.pathname), quizId: a.viewModels.quizzes.hits.getItem(i)._id }), user && user.id ? (a.tagsView = new Krafty2.Views.TagsView({ data: { entity: { _id: a.viewModels.quizzes.hits.getItem(i)._id, name: a.viewModels.quizzes.hits.getItem(i).getVersion().name }, idx: i }, viewModels: { quizzes: a.viewModels.quizzes, tags: a.viewModels.tags } }), a.tagsView.on("tag-update", function () { a.trigger("tag-update", i) })) : a.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "Save this quiz with a free account", modalIcon: "addCollection", triggerSource: "searchResultView" } }), t.stopPropagation() }, "click -> .like-btn": function (e, t) { var a = +e.attr("data-idx"), i = this.viewModels.quizzes.hits.getItem(a); Globals.Analytics.sendEvent("QuizLikeButton", { page: Globals.Analytics.pageFromPathname(window.location.pathname), action: i.isLoved ? "dislike" : "like", quizId: i._id }), user && user.id ? i.isLoved ? i.removeLove() : i.addLove() : this.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "Like quizzes with a free account", modalIcon: "like", triggerSource: "searchResultView" } }), this.trigger("like", a), t.stopPropagation() }, "click -> .remove-btn": function (e, t) { var a = this, i = +e.attr("data-idx"), s = a.viewModels.quizzes.hits.getItem(i), o = a.viewModels.tags.list.find({ _id: a.data.currentTag }); a.removeModal = new Krafty2.Views.RemoveFromCollectionModal({ data: { quizName: s.getVersion().name } }), a.removeModal.on("delete", function () { setTimeout(function () { a.removeModal.destroy(), a.setState({ loadingRemove: i }), o.removeFromTag([s._id]).done(function () { a.setState({ loadingRemove: null }), a.trigger("research") }) }, 500) }), t.stopPropagation() } } }), new Krafty2.View("SearchResultsPreview", { template: Krafty2.Templates.SearchResultsPreview, data: { stickType: "static", stickTop: 64 }, state: { showPlayDropdown: !1, soloGameLoading: !1 }, filters: { afterCreate: function () { var e = this; "static" === e.data.stickType && e.html.css({ width: .4 * $(".page-inner").width() - 36, height: "calc(100% - " + e.data.stickTop + "px - 60px)" }); var t = function () { e.html && e.html.css({ width: .4 * $(".page-inner").width() - 36 }), e.stopPreviewAnim || requestAnimationFrame(t) }; t() }, beforeDestroy: function (e) { this.stopPreviewAnim = !0, e() } }, methods: { displayMathQuill: function (e) { setTimeout(function () { e.find(".kr-math").each(function (e, t) { $(t).hasClass("mq-math-mode") || MathQuill.StaticMath(t) }) }, 0) } }, events: { "click -> .play-btn": function (e, t) { var a = this; if (Globals.Analytics.sendEvent("PreviewPlayButton", { page: Globals.Analytics.pageFromPathname(window.location.pathname) }), a.setState({ showPlayDropdown: !a.state.showPlayDropdown }), a.state.showPlayDropdown) { var i = Math.random() + Date.now(); $("body").on("click." + i, function () { a.html && a.setState({ showPlayDropdown: !1 }), $("body").off("click." + i) }) } t.stopPropagation() }, "click -> .view-quiz-btn": function (e, t) { Globals.Analytics.sendEvent("PreviewViewFullQuizBtn", { url: "/admin/quiz/" + e.attr("data-id"), navbarState: Globals.mainNavigation.state.openNav, source: Globals.Analytics.pageFromPathname(window.location.pathname), sourceButton: "ViewFullQuiz", page: Globals.Analytics.pageFromPathname(window.location.pathname) }), App.setRoute("/admin/quiz/" + e.attr("data-id")) }, "click -> .live": function (e, t) { App.setRoute("/admin/quiz/start_new/" + this.viewModels.quiz._id), t.stopPropagation() }, "click -> .homework": function (e, t) { App.setRoute("/admin/quiz/homework/" + this.viewModels.quiz._id), t.stopPropagation() }, "click -> .solo-game": function (e, t) { t.preventDefault(), t.stopPropagation(); var a = this; if (!a.state.soloGameLoading) { a.setState({ soloGameLoading: !0 }); var i = !0; Globals.Analytics.sendEvent("soloGameStarted", { quizId: a.viewModels.quiz._id, source: Globals.currentPage }, function () { i = !1, a.setState({ soloGameLoading: !1 }), window.location = "/join?solo=" + a.viewModels.quiz._id }), setTimeout(function () { i && (a.setState({ soloGameLoading: !1 }), window.location = "/join?solo=" + a.viewModels.quiz._id) }, 3e3) } } } }), new Krafty2.View("SearchResultsHeader", { template: Krafty2.Templates.SearchResultsHeader, state: { title: "", sortBy: "", grade: "", subject: "", duplicates: !1, studentQuizzes: !1 }, data: { sortbyList: [{ val: "_score", text: i18n(219) }, { val: "played", text: i18n(220) }, { val: "createdAt", text: i18n(221) }], gradesList: [{ val: "all", text: i18n(223) }, { val: "primary school", text: i18n(224) }, { val: "middle school", text: i18n(225) }, { val: "high school", text: i18n(226) }, { val: "university", text: i18n(227) }], subjectsList: [{ val: "All", text: "All Subjects" }, { val: "Mathematics", text: "Mathematics" }, { val: "English", text: "English" }, { val: "Physics", text: "Physics" }, { val: "Chemistry", text: "Chemistry" }, { val: "Biology", text: "Biology" }, { val: "Science", text: "Science" }, { val: "Computers", text: "Computers" }, { val: "World Languages", text: "World Languages" }, { val: "Geography", text: "Geography" }, { val: "History", text: "History" }, { val: "Social Studies", text: "Social Studies" }, { val: "Professional Development", text: "Professional Development" }, { val: "Physical Ed", text: "Physical Ed" }, { val: "Arts", text: "Arts" }, { val: "Fun", text: "Fun" }, { val: "Architecture", text: "Architecture", more: !0 }, { val: "Business", text: "Business", more: !0 }, { val: "Design", text: "Design", more: !0 }, { val: "Education", text: "Education", more: !0 }, { val: "Instructional Technology", text: "Instructional Technology", more: !0 }, { val: "Journalism", text: "Journalism", more: !0 }, { val: "Life Skills", text: "Life Skills", more: !0 }, { val: "Moral Science", text: "Moral Science", more: !0 }, { val: "Performing Arts", text: "Performing Arts", more: !0 }, { val: "Philosophy", text: "Philosophy", more: !0 }, { val: "Religious Studies", text: "Religious Studies", more: !0 }, { val: "Special Education", text: "Special Education", more: !0 }, { val: "Specialty", text: "Specialty", more: !0 }, { val: "Other", text: "Other", more: !0 }], sortDropdown: [{ type: "radio", text: i18n(219), val: "_score" }, { type: "radio", text: i18n(220), val: "played" }, { type: "radio", text: i18n(221), val: "createdAt" }], filterDropdown: [{ type: "label", text: i18n(222) }, { type: "radio", text: i18n(223), val: "all", group: "grade" }, { type: "radio", text: i18n(224), val: "primary school", group: "grade" }, { type: "radio", text: i18n(225), val: "middle school", group: "grade" }, { type: "radio", text: i18n(226), val: "high school", group: "grade" }, { type: "radio", text: i18n(227), val: "university", group: "grade" }, { type: "label", text: "Subjects" }, { type: "radio", group: "subject", val: "All", text: "All" }, { type: "radio", group: "subject", val: "Mathematics", text: "Mathematics" }, { type: "radio", group: "subject", val: "English", text: "English" }, { type: "radio", group: "subject", val: "Physics", text: "Physics" }, { type: "radio", group: "subject", val: "Chemistry", text: "Chemistry" }, { type: "radio", group: "subject", val: "Biology", text: "Biology" }, { type: "radio", group: "subject", val: "Science", text: "Science" }, { type: "radio", group: "subject", val: "Computers", text: "Computers" }, { type: "radio", group: "subject", val: "World Languages", text: "World Languages" }, { type: "radio", group: "subject", val: "Geography", text: "Geography" }, { type: "radio", group: "subject", val: "History", text: "History" }, { type: "radio", group: "subject", val: "Social Studies", text: "Social Studies" }, { type: "radio", group: "subject", val: "Professional Development", text: "Professional Development" }, { type: "radio", group: "subject", val: "Physical Ed", text: "Physical Ed" }, { type: "radio", group: "subject", val: "Arts", text: "Arts" }, { type: "radio", group: "subject", val: "Fun", text: "Fun" }, { type: "radio", group: "subject", val: "Architecture", text: "Architecture", more: !0 }, { type: "radio", group: "subject", val: "Business", text: "Business", more: !0 }, { type: "radio", group: "subject", val: "Design", text: "Design", more: !0 }, { type: "radio", group: "subject", val: "Education", text: "Education", more: !0 }, { type: "radio", group: "subject", val: "Instructional Technology", text: "Instructional Technology", more: !0 }, { type: "radio", group: "subject", val: "Journalism", text: "Journalism", more: !0 }, { type: "radio", group: "subject", val: "Life Skills", text: "Life Skills", more: !0 }, { type: "radio", group: "subject", val: "Moral Science", text: "Moral Science", more: !0 }, { type: "radio", group: "subject", val: "Performing Arts", text: "Performing Arts", more: !0 }, { type: "radio", group: "subject", val: "Philosophy", text: "Philosophy", more: !0 }, { type: "radio", group: "subject", val: "Religious Studies", text: "Religious Studies", more: !0 }, { type: "radio", group: "subject", val: "Special Education", text: "Special Education", more: !0 }, { type: "radio", group: "subject", val: "Specialty", text: "Specialty", more: !0 }, { type: "radio", group: "subject", val: "Other", text: "Other", more: !0 }, { type: "label", text: i18n(177) }, { type: "checkbox", text: i18n(228), val: "duplicates", group: "duplicates" }, { type: "label", text: "Student Quizzes" }, { type: "checkbox", text: "Student Created", val: "studentQuizzes", group: "studentQuizzes" }], extraDropdown: [{ type: "label", text: i18n(177) }, { type: "checkbox", text: i18n(228), val: "duplicates", group: "duplicates" }, { type: "label", text: "Student Quizzes" }, { type: "checkbox", text: "Student Created", val: "studentQuizzes", group: "studentQuizzes" }] }, messages: { "select -> sortBy": function (e) { var t = this, a = new Globals.URI(window.location.toString(), { query: { sortBy: e.val } }); t.setState({ sortBy: e.val }), t.childViews.sortByDropdown.selectVal(e.val), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "SortBy", value: t.state.sortBy }) }, "select -> grades": function (e) { var t = this, a = new Globals.URI(window.location.toString(), { query: { grade: e.val } }); t.setState({ grade: e.val }), t.childViews.filterByDropdown.selectVal(e.val), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "Grade", value: t.state.grade }) }, "select -> subjects": function (e) { var t = this, a = new Globals.URI(window.location.toString(), { query: { subject: e.val } }); t.setState({ subject: e.val }), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, subject: t.state.subject, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "Subject", value: t.state.subject }) }, "change -> duplicates": function (e) { var t = this, a = new Globals.URI(window.location.toString(), { query: { duplicates: e.checked } }); t.setState({ duplicates: e.checked }), e.checked ? t.childViews.filterByDropdown.selectVal("duplicates") : t.childViews.filterByDropdown.unselectVal("duplicates"), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "Duplicates", value: t.state.duplicates }) }, "change -> studentQuizzes": function (e) { var t = this, a = new Globals.URI(window.location.toString(), { query: { studentQuizzes: e.checked } }); t.setState({ studentQuizzes: e.checked }), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }) }, "select -> sortByDropdown": function (e) { var t = this, a = new Globals.URI(window.location.toString(), { query: { sortBy: e.val } }); t.setState({ sortBy: e.val }), t.childViews.sortBy.selectVal(e.val), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "SortBy", value: t.state.sortBy }) }, "select -> filterByDropdown": function (e) { var t = this; if ("grade" === e.group) { var a = new Globals.URI(window.location.toString(), { query: { grade: e.val } }); t.setState({ grade: e.val }), t.childViews.grades.selectVal(e.val), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, subject: t.state.subject, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "Grade", value: t.state.grade }) } else "subject" === e.group && (a = new Globals.URI(window.location.toString(), { query: { subject: e.val } }), t.setState({ subject: e.val }), t.childViews.subjects.selectVal(e.val), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, subject: t.state.subject, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "Subject", value: t.state.subject })) }, "check -> filterByDropdown": function (e) { var t = this; if ("duplicates" === e.group) { var a = new Globals.URI(window.location.toString(), { query: { duplicates: !!e.selected } }); t.setState({ duplicates: !!e.selected }), t.childViews.duplicates.val(t.state.duplicates), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, subject: t.state.subject, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "Duplicates", value: t.state.duplicates }) } else "studentQuizzes" === e.group && (a = new Globals.URI(window.location.toString(), { query: { studentQuizzes: !!e.selected } }), t.setState({ studentQuizzes: !!e.selected }), t.childViews.duplicates.val(t.state.duplicates), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, subject: t.state.subject, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "StudentQuizzes", value: t.state.studentQuizzes })) }, "check -> extraDropdown": function (e) { var t = this; if ("duplicates" === e.group) { var a = new Globals.URI(window.location.toString(), { query: { duplicates: !!e.selected } }); t.setState({ duplicates: !!e.selected }), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, subject: t.state.subject, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "Duplicates", value: t.state.duplicates }) } else "studentQuizzes" === e.group && (a = new Globals.URI(window.location.toString(), { query: { studentQuizzes: !!e.selected } }), t.setState({ studentQuizzes: !!e.selected }), App.setRouteSoft(a.toString()), t.trigger("filter", { sortBy: t.state.sortBy, grade: t.state.grade, subject: t.state.subject, duplicates: t.state.duplicates, studentQuizzes: t.state.studentQuizzes }), Globals.Analytics.sendEvent("SearchFilter", { page: "SearchPage", source: "StudentQuizzes", value: t.state.studentQuizzes })) }, "menu-click -> extraDropdown": function (e) { Globals.Analytics.sendEvent("OpenExtraDropdown", { page: "SearchPage" }) } }, filters: { afterCreate: function () { var e = this; e.childViews.sortBy.selectVal(e.state.sortBy || "_score"), e.childViews.grades.selectVal(e.state.grade || "all"), e.childViews.subjects.selectVal(e.state.subject || "All"), e.childViews.sortByDropdown.selectVal(e.state.sortBy || "_score"), e.childViews.filterByDropdown.selectVal(e.state.grade || "all"), e.childViews.filterByDropdown.selectVal(e.state.subject || "All"), e.state.duplicates && (e.childViews.filterByDropdown.selectVal("duplicates"), e.childViews.extraDropdown.selectVal("duplicates")), e.state.studentQuizzes && (e.childViews.filterByDropdown.selectVal("studentQuizzes"), e.childViews.extraDropdown.selectVal("studentQuizzes")) } }, events: { "mouseenter -> .checkbox-label": function (e, t) { this.duplicatesTooltip = new Krafty2.Views.Tooltip({ data: { text: this.childViews.duplicates.val() ? "Hide duplicate quizzes in the search results" : "Show duplicate quizzes in the search results", position: "top", parent: e, style: { zIndex: 9999, position: "fixed", top: 20, width: 150 } } }) }, "mouseleave -> .checkbox-label": function () { this.duplicatesTooltip.destroy() }, "click -> .checkbox-label": function () { this.childViews.duplicates.toggle() } } }), new Krafty2.View("SelectBox", { template: Krafty2.Templates.SelectBox, state: { opened: !1, selectedText: "", selectedVal: "", selectedIdx: -1, selectedImg: "", focus: !1 }, data: { placeholder: "", button: "", sameControl: !1, onlyImageInSelected: !1, icon: "", listHeight: 140 }, filters: { afterRender: function () { this.data.button && this.html.find(".kr-selectbox-list").css({ height: this.data.listHeight }) } }, events: { "mousedown -> .kr-selectbox-selected-option": function (e, t) { this.state.opened && t.stopPropagation() }, "click -> .kr-selectbox-selected-option": function (e, t) { var a = this; a.setState({ opened: !this.state.opened }), a.state.opened && (a.sendMessage("open"), a.closeUUID = Date.now() + "" + Math.random(), $(document).on("mousedown." + a.closeUUID, function (e) { a.setState({ opened: !1 }), $(document).off("mousedown." + a.closeUUID), a.closeUUID = null, a.sendMessage("close"), a.trigger("close"), a.blur() })), a.data.sameControl = !0, a.focus() }, "keyup -> .kr-selectbox-focus-helper": function (e, t) { var a = this, i = e.val().toLowerCase(); if (i) { var s = new RegExp("^" + i); console.log(s), a.clearFocusHelper && clearTimeout(a.clearFocusHelper), a.clearFocusHelper = setTimeout(function () { e.val("") }, 500); for (var o = 0; o < a.data.list.length; o++) { var n = a.data.list[o]; if (s.test(n.text.toLowerCase())) { console.log(n.text); var r = a.html.find(".kr-selectbox-list li[data-val=" + n.val + "]"), l = a.html.find(".kr-selectbox-list"); l.scrollTop(r[0].getBoundingClientRect().top - l[0].getBoundingClientRect().top + l.scrollTop()); break } } } }, "click -> .kr-selectbox-list > li": function (e, t) { var a = this; a.setState({ opened: !1, selectedText: e.text(), selectedVal: e.attr("data-val"), selectedIdx: e.attr("data-idx"), selectedImg: a.data.list[+e.attr("data-idx")].img }), a.sendMessage("select", { text: e.text(), val: e.attr("data-val"), idx: e.attr("data-idx"), selectedImg: a.data.list[+e.attr("data-idx")].img }), a.closeUUID && ($(document).off("mousedown." + a.closeUUID), a.closeUUID = null, a.sendMessage("close"), a.trigger("close")), t.stopPropagation() }, "mousedown -> .kr-selectbox-list > li": function (e, t) { t.stopPropagation() }, "mousedown -> .kr-selectbox-list": function (e, t) { t.stopPropagation() }, "mousedown -> .kr-selectbox-btn": function (e, t) { t.stopPropagation(), t.preventDefault() }, "click -> .kr-selectbox-btn": function (e, t) { var a = this; a.sendMessage("SelectBoxBtn", a.data.button), a.trigger("SelectBoxBtn", a.data.button), a.setState({ opened: !1 }), t.stopPropagation(), t.preventDefault() } }, methods: { setList: function (e) { this.data.list = e, this.render() }, open: function () { this.setState({ opened: !0 }) }, close: function () { this.setState({ opened: !1 }) }, focus: function () { Globals.media.desktop && this.html.find(".kr-selectbox-focus-helper").focus() }, blur: function () { Globals.media.desktop && this.html.find(".kr-selectbox-focus-helper").blur() }, text: function () { return this.state.selectedText }, val: function () { return this.state.selectedVal }, selectIdx: function (e) { var t = this; this.setState({ selectedIdx: e, selectedVal: t.data.list[e] ? t.data.list[e].val : "", selectedText: t.data.list[e] ? t.data.list[e].text : "", selectedImg: t.data.list[e] ? t.data.list[e].img : "" }) }, selectVal: function (e) { var t = _.find(this.data.list, { val: e }), a = _.indexOf(this.data.list, t); t && this.setState({ selectedIdx: a, selectedVal: t.val, selectedText: t.text, selectedImg: t.img }) }, reset: function () { this.data.list = [], this.setState({ selectedIdx: -1, selectedVal: "", selectedText: "", selectedImg: "" }) } } }), new Krafty2.View("CheckBox", { template: Krafty2.Templates.CheckBox, state: { checked: !1 }, filters: { onCreate: function () { var e = this; void 0 !== e.data.checked && (e.state.checked = e.data.checked, e.data = _.omit(e.data, "checked")) } }, events: { "click -> .kr-checkbox-control": function () { this.setState({ checked: !this.state.checked }), this.sendMessage("change", { checked: this.state.checked }) } }, methods: { val: function (e) { if (!_.isBoolean(e)) return this.state.checked; this.setState({ checked: e }) }, toggle: function () { this.setState({ checked: !this.state.checked }), this.sendMessage("change", { checked: this.state.checked }) } } }), new Krafty2.View("Dropdown", { template: Krafty2.Templates.Dropdown, parent: $("body"), data: { label: "", list: [], open: !1, selection: !0, type: "menu" }, filters: { afterCreate: function () { this.createDropdown() } }, methods: { setList: function (e) { this.data.list = e, this.createDropdown() }, createBottomSheet: function () { var i = this; if (i.bottomSheet) { var e = i.bottomSheet, t = i.bottomSheetInner; e.css({ backgroundColor: "rgba(0,0,0,0.0)" }), t.css({ bottom: "-100%" }), setTimeout(function () { e.remove() }, 200) } i.bottomSheet = $('<div class="kr-bottom-sheet-container"></div>'), i.bottomSheet.on("click", function (e) { i.closeBottomSheet(), e.stopPropagation() }), i.bottomSheetInner = $('<div class="kr-bottom-sheet-inner"></div>'), i.bottomSheetInner.on("click", function (e) { e.stopPropagation() }), i.bottomSheet.append(i.bottomSheetInner), i.bottomSheetList = $('<ul class="kr-bottom-sheet-list"></ul>'), i.bottomSheetInner.append(i.bottomSheetList); for (var a = 0; a < i.data.list.length; a++) { var s = i.data.list[a], o = $('<li class="' + (s.type || "button") + " " + (s.selected ? "selected" : "") + '"/>'); if (s.group && o.attr("data-group", s.group), o.text(i.data.list[a].text), "checkbox" === s.type || "radio" === s.type) { var n = $('<i class="fa fa-check"></i>'); s.selected || n.hide(), o.prepend(n) } s.icon && (n = $('<i class="fa ' + s.icon + '"></i>'), o.prepend(n)), i.bottomSheetList.append(o), "label" !== s.type && function (t, a) { a.on("click", function (e) { if (i.data.selection) { if ("radio" === t.type) { if (t.selected) return; i.sendMessage("select", t), t.group ? (i.bottomSheetList.find("li[data-group=" + t.group + "]").removeClass("selected"), i.bottomSheetList.find("li[data-group=" + t.group + "] i").hide()) : (i.bottomSheetList.find("li").removeClass("selected"), i.bottomSheetList.find("li i").hide()), "radio" === t.type && a.find("i").show(), i.selectVal(t.val), a.addClass("selected") } "checkbox" == t.type && (a.toggleClass("selected"), a.hasClass("selected") ? (i.selectVal(t.val), a.find("i").show()) : (i.unselectVal(t.val), a.find("i").hide()), i.sendMessage("check", t)) } else i.sendMessage("select", t); i.eventId && $(document).off("click." + i.eventId), i.closeBottomSheet(), e.stopPropagation() }) }(s, o) } $("body").append(i.bottomSheet) }, createDropdownList: function () { var i = this; i.dropdown && i.dropdown.remove(); for (var s = i.dropdown = $('<ul class="kr-dropdown-control-list">'), e = 0; e < i.data.list.length; e++) { var t = i.data.list[e], a = $('<li class="' + (t.type || "button") + " " + (t.selected ? "selected" : "") + '"/>'); if (t.group && a.attr("data-group", t.group), a.text(i.data.list[e].text), "checkbox" === t.type || "radio" === t.type) { var o = $('<i class="fa fa-check"></i>'); t.selected || o.hide(), a.prepend(o) } t.icon && (o = $('<i class="fa ' + t.icon + '"></i>'), a.prepend(o)), s.append(a), "label" !== t.type && function (t, a) { a.on("click", function (e) { if (i.data.selection) { if ("radio" === t.type) { if (t.selected) return; i.sendMessage("select", t), t.group ? (s.find("li[data-group=" + t.group + "]").removeClass("selected"), s.find("li[data-group=" + t.group + "] i").hide()) : (s.find("li").removeClass("selected"), s.find("li i").hide()), "radio" === t.type && a.find("i").show(), i.selectVal(t.val), a.addClass("selected") } "checkbox" == t.type && (a.toggleClass("selected"), a.hasClass("selected") ? (i.selectVal(t.val), a.find("i").show()) : (i.unselectVal(t.val), a.find("i").hide()), i.sendMessage("check", t)) } else { if (t.selected) return; i.sendMessage("select", t) } i.eventId && $(document).off("click." + i.eventId), i.toggleDropdown(), e.stopPropagation() }) }(t, a) } $("body").append(s) }, createDropdown: function () { Globals.media.mobile ? this.createBottomSheet() : this.createDropdownList() }, toggleDropdown: function () { var e = this; if (e.dropdown) { if (e.data.open) e.dropdown.hide(); else { var t = e.html[0].getBoundingClientRect().left, a = e.html[0].getBoundingClientRect().bottom + $(window).scrollTop(); e.html[0].getBoundingClientRect().left + e.dropdown.width() > window.innerWidth && (t = e.html[0].getBoundingClientRect().right - e.dropdown.width()), e.dropdown.css({ left: t, top: a }).show(), e.eventId = Math.random(), $(document).on("click." + e.eventId, function () { e.toggleDropdown(), $(document).off("click." + e.eventId), e.eventId = null }) } e.data.open = !e.data.open, e.data.open ? e.html.addClass("open") : e.html.removeClass("open") } }, openBottomSheet: function () { var e = this; e.bottomSheet.show(), setTimeout(function () { e.bottomSheet.css({ backgroundColor: "rgba(0,0,0,0.4)" }), e.bottomSheetInner.css({ bottom: 0 }) }, 100) }, closeBottomSheet: function () { var e = this; e.bottomSheet.css({ backgroundColor: "rgba(0,0,0,0.0)" }), e.bottomSheetInner.css({ bottom: "-100%" }), setTimeout(function () { e.bottomSheet.hide() }, 200) }, selectVal: function (e) { var t = _.find(this.data.list, { val: e }), a = { selected: !0 }; t.group && (a.group = t.group); var i = _.find(this.data.list, a); i && i.selected && delete i.selected, t.selected = !0, this.createDropdown() }, unselectVal: function (e) { var t = _.find(this.data.list, { val: e }); t && t.selected && delete t.selected, this.createDropdown() } }, events: { "click -> .kr-dropdown-control-label, .kr-menu-btn": function (e, t) { var a = this; a.eventId && $(document).off("click." + a.eventId), Globals.media.mobile ? a.openBottomSheet() : a.toggleDropdown(), a.trigger("menu-click"), a.sendMessage("menu-click"), t.stopPropagation() } } }), function () { var a = Globals.URI = function (e, t) { var a = this; a.props = { query: {}, hash: [] }, a.str = "", a.parse(e), a.props = _.defaultsDeep(t, a.props) }; a.prototype.parse = function (e) { var t = this, a = document.createElement("a"); a.href = e, t.protocol = a.protocol, t.host = a.hostname, t.path = a.pathname; var i = t.path.split("/"); t.baseName = i[i.length - 1], t.extension = /(\.[a-zA-Z]+)/g.exec(t.baseName), t.extension = _.isArray(t.extension) ? t.extension[0].replace(".", "") : ""; for (var s = a.search.replace("?", ""), o = a.hash.replace("#", ""), n = _.compact(s.split("&")), r = 0; r < n.length; r++) { var l = n[r].split("=")[0], d = n[r].split("=")[1]; t.props.query[l] = d } var c = _.compact(o.split(",")); for (r = 0; r < c.length; r++)t.props.hash.push(c[r]) }, a.prototype.toString = function () { for (var e = this, t = "", a = _.keys(e.props.query), i = 0; i < a.length; i++)t += (0 < i ? "&" : "") + a[i] + "=" + e.props.query[a[i]]; return e.path + (0 < a.length ? "?" : "") + t + (0 < e.props.hash.length ? "#" : "") + e.props.hash.join(",") }, a.prototype.getFullURI = function () { for (var e = this, t = "", a = _.keys(e.props.query), i = 0; i < a.length; i++)t += (0 < i ? "&" : "") + a[i] + "=" + e.props.query[a[i]]; return e.protocol + "//" + e.host + e.path + (0 < a.length ? "?" : "") + t + (0 < e.props.hash.length ? "#" : "") + e.props.hash.join(",") }, a.prototype.getPath = function () { return this.path }, a.prototype.isValidUrl = function (e) { var t = /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(localhost\:(\d){1,5})|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i; return /^https?:\/\//i.test(e) || (e = "https://quizizz.com" + e), t.test(e) }, a.prototype.isRelativeUrl = function (e) { return 0 == e.indexOf("/") && 0 != e.indexOf("//") }, a.prototype.isQuizizzUrl = function (e) { return /^(https?:\/\/(.+?\.)?(quizizz\.com|(localhost(\:\d{1,5})?))((\/[A-Za-z0-9\-\._~:\/\?#\[\]@!$&'\(\)\*\+,;\=]*)?)$)/i.test(e) }, a.extendQuery = function (e, t) { return new a(e, { query: t }).getFullURI() }, a.isValidUrl = function (e) { return /^(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})$/g.test(e) } }(), Globals.Analytics = { init: function (e) { if (!localStorage.getItem("QuizizzAnalytics") || e) try { localStorage.setItem("QuizizzAnalytics", JSON.stringify({ sessionId: (user.id || Math.random() * Number.MAX_SAFE_INTEGER) + "-" + Date.now(), eventCount: 0, expiry: Date.now() + 18e5 })) } catch (e) { } }, sendEvent: function (a, i, s) { setTimeout(function () { try { localStorage.setItem("test", "HelloWorld"); var e = JSON.parse(localStorage.getItem("QuizizzAnalytics")); e.expiry <= Date.now() && (Globals.Analytics.init(!0), e = JSON.parse(localStorage.getItem("QuizizzAnalytics"))); var t = { time: Date.now(), platform: "web", eventName: a, experiment: getCookie("QUIZIZZ_EXP_NAME"), slot: getCookie("QUIZIZZ_EXP_SLOT"), params: _.extend({ sessionId: e.sessionId ? e.sessionId : (user.id || Math.random() * Number.MAX_SAFE_INTEGER) + "-" + Date.now(), userId: user.id, eventCount: e.eventCount + 1, media: Globals.media ? Globals.media.type : null }, i) }; i && "notification" === i.category && (t.category = i.category), $.ajax({ url: analyticsURL + "/events", xhrFields: { withCredentials: !0 }, type: "POST", data: t }).done(function () { s && s() }), localStorage.setItem("QuizizzAnalytics", JSON.stringify({ sessionId: e.sessionId, eventCount: e.eventCount + 1, expiry: Date.now() + 18e5 })) } catch (e) { console.log("local storage not available") } }, 10) }, pageFromPathname: function (e) { return -1 !== e.indexOf("/admin/private") ? "MyQuizizzPage" : -1 !== e.indexOf("/admin/search/") ? "SearchPage" : -1 !== e.indexOf("/admin/quiz/start_new/") ? "StartLiveGamePage" : -1 !== e.indexOf("/admin/quiz/homework/") ? "StartHomeworkGamePage" : e.match(/\/quiz\/[a-zA-Z0-9]+\/startV4/) ? "LiveDashboardPage" : -1 !== e.indexOf("/admin/quiz/") ? "QuizPage" : -1 !== e.indexOf("/admin/collections") ? "CollectionsPage" : -1 !== e.indexOf("/admin/memes") ? "MemesPage" : -1 !== e.indexOf("/admin/reports") ? "ReportsPage" : -1 !== e.indexOf("/admin") ? "FeaturedPage" : -1 !== e.indexOf("/profile") ? "ProfilePage" : -1 !== e.indexOf("/signup") ? "SignupPage" : -1 !== e.indexOf("/login") ? "LoginPage" : -1 !== e.indexOf("/forgot-password") ? "ForgotPasswordPage" : -1 !== e.indexOf("/email-verified") ? "EmailVerifiedPage" : -1 !== e.indexOf("/reset-password") ? "ResetPasswordPage" : -1 !== e.indexOf("/settings") ? "SettingsPage" : -1 !== e.indexOf("/collection/") ? "CollectionsPublicPage" : -1 !== e.indexOf("/resources") ? "ResourcesPage" : e.match(/\/quiz\/[a-zA-Z0-9]+\/edit/) ? "Editor" : e.match(/\/(?![^?])/) ? "HomePage" : void 0 } }, Globals.AnalyticsApi = { send: function (e) { $.ajax({ url: "https://analytics.quizizz.com/search", type: "POST", xhrFields: { withCredentials: !0 }, data: { array: [{ filter: { lang: locale }, results: [{ sortKey: e.sortKey, searchTerm: e.searchTerm, actionType: e.actionType, order: "desc", actionTime: e.actionTime, resultsPerPage: 10, position: e.position, quizId: e.quizId, searchedAt: e.searchedAt, love: e.love, totalPlayers: e.totalPlayers, userId: user.id, platform: window.navigator.platform, sessionId: e.sessionId, queryId: e.queryId }] }] } }) } }, Globals.UserAnalytics = { sendEvent: function (e) { for (var t = e.split("."), a = {}, i = a, s = user.events, o = 0; o < t.length - 1; o++)i[t[o]] = {}, i = i[t[o]], null == s[t[o]] && (s[t[o]] = {}), s = s[t[o]]; i[t[t.length - 1]] = !0, !s[t[t.length - 1]] && user && user.id && "student" != user.occupation && Globals.UserAnalytics.sendEventAPI(a).done(function () { s[t[t.length - 1]] = !0 }) }, sendEventAPI: function (e) { return $.ajax({ url: "/user/events", contentType: "application/json", type: "POST", dataType: "json", data: JSON.stringify(e) }) }, sendTutorialEvent: function (e) { var t = { tutorials: e }; return $.ajax({ url: "/user/events", contentType: "application/json", type: "POST", dataType: "json", data: JSON.stringify(t) }).done(function () { Globals.UserAnalytics.updateUserObject() }) }, updateUserObject: function () { $.ajax({ url: "/user/events/manualLogin", type: "GET", success: function (e) { e.success && (window.user = e.data) } }) } }, Globals.Countries = [{ Name: "Afghanistan", Code: "AF" }, { Name: "Åland Islands", Code: "AX" }, { Name: "Albania", Code: "AL" }, { Name: "Algeria", Code: "DZ" }, { Name: "American Samoa", Code: "AS" }, { Name: "Andorra", Code: "AD" }, { Name: "Angola", Code: "AO" }, { Name: "Anguilla", Code: "AI" }, { Name: "Antigua and Barbuda", Code: "AG" }, { Name: "Argentina", Code: "AR" }, { Name: "Armenia", Code: "AM" }, { Name: "Aruba", Code: "AW" }, { Name: "Australia", Code: "AU" }, { Name: "Austria", Code: "AT" }, { Name: "Azerbaijan", Code: "AZ" }, { Name: "Bahamas", Code: "BS" }, { Name: "Bahrain", Code: "BH" }, { Name: "Bangladesh", Code: "BD" }, { Name: "Barbados", Code: "BB" }, { Name: "Belarus", Code: "BY" }, { Name: "Belgium", Code: "BE" }, { Name: "Belize", Code: "BZ" }, { Name: "Benin", Code: "BJ" }, { Name: "Bermuda", Code: "BM" }, { Name: "Bhutan", Code: "BT" }, { Name: "Bolivia, Plurinational State of", Code: "BO" }, { Name: "Bonaire, Sint Eustatius and Saba", Code: "BQ" }, { Name: "Bosnia and Herzegovina", Code: "BA" }, { Name: "Botswana", Code: "BW" }, { Name: "Brazil", Code: "BR" }, { Name: "British Indian Ocean Territory", Code: "IO" }, { Name: "Brunei Darussalam", Code: "BN" }, { Name: "Bulgaria", Code: "BG" }, { Name: "Burkina Faso", Code: "BF" }, { Name: "Burundi", Code: "BI" }, { Name: "Cambodia", Code: "KH" }, { Name: "Cameroon", Code: "CM" }, { Name: "Canada", Code: "CA" }, { Name: "Cape Verde", Code: "CV" }, { Name: "Cayman Islands", Code: "KY" }, { Name: "Central African Republic", Code: "CF" }, { Name: "Chad", Code: "TD" }, { Name: "Chile", Code: "CL" }, { Name: "China", Code: "CN" }, { Name: "Christmas Island", Code: "CX" }, { Name: "Cocos (Keeling) Islands", Code: "CC" }, { Name: "Colombia", Code: "CO" }, { Name: "Comoros", Code: "KM" }, { Name: "Congo", Code: "CG" }, { Name: "Congo, the Democratic Republic of the", Code: "CD" }, { Name: "Cook Islands", Code: "CK" }, { Name: "Costa Rica", Code: "CR" }, { Name: "Côte d'Ivoire", Code: "CI" }, { Name: "Croatia", Code: "HR" }, { Name: "Cuba", Code: "CU" }, { Name: "Curaçao", Code: "CW" }, { Name: "Cyprus", Code: "CY" }, { Name: "Czech Republic", Code: "CZ" }, { Name: "Denmark", Code: "DK" }, { Name: "Djibouti", Code: "DJ" }, { Name: "Dominica", Code: "DM" }, { Name: "Dominican Republic", Code: "DO" }, { Name: "Ecuador", Code: "EC" }, { Name: "Egypt", Code: "EG" }, { Name: "El Salvador", Code: "SV" }, { Name: "Equatorial Guinea", Code: "GQ" }, { Name: "Eritrea", Code: "ER" }, { Name: "Estonia", Code: "EE" }, { Name: "Ethiopia", Code: "ET" }, { Name: "Falkland Islands (Malvinas)", Code: "FK" }, { Name: "Faroe Islands", Code: "FO" }, { Name: "Fiji", Code: "FJ" }, { Name: "Finland", Code: "FI" }, { Name: "France", Code: "FR" }, { Name: "French Polynesia", Code: "PF" }, { Name: "Gabon", Code: "GA" }, { Name: "Gambia", Code: "GM" }, { Name: "Georgia", Code: "GE" }, { Name: "Germany", Code: "DE" }, { Name: "Ghana", Code: "GH" }, { Name: "Gibraltar", Code: "GI" }, { Name: "Greece", Code: "GR" }, { Name: "Greenland", Code: "GL" }, { Name: "Grenada", Code: "GD" }, { Name: "Guam", Code: "GU" }, { Name: "Guatemala", Code: "GT" }, { Name: "Guernsey", Code: "GG" }, { Name: "Guinea", Code: "GN" }, { Name: "Guinea-Bissau", Code: "GW" }, { Name: "Guyana", Code: "GY" }, { Name: "Haiti", Code: "HT" }, { Name: "Holy See (Vatican City State)", Code: "VA" }, { Name: "Honduras", Code: "HN" }, { Name: "Hong Kong", Code: "HK" }, { Name: "Hungary", Code: "HU" }, { Name: "Iceland", Code: "IS" }, { Name: "India", Code: "IN" }, { Name: "Indonesia", Code: "ID" }, { Name: "Iran, Islamic Republic of", Code: "IR" }, { Name: "Iraq", Code: "IQ" }, { Name: "Ireland", Code: "IE" }, { Name: "Isle of Man", Code: "IM" }, { Name: "Israel", Code: "IL" }, { Name: "Italy", Code: "IT" }, { Name: "Jamaica", Code: "JM" }, { Name: "Japan", Code: "JP" }, { Name: "Jersey", Code: "JE" }, { Name: "Jordan", Code: "JO" }, { Name: "Kazakhstan", Code: "KZ" }, { Name: "Kenya", Code: "KE" }, { Name: "Kiribati", Code: "KI" }, { Name: "Korea, Democratic People's Republic of", Code: "KP" }, { Name: "Korea, Republic of", Code: "KR" }, { Name: "Kuwait", Code: "KW" }, { Name: "Kyrgyzstan", Code: "KG" }, { Name: "Lao People's Democratic Republic", Code: "LA" }, { Name: "Latvia", Code: "LV" }, { Name: "Lebanon", Code: "LB" }, { Name: "Lesotho", Code: "LS" }, { Name: "Liberia", Code: "LR" }, { Name: "Libya", Code: "LY" }, { Name: "Liechtenstein", Code: "LI" }, { Name: "Lithuania", Code: "LT" }, { Name: "Luxembourg", Code: "LU" }, { Name: "Macao", Code: "MO" }, { Name: "Macedonia, the Former Yugoslav Republic of", Code: "MK" }, { Name: "Madagascar", Code: "MG" }, { Name: "Malawi", Code: "MW" }, { Name: "Malaysia", Code: "MY" }, { Name: "Maldives", Code: "MV" }, { Name: "Mali", Code: "ML" }, { Name: "Malta", Code: "MT" }, { Name: "Marshall Islands", Code: "MH" }, { Name: "Martinique", Code: "MQ" }, { Name: "Mauritania", Code: "MR" }, { Name: "Mauritius", Code: "MU" }, { Name: "Mexico", Code: "MX" }, { Name: "Micronesia, Federated States of", Code: "FM" }, { Name: "Moldova, Republic of", Code: "MD" }, { Name: "Monaco", Code: "MC" }, { Name: "Mongolia", Code: "MN" }, { Name: "Montenegro", Code: "ME" }, { Name: "Montserrat", Code: "MS" }, { Name: "Morocco", Code: "MA" }, { Name: "Mozambique", Code: "MZ" }, { Name: "Myanmar", Code: "MM" }, { Name: "Namibia", Code: "NA" }, { Name: "Nauru", Code: "NR" }, { Name: "Nepal", Code: "NP" }, { Name: "Netherlands", Code: "NL" }, { Name: "New Zealand", Code: "NZ" }, { Name: "Nicaragua", Code: "NI" }, { Name: "Niger", Code: "NE" }, { Name: "Nigeria", Code: "NG" }, { Name: "Niue", Code: "NU" }, { Name: "Norfolk Island", Code: "NF" }, { Name: "Northern Mariana Islands", Code: "MP" }, { Name: "Norway", Code: "NO" }, { Name: "Oman", Code: "OM" }, { Name: "Pakistan", Code: "PK" }, { Name: "Palau", Code: "PW" }, { Name: "Palestine, State of", Code: "PS" }, { Name: "Panama", Code: "PA" }, { Name: "Papua New Guinea", Code: "PG" }, { Name: "Paraguay", Code: "PY" }, { Name: "Peru", Code: "PE" }, { Name: "Philippines", Code: "PH" }, { Name: "Pitcairn", Code: "PN" }, { Name: "Poland", Code: "PL" }, { Name: "Portugal", Code: "PT" }, { Name: "Puerto Rico", Code: "PR" }, { Name: "Qatar", Code: "QA" }, { Name: "Romania", Code: "RO" }, { Name: "Russian Federation", Code: "RU" }, { Name: "Rwanda", Code: "RW" }, { Name: "Saint Kitts and Nevis", Code: "KN" }, { Name: "Saint Lucia", Code: "LC" }, { Name: "Saint Vincent and the Grenadines", Code: "VC" }, { Name: "Samoa", Code: "WS" }, { Name: "San Marino", Code: "SM" }, { Name: "Sao Tome and Principe", Code: "ST" }, { Name: "Saudi Arabia", Code: "SA" }, { Name: "Senegal", Code: "SN" }, { Name: "Serbia", Code: "RS" }, { Name: "Seychelles", Code: "SC" }, { Name: "Sierra Leone", Code: "SL" }, { Name: "Singapore", Code: "SG" }, { Name: "Sint Maarten (Dutch part)", Code: "SX" }, { Name: "Slovakia", Code: "SK" }, { Name: "Slovenia", Code: "SI" }, { Name: "Solomon Islands", Code: "SB" }, { Name: "Somalia", Code: "SO" }, { Name: "South Africa", Code: "ZA" }, { Name: "South Sudan", Code: "SS" }, { Name: "Spain", Code: "ES" }, { Name: "Sri Lanka", Code: "LK" }, { Name: "Sudan", Code: "SD" }, { Name: "Suriname", Code: "SR" }, { Name: "Swaziland", Code: "SZ" }, { Name: "Sweden", Code: "SE" }, { Name: "Switzerland", Code: "CH" }, { Name: "Syrian Arab Republic", Code: "SY" }, { Name: "Taiwan", Code: "TW" }, { Name: "Tajikistan", Code: "TJ" }, { Name: "Tanzania, United Republic of", Code: "TZ" }, { Name: "Thailand", Code: "TH" }, { Name: "Timor-Leste", Code: "TL" }, { Name: "Togo", Code: "TG" }, { Name: "Tokelau", Code: "TK" }, { Name: "Tonga", Code: "TO" }, { Name: "Trinidad and Tobago", Code: "TT" }, { Name: "Tunisia", Code: "TN" }, { Name: "Turkey", Code: "TR" }, { Name: "Turkmenistan", Code: "TM" }, { Name: "Turks and Caicos Islands", Code: "TC" }, { Name: "Tuvalu", Code: "TV" }, { Name: "Uganda", Code: "UG" }, { Name: "Ukraine", Code: "UA" }, { Name: "United Arab Emirates", Code: "AE" }, { Name: "United Kingdom", Code: "GB" }, { Name: "United States", Code: "US" }, { Name: "Uruguay", Code: "UY" }, { Name: "Uzbekistan", Code: "UZ" }, { Name: "Vanuatu", Code: "VU" }, { Name: "Venezuela, Bolivarian Republic of", Code: "VE" }, { Name: "Viet Nam", Code: "VN" }, { Name: "Virgin Islands, British", Code: "VG" }, { Name: "Virgin Islands, U.S.", Code: "VI" }, { Name: "Western Sahara", Code: "EH" }, { Name: "Yemen", Code: "YE" }, { Name: "Zambia", Code: "ZM" }, { Name: "Zimbabwe", Code: "ZW" }], Globals.grades = [{ val: 0, text: "KG" }, { val: 1, text: "1st" }, { val: 2, text: "2nd" }, { val: 3, text: "3rd" }, { val: 4, text: "4th" }, { val: 5, text: "5th" }, { val: 6, text: "6th" }, { val: 7, text: "7th" }, { val: 8, text: "8th" }, { val: 9, text: "9th" }, { val: 10, text: "10th" }, { val: 11, text: "11th" }, { val: 12, text: "12th" }, { val: 13, text: "University" }, { val: 14, text: "Professional Development" }], Globals.QuizApi = { create: function () { return $.ajax({ url: "/quiz/new", type: "POST", headers: { "x-csrf-token": Globals.CSRFToken } }) } }, Globals.subjects = [{ val: "Mathematics", text: "Mathematics" }, { val: "English", text: "English" }, { val: "Physics", text: "Physics" }, { val: "Chemistry", text: "Chemistry" }, { val: "Biology", text: "Biology" }, { val: "Science", text: "Science" }, { val: "Computers", text: "Computers" }, { val: "World Languages", text: "World Languages" }, { val: "Geography", text: "Geography" }, { val: "History", text: "History" }, { val: "Social Studies", text: "Social Studies" }, { val: "Professional Development", text: "Professional Development" }, { val: "Physical Ed", text: "Physical Ed" }, { val: "Arts", text: "Arts" }, { val: "Fun", text: "Fun" }, { val: "Architecture", text: "Architecture", more: !0 }, { val: "Business", text: "Business", more: !0 }, { val: "Design", text: "Design", more: !0 }, { val: "Education", text: "Education", more: !0 }, { val: "Instructional Technology", text: "Instructional Technology", more: !0 }, { val: "Journalism", text: "Journalism", more: !0 }, { val: "Life Skills", text: "Life Skills", more: !0 }, { val: "Moral Science", text: "Moral Science", more: !0 }, { val: "Performing Arts", text: "Performing Arts", more: !0 }, { val: "Philosophy", text: "Philosophy", more: !0 }, { val: "Religious Studies", text: "Religious Studies", more: !0 }, { val: "Special Education", text: "Special Education", more: !0 }, { val: "Specialty", text: "Specialty", more: !0 }, { val: "Other", text: "Other", more: !0 }], Globals.ImageUtils = { getOrientation: function (e, l) { var t = new FileReader; t.onload = function (e) { var t = new DataView(e.target.result); if (65496 != t.getUint16(0, !1)) return l(-2); for (var a = t.byteLength, i = 2; i < a;) { var s = t.getUint16(i, !1); if (i += 2, 65505 == s) { if (1165519206 != t.getUint32(i += 2, !1)) return l(-1); var o = 18761 == t.getUint16(i += 6, !1); i += t.getUint32(i + 4, o); var n = t.getUint16(i, o); i += 2; for (var r = 0; r < n; r++)if (274 == t.getUint16(i + 12 * r, o)) return l(t.getUint16(i + 12 * r + 8, o)) } else { if (65280 != (65280 & s)) break; i += t.getUint16(i, !1) } } return l(-1) }, t.readAsArrayBuffer(e) }, dataURLtoBlob: function (e) { for (var t = e.split(","), a = t[0].match(/:(.*?);/)[1], i = atob(t[1]), s = i.length, o = new Uint8Array(s); s--;)o[s] = i.charCodeAt(s); return new Blob([o], { type: a }) }, uploadDataURLToS3: function (r, e, l) { $.ajax({ type: "POST", url: "https://quizizz.com/media/getUploadURL?destination=" + e, success: function (e) { var t = Globals.ImageUtils.dataURLtoBlob(r), a = JSON.parse(e), i = a.fields, s = a.finalUrl, o = new FormData, n = new XMLHttpRequest; n.upload.onprogress = function (e) { if (e.lengthComputable) { var t = e.loaded / e.total; t = parseInt(100 * t), l.progress && l.progress(t) } }, n.onerror = function () { l.error && l.error() }, n.ontimeout = function () { l.timeout && l.timeout() }, n.onload = function () { l.load && l.load(s) }, Object.keys(i).forEach(function (e) { o.append(e, i[e]) }), o.append("file", t), n.open("POST", "https://quizizz.com/directS3Upload", !0), n.send(o) } }) }, uploadFileToS3: function (i, e, t, s) { $.ajax({ type: "POST", url: "https://media.quizizz.com/getUploadURL?destination=quizzes", ContentType: "application/json", success: function (e) { var t = new XMLHttpRequest, a = new FormData; a.append("file", i), t.open("POST", e, !0), t.send(a), t.upload && t.upload.addEventListener("progress", function () { s.progress && s.progress(t) }), t.onerror = function () { s.error && s.error() }, t.ontimeout = function () { s.timeout && s.timeout() }, t.onload = function () { s.load && s.load(t.responseText) } } }) }, uploadLink: function (e, t, a) { return $.ajax({ type: "POST", url: "https://quizizz.com/media/uploadLink", data: { url: e, destination: t } }) }, readAsDataURL: function (e, t) { var a = new FileReader; a.onload = t, a.readAsDataURL(e) } }, function () { if (!Globals.NotificationService) { var i = window.notification_server, e = window.notification_socket, s = 10, a = 1e4, o = [], n = 0, r = [], l = [], d = null, c = null; function u(e) { n = e.unread, 0 === e.start ? o = e.notifications : Array.prototype.push.apply(o, e.notifications), m("notif-data") } function m(t) { r.forEach(function (e) { "notif-data" === t ? e && e({ pushType: "notif-data", unread: n, notifications: o }) : "bell-count" === t && e && e({ pushType: "bell-count", count: n }) }) } function t() { d && (clearInterval(d), d = null) } function p() { if (user && user.id) if (0 != l.length) { var e = l.splice(0); $.ajax({ method: "PUT", url: i + "/user/" + user.id + "/read", headers: { "x-csrf-token": Globals.CSRFToken }, data: JSON.stringify({ nIds: e }), contentType: "application/json" }), console.log("=====Batch sending mark read: ", e) } else t() } function h(t, e, a) { user && user.id ? (t = t || 0, e = e || s, $.ajax({ method: "GET", url: i + "/user/" + user.id + "?start=" + t + "&limit=" + e, headers: { "x-csrf-token": Globals.CSRFToken }, success: function (e) { e.success ? a && a({ success: !0, start: t, unread: e.data.unread, notifications: e.data.notifications }) : (console.log("Notification fetch failed.", e), a && a({ success: !1, msg: e.err })) }, fail: function () { console.log("Notification fetch failed.", response), a && a({ success: !1, msg: "Network error" }) } })) : a && a({}) } Globals.NotificationService = { init: function (t) { user && user.id && (h(0, s, function (e) { e.success && (u(e), t && t()) }), (c = io(e, { path: "/_nsocket/main/socket" })).emit("subscribe", { userId: user.id }), c.on("connect", function () { 1 }), c.on("disconnect", function () { 0 }), c.on("add-notification", function (e) { var t; t = e.notification, o.unshift(t), n += 1, m("bell-count") }), c.on("update-notification", function (e) { var t, a; t = e.notification, a = _.findIndex(o, { _id: t._id }), (o[a] = t).read || (n += 1) })) }, loadMoreNotif: function (e, t, a) { user && user.id ? h(e, t, function (e) { e.success && (u(e), a && a(e)) }) : a && a({}) }, subscribe: function (e) { if (e) return r.push(e), r.length - 1 }, unsubscribe: function (e) { e && e < r.length && r.splice(e, 1) }, getUnreadNotifCount: function () { return n }, getNotifications: function () { return o }, markNotificationRead: function (e) { user && user.id && e.forEach(function (e) { var t = _.find(o, { _id: e }); !t || t.read || _.includes(l) || (console.log("====Marking read: ", t), t.read = !0, n -= 1, l.push(e)), 0 < l.length && !d && (d = setInterval(function () { p() }, a)) }) }, flushMarkReadQueue: function () { user && user.id && (t(), p()) } } } }(), new Krafty2.Model("Device", { props: { type: Krafty2.Types.String, mobile: Krafty2.Types.Boolean, tablet: Krafty2.Types.Boolean, desktop: Krafty2.Types.Boolean } }), function () { var n = function () { return 992 <= window.innerWidth ? "desktop" : 576 <= window.innerWidth ? "tablet" : "mobile" }, r = function () { var e = n(); Globals.media = new Krafty2.Models.Device({ type: e, mobile: "mobile" === e, desktop: "desktop" === e, tablet: "tablet" === e }) }; Globals.createMedia = r, Globals.Init = function (t, e, a, i) { if (Globals.mainHeader) Globals.mainHeader.setState({ searchOpen: !1 }); else { var s = n(); $("body").addClass(s), $("body").addClass(locale), $(".page-container").show(), r(), $(".page-container").addClass(s), $.ajaxSetup({ cache: !1 }), Globals.mainHeader = new Krafty2.Views.MainHeader({ data: { hideJoinGame: e, hideHeader: a }, state: { showNav: Globals.media.desktop && user && user.username && !t, searchOpen: !1 }, viewModels: { media: Globals.media } }), Globals.mainNavigation = new Krafty2.Views.MainNavigation({ data: { showNav: !t }, viewModels: { media: Globals.media } }), window.onresize = function () { var e = n(); Globals.media.type !== e && (Globals.media.set({ type: e, mobile: "mobile" === e, desktop: "desktop" === e, tablet: "tablet" === e }), $("body").removeClass("desktop").removeClass("mobile").removeClass("tablet").addClass(e), $(".page-container").removeClass("desktop").removeClass("mobile").removeClass("tablet").addClass(e)) }, user && user.verified < 0 && "student" !== user.occupation && !i && Globals.Toaster.addToast(i18n(376), "envelope", "info", !0, !0, function () { self.emailVerificationModal = new Krafty2.Views.EmailVerificationModal({}) }), "true" != (o = new Globals.URI(window.location)).props.query.toBeta && "true" != o.props.query.reactivate || (Globals.redesignModal = new Krafty2.Views.RedesignModal({})), Globals.UserReferrals = { list: [], fetch: function () { user && user.id && $.ajax({ type: "GET", url: "/user/share", headers: { "x-csrf-token": Globals.CSRFToken }, data: {}, success: function (e) { e.success && (Globals.UserReferrals.list = e.data) } }) } }, function () { var e = !1; switch (Globals.currentPage) { case "home": case "signup": case "login": case "forgotPassword": case "emailVerified": case "resetPassword": case "resources": case "liveDashboard": case "editor": case "newQuiz": e = !0 }return !window.hasNotifInitialised && !e && !t }() && user && user.id && (Globals.NotificationService.init(function () { Globals.mainHeader.updateUnreadNotifCount(Globals.NotificationService.getUnreadNotifCount(), !0) }), Globals.NotificationService.subscribe(function (e) { "bell-count" === e.pushType && Globals.mainHeader.updateUnreadNotifCount(e.count, !0) }), window.hasNotifInitialised = !0) } var o } }(), new Krafty2.View("TagsView", { template: Krafty2.Templates.TagsView, parent: Krafty2.$(".app-container"), extends: Krafty2.Views.Modal, state: { loading: !1, create: !1, loadingCreate: !1, createError: "" }, filters: { afterCreate: function () { var t = this; t.setState({ loading: !0 }), t.viewModels.tags.getTagsForEntity(t.data.entity._id).done(function (e) { e.success && (e.data.length && (t.data.tagsForEntity = e.data[0].events), t.setState({ loading: !1 })) }).fail(function () { Globals.Toaster.addToastBar({ message: "Oops! Something went wrong while fetching collections", icon: "remove", style: "error", location: "top", parent: t.html.find(".kr-modal-body"), duration: 3e3 }) }), Krafty2.$("body").on("keydown.tagsview", function (e) { 27 === e.which && (t.destroy(), Krafty2.$("body").off("keydown.tagsview")) }) } }, data: { entity: { _id: "", name: "" }, tagsForEntity: [] }, methods: { updateTagsForEntity: function () { var e = this; e.viewModels.quizzes && (e.viewModels.quizzes.hits.getItem(e.data.idx).isTagged = 0 < e.data.tagsForEntity.length), e.viewModels.quiz && (e.viewModels.quiz.isTagged = 0 < e.data.tagsForEntity.length), e.trigger("tag-update") } }, events: { "click -> .tags-list-item:not(.checked)": function (t, e) { var a = this; a.viewModels.tags.list.getItem(t.attr("data-idx")).loading || a.viewModels.tags.list.getItem(t.attr("data-idx")).addToTag([a.data.entity._id]).done(function (e) { e.success && (Globals.Analytics.sendEvent("QuizAddToCollection", { page: Globals.Analytics.pageFromPathname(window.location.pathname), quizId: a.data.entity._id }), Globals.UserAnalytics.sendEvent("collectionStatus.added"), a.data.tagsForEntity.push(t.attr("data-id")), a.setState({}), a.html.find(".msg-label").css({ opacity: 0 }), t.find(".add-label").css({ opacity: 1 }), a.updateTagsForEntity(), setTimeout(function () { t.find(".add-label").animate({ opacity: 0 }, 2e3) }, 3e3)) }).fail(function () { Globals.Toaster.addToastBar({ message: "Oops! Something went wrong while adding to collection", icon: "remove", style: "error", location: "top", parent: a.html.find(".kr-modal-body"), duration: 3e3 }) }) }, "click -> .tags-list-item.checked": function (t, e) { var a = this; a.viewModels.tags.list.getItem(t.attr("data-idx")).loading || a.viewModels.tags.list.getItem(t.attr("data-idx")).removeFromTag([a.data.entity._id]).done(function (e) { e.success && (Globals.Analytics.sendEvent("QuizRemoveFromCollection", { page: Globals.Analytics.pageFromPathname(window.location.pathname), quizId: a.data.entity._id }), Globals.UserAnalytics.sendEvent("collectionStatus.removed"), a.data.tagsForEntity = Krafty2._.without(a.data.tagsForEntity, t.attr("data-id")), a.setState({}), a.html.find(".msg-label").css({ opacity: 0 }), t.find(".remove-label").css({ opacity: 1 }), a.updateTagsForEntity(), setTimeout(function () { t.find(".remove-label").animate({ opacity: 0 }, 2e3) }, 3e3)) }).fail(function () { Globals.Toaster.addToastBar({ message: "Oops! Something went wrong while removing from collection", icon: "remove", style: "error", location: "top", parent: a.html.find(".kr-modal-body"), duration: 3e3 }) }) }, "click -> #show-create-btn": function () { this.setState({ create: !0 }) }, "click -> #create-tag": function (e, t) { var a = this, i = a.html.find("#tag-name").val(); a.state.loadingCreate || (a.setState({ loadingCreate: !0 }), i ? Krafty2._.find(a.viewModels.tags.list.getRaw(), { name: i }) ? (a.setState({ loadingCreate: !1, createError: i18n("duplicate_name") + " " + i + " " + i18n("already_exists") }), a.html.find(".create-err").animate({ height: 40 }, 500, function () { setTimeout(function () { a.html.find(".create-err").animate({ height: 0 }, 500) }, 2e3) })) : a.viewModels.tags.newTag({ name: i, entityId: [a.data.entity._id], type: "quiz" }).done(function (e) { e.success && (Globals.Analytics.sendEvent("CreateCollection", { page: Globals.Analytics.pageFromPathname(window.location.pathname), source: "TagsModal" }), a.data.tagsForEntity.push(e.data._id), a.html.find(".tags-list-container").animate({ scrollTop: a.html.find(".kr-modal-body .tags-list").height() }, 500), a.setState({ loadingCreate: !1 }), a.html.find(".tags-list-item[data-id=" + e.data._id + "] .create-label").css({ opacity: 1 }), setTimeout(function () { a.html.find(".tags-list-item[data-id=" + e.data._id + "] .create-label").animate({ opacity: 0 }, 2e3) }, 3e3), a.html.find("#tag-name").val(""), a.setState({ create: !1 }), a.updateTagsForEntity()) }).fail(function () { Globals.Toaster.addToastBar({ message: "Oops! Something went wrong while creating a collection", icon: "remove", style: "error", location: "top", parent: a.html.find(".kr-modal-body"), duration: 3e3 }) }) : a.setState({ loadingCreate: !1, createError: i18n("Please_enter_a_name_for_the_") })) }, "keyup -> #tag-name": function (e, t) { "" !== e.val() ? this.setState({ create: !0 }) : this.setState({ create: !1 }) }, "click -> .done": function (e, t) { var a = this, i = a.html.find("#tag-name").val(); a.state.loadingCreate || (a.state.create ? i ? Krafty2._.find(a.viewModels.tags.list.getRaw(), { name: i }) ? a.setState({ loadingCreate: !1, createError: i18n("duplicate_name") + " " + i + " " + i18n("already_exists") }) : (a.setState({ loadingCreate: !0 }), a.viewModels.tags.newTag({ name: i, entityId: [a.data.entity._id], type: "quiz" }).done(function (e) { e.success && (Globals.Analytics.sendEvent("CreateCollection", { page: Globals.Analytics.pageFromPathname(window.location.pathname), source: "TagsModal" }), Globals.UserAnalytics.sendEvent("collectionStatus.created"), a.data.tagsForEntity.push(e.data._id), a.html.find(".tags-list-container").animate({ scrollTop: a.html.find(".kr-modal-body .tags-list").height() }, 500), a.setState({ loadingCreate: !1, createError: "" }), a.html.find(".tags-list-item[data-id=" + e.data._id + "] .create-label").css({ opacity: 1 }), setTimeout(function () { a.html.find(".tags-list-item[data-id=" + e.data._id + "] .create-label").animate({ opacity: 0 }, 2e3) }, 3e3), a.html.find("#tag-name").val(""), a.setState({ create: !1 }), a.updateTagsForEntity()) }).fail(function () { Globals.Toaster.addToastBar({ message: "Oops! Something went wrong while creating a collection", icon: "remove", style: "error", location: "top", parent: a.html.find(".kr-modal-body"), duration: 3e3 }) })) : a.setState({ loadingCreate: !1, createError: i18n("Please_enter_a_name_for_the_") }) : a.destroy()) }, "click -> .cancel-btn": function (e, t) { this.html.find("#tag-name").val(""), this.setState({ create: !1, createError: "" }) } } }), new Krafty2.View("LoginModal", { template: Krafty2.Templates.LoginModalTemplate, parent: Krafty2.$(".app-container"), extends: Krafty2.Views.Modal, data: { query: { q: "" }, title: "", message: "", eventParams: {} }, messages: { "login-success -> login": function (e) { var t = this; e.success && (t.data.eventParams.source = Globals.currentPage, Globals.Analytics.sendEvent("loginSuccessModal", t.data.eventParams), e.data.deactivated ? App.setRoute("/reactivate") : e.data && e.data.isGoogle ? t.childViews.login.setState({ isGoogle: !0 }) : 2 === e.data.beta ? window.location = Globals.URI.extendQuery(window.location, { extendQuery: !0 }) : t.data.query.q && Globals.URL.isValidURL(t.data.query.q) ? window.location = decodeURIComponent(t.data.query.q) : window.location.reload()) }, "login-fail -> login": function (e) { 401 === e.status ? this.childViews.login.setState({ err: !0, errMessage: i18n("invalid_password"), loading: !1 }) : 404 === e.status && this.childViews.login.setState({ err: !0, errMessage: i18n("user_not_found"), loading: !1 }) }, "to-signup -> login": function () { window.location = "/signup?q=" + encodeURIComponent(window.location.pathname) + "&source=" + Globals.currentPage }, "to-reset-password -> login": function () { window.location = "/forgot-password?q=" + encodeURIComponent(window.location.pathname) } }, events: { "click -> .close": function (e, t) { this.destroy() } } }), new Krafty2.View("Login", { template: Krafty2.Templates.Login, parent: Krafty2.$(".app-container"), data: { query: { q: "" }, red: "" }, state: { err: !1, errMessage: "", loading: !1, isGoogle: !1 }, filters: { afterCreate: function () { this.html.find("#username").focus() } }, events: { "click -> #to-signup": function () { this.sendMessage("to-signup") }, "click -> .to-forgot-password": function () { this.sendMessage("to-reset-password") }, "keyup -> #password": function (e, t) { 13 === t.which && this.html.find("#login").trigger("click") }, "keyup -> #username": function (e, t) { 13 === t.which && this.html.find("#login").trigger("click") }, "click -> #login": function () { var a = this, e = a.html.find("#username").val().trim(), t = a.html.find("#password").val().trim(); a.state.loading || ("" !== e ? "" !== t ? (a.setState({ loading: !0 }), Globals.AuthApi.login({ username: e, password: t }).done(function (e, t) { a.sendMessage("login-success", e) }).fail(function (e) { var t = JSON.parse(e.responseText); a.sendMessage("login-fail", { status: e.status, response: t }) })) : a.setState({ err: !0, errMessage: "Password is required." }) : a.setState({ err: !0, errMessage: "Username is required." })) } } }), new Krafty2.View("MyQuizizz", { template: Krafty2.Templates.MyQuizizz, parent: $(".page-inner"), state: { tag: "all", loading: !1, empty: !1 }, filters: { afterCreate: function () { var t = this; t.burgerEvent = Globals.mainHeader.on("burger", function (e) { e ? t.html.find(".collections").css({ width: "calc(((100% - 192px) * 0.4) - 36px)" }) : t.html.find(".collections").css({ width: "calc(100% * 0.4 - 36px)" }) }) }, onDestroy: function () { Globals.mainHeader.off(this.burgerEvent) } }, events: { "click -> .collection-link": function () { App.setRoute("/admin/collections") }, "click -> .collections-list li.tag": function (e, t) { var a = e.attr("data-id"); this.setState({ tag: a }), Globals.mainHeader.setSearchText(""), Globals.Analytics.sendEvent("CollectionNavigation", { page: "MyQuizizzPage", collectionId: a }), this.trigger("changeTag", a), $("body,html").animate({ scrollTop: 0 }) }, "click -> .collections-list li .rename-btn": function (e, t) { var a = this; a.renameView = Krafty2.Views.RenameCollectionModal({ viewModels: { tag: a.viewModels.tags.list.getItem(+e.attr("data-idx")), tags: a.viewModels.tags } }); var i = a.viewModels.tags.list.find({ _id: a.state.tag }); i && a.viewModels.tags.list.getItem(+e.attr("data-idx")).name === i.name && a.renameView.on("done", function (e) { Globals.mainHeader.bottomHeader.setState({ title: e }) }), t.stopPropagation() }, "click -> .collections-list li .delete-btn": function (e, t) { var a = this, i = a.viewModels.tags.list.getItem(+e.attr("data-idx")); a.deleteView = Krafty2.Views.DeleteCollectionModal({ viewModels: { tag: i } }), a.deleteView.on("delete", function () { i.delete({ type: "quiz" }).done(function (e) { e.success && (a.viewModels.tags.list.findAndDelete({ _id: i._id }), Globals.Toaster.addToast(i18n(44), "check-circle", "success")) }) }), t.stopPropagation() }, "click -> .new-collection-btn": function (e, t) { this.newCollectionModal = new Krafty2.Views.NewCollectionModal({ viewModels: { tags: this.viewModels.tags } }), this.newCollectionModal.on("done", function (e) { Globals.Toaster.addToast(i18n(45, [e]), "check-circle", "success") }), t.stopPropagation() }, "click -> .create-collection-btn": function (e, t) { this.newCollectionModal = new Krafty2.Views.NewCollectionModal({ viewModels: { tags: this.viewModels.tags } }), this.newCollectionModal.on("done", function (e) { Globals.Toaster.addToast(i18n(45, [e]), "check-circle", "success") }), t.stopPropagation() }, "click -> .create-quiz-btn": function () { Globals.QuizApi.create().done(function (e) { !0 === e.success && (window.location = "/quiz/" + e.data.id + "/edit"), Globals.Analytics.sendEvent("MyQuizizzNoQuizViewCreateQuizBtn", { url: "/quiz/" + e.data.id + "/edit", navbarState: Globals.mainNavigation.state.openNav, source: "MyQuizizzNoQuizView", page: "Editor" }), Globals.Analytics.sendEvent("Create", { source: "MyQuizizzNoQuizView" }) }) }, "click -> .e-create-quiz": function () { App.setRoute("/admin/quiz/new"), Globals.Analytics.sendEvent("Create", { source: "MainNavigation" }) } } }), new Krafty2.State("MyQuizizz", { load: function (o) { var n = this; function r(e, t) { e = 0, n.searchResults && n.searchResults.destroy(), n.searchResultsView && n.searchResultsView.destroy(), n.searchResults = new Krafty2.Models.SearchResults({}), n.searchResultsView = new Krafty2.Views.SearchResults({ parent: n.view.html.find(".my-quizizz-container"), viewModels: { quizzes: n.searchResults, media: Globals.media, tags: n.tags }, data: { currentTag: n.view.state.tag, removeButton: n.view.state.tag && "all" !== n.view.state.tag && "createdByMe" !== n.view.state.tag && "liked" !== n.view.state.tag }, state: { pageLoading: !0 } }), n.searchResultsView.on("nextPage", function () { n.searchResults.getPrivateQuizzes(++e, t).done(function () { n.searchResultsView.setState({ loading: !1 }) }) }), n.searchResultsView.on("research", function () { r(0, { order: Globals.mainHeader.bottomHeader.state.order, tags: "all" === n.view.state.tag || "createdByMe" === n.view.state.tagtag ? [] : [n.view.state.tag], createdByMe: "createdByMe" === n.view.state.tag, term: "" }) }), n.view.setState({ loading: !0 }), n.searchResults.getPrivateQuizzes(e, t).done(function () { n.searchResultsView.setState({ pageLoading: !1 }), n.view.setState({ loading: !1, empty: 0 === n.searchResults.hits.length() }), Globals.mainHeader.bottomHeader.setState({ numResults: n.searchResults.total }) }) } o.query.order = decodeURIComponent(o.query.order || "desc"), o.query.tag = decodeURIComponent(o.query.tag || "all"), o.query.term = decodeURIComponent(o.query.term || ""), "all" !== o.query.tag && "createdByMe" !== o.query.tag && (o.query.order = "desc"), Globals.Init(), Globals.mainHeader.setPage(i18n(34)), Globals.mainNavigation.setPage("my-quizzes"), Globals.mainHeader.setSearchText(o.query.term), n.tags = new Krafty2.Models.Tags({}), n.tags.getTags("quiz").done(function () { var e = ""; e = "all" === o.query.tag ? i18n(42) : "createdByMe" === o.query.tag ? i18n(43) : "liked" === o.query.tag ? "Liked quizzes" : n.tags.list.find({ _id: o.query.tag }).name, Globals.mainHeader.bottomHeader.setState({ title: e }) }), n.collectionsDrawer = new Krafty2.Views.CollectionsDrawer({ state: { tag: o.query.tag }, viewModels: { tags: n.tags } }), n.view = new Krafty2.Views.MyQuizizz({ state: { tag: o.query.tag, loading: !0 }, viewModels: { tags: n.tags, media: Globals.media } }), Globals.mainHeader.setHeaderType("myQuizizz", {}, { order: o.query.order, term: o.query.term, collectionId: -1 === ["all", "createdByMe", "liked"].indexOf(o.query.tag) ? o.query.tag : null }), n.view.on("changeTag", function (e) { "relevance" === o.query.order && Globals.mainHeader.bottomHeader.setState({ order: "desc" }), o.query.order = Globals.mainHeader.bottomHeader.state.order, Globals.mainHeader.bottomHeader.childViews.order.selectVal(o.query.order); var t = "createdAt"; "alphabet" === o.query.order ? t = "name_raw" : "relevance" === o.query.order && (t = "_score"); var a = o.query.order; "alphabet" === o.query.order ? a = "asc" : "relevance" === o.query.order && (a = "desc"), r(0, { order: a, sortKey: t, tags: "all" === e || "createdByMe" === e ? [] : [e], createdByMe: "createdByMe" === e, term: o.query.term = "" }); var i = new Globals.URI(window.location.toString(), { query: { order: Globals.mainHeader.bottomHeader.state.order, tag: e, term: "" } }); App.setRouteSoft(i.toString()); var s = ""; s = "all" === e ? i18n(42) : "createdByMe" === e ? i18n(43) : "liked" === e ? "Liked quizzes" : n.tags.list.find({ _id: e }).name, Globals.mainHeader.bottomHeader.setState({ title: s, term: "", collectionId: -1 === ["all", "createdByMe", "liked"].indexOf(e) ? e : null }) }), n.collectionsDrawer.on("changeTag", function (e) { "relevance" === Globals.mainHeader.bottomHeader.state.order && Globals.mainHeader.bottomHeader.setState({ order: "desc" }), o.query.order = Globals.mainHeader.bottomHeader.state.order, Globals.mainHeader.bottomHeader.childViews.order.selectVal(o.query.order); var t = "createdAt"; "alphabet" === o.query.order ? t = "name_raw" : "relevance" === o.query.order && (t = "_score"); var a = o.query.order; "alphabet" === o.query.order ? a = "asc" : "relevance" === o.query.order && (a = "desc"), r(0, { order: a, sortKey: t, tags: "all" === e || "createdByMe" === e ? [] : [e], createdByMe: "createdByMe" === e, term: o.query.term = "" }); var i = ""; i = "all" === e ? i18n(42) : "createdByMe" === e ? i18n(43) : "liked" === e ? "Liked quizzes" : n.tags.list.find({ _id: e }).name; var s = new Globals.URI(window.location.toString(), { query: { order: Globals.mainHeader.bottomHeader.state.order, tag: e, term: "" } }); App.setRouteSoft(s.toString()), Globals.mainHeader.bottomHeader.setState({ title: i, term: "" }) }), n.filterEvent = Globals.mainHeader.on("filter", function (e) { o.query.order = e.order; var t = "createdAt"; "alphabet" === o.query.order ? t = "name_raw" : "relevance" === o.query.order && (t = "_score"); var a = o.query.order; "alphabet" === o.query.order ? a = "asc" : "relevance" === o.query.order && (a = "desc"), r(0, { order: a, sortKey: t, tags: "all" === n.view.state.tag || "createdByMe" === n.view.state.tag ? [] : [n.view.state.tag], createdByMe: "createdByMe" === n.view.state.tag, term: o.query.term }); var i = new Globals.URI(window.location.toString(), { query: { order: e.order, tag: n.view.state.tag } }); App.setRouteSoft(i.toString()) }), n.mainSearchEvent = Globals.mainHeader.on("mainSearch", function (e) { $("html, body").scrollTop(0); var t = "createdAt"; o.query.order = "relevance", "alphabet" === o.query.order ? t = "name_raw" : "relevance" === o.query.order && (t = "_score"); var a = o.query.order; "alphabet" === o.query.order ? a = "asc" : "relevance" === o.query.order && (a = "desc"), o.query.term = e, r(0, { order: a, sortKey: t, tags: "all" === n.view.state.tag || "createdByMe" === n.view.state.tag ? [] : [n.view.state.tag], createdByMe: "createdByMe" === n.view.state.tag, term: e }); var i = new Globals.URI(window.location.toString(), { query: { term: e, order: o.query.order } }); Globals.mainHeader.bottomHeader.setState({ term: e, order: o.query.order }), Globals.mainHeader.bottomHeader.childViews.order.selectVal(o.query.order), App.setRouteSoft(i.toString()) }), n.mainHeaderEvent = Globals.mainHeader.on("menu", function () { n.collectionsDrawer.toggle() }); var e = "createdAt"; "alphabet" === o.query.order ? e = "name_raw" : "relevance" === o.query.order && (e = "_score"); var t = o.query.order; "alphabet" === o.query.order ? t = "asc" : "relevance" === o.query.order && (t = "desc"), r(0, { order: t, sortKey: e, tags: "all" === o.query.tag || "createdByMe" === o.query.tag ? [] : [o.query.tag], createdByMe: "createdByMe" === o.query.tag, term: o.query.term }) }, unload: function () { var e = this; e.searchResultsView && e.searchResultsView.destroy(), e.searchResults && e.searchResults.destroy(), e.tags && e.tags.destroy(), e.collectionsDrawer.destroy(), e.view.destroy(), Globals.mainHeader.off(e.mainHeaderEvent), Globals.mainHeader.off(e.filterEvent), Globals.mainHeader.off(e.mainSearchEvent), Globals.mainHeader.clearSearch() } }), new Krafty2.View("MyQuizizzHeader", { template: Krafty2.Templates.MyQuizizzHeader, data: { orderList: [{ val: "asc", text: i18n(50) }, { val: "desc", text: i18n(49) }, { val: "alphabet", text: i18n(323) }], orderDropdown: [{ val: "asc", text: i18n(50), type: "radio" }, { val: "desc", text: i18n(49), type: "radio" }, { val: "alphabet", text: i18n(323), type: "radio" }] }, state: { title: "", order: "desc", searchOpenBottom: !1, numResults: 0, term: "", collectionId: null, ajaxLoad: !1 }, messages: { "select -> order": function (e) { this.setState({ order: e.val }), Globals.Analytics.sendEvent("MyQuizizzFilter", { page: "MyQuizizzPage", source: "Order" }), this.trigger("filter", { order: e.val }) }, "select -> orderDropdown": function (e) { this.setState({ order: e.val }), Globals.Analytics.sendEvent("MyQuizizzFilter", { page: "MyQuizizzPage", source: "Order" }), this.trigger("filter", { order: e.val }) }, "open -> search": function () { Globals.media.mobile && this.setState({ searchOpenBottom: !0 }) }, "close -> search": function () { Globals.media.mobile && this.setState({ searchOpenBottom: !1 }) }, "search -> search": function (e) { Globals.Analytics.sendEvent("MyQuizizzSearch", { page: "MyQuizizzPage", term: e }), this.trigger("localSearch", e) } }, filters: { onCreate: function () { this.state.term && (this.data.orderList = [{ val: "relevance", text: "Relevance" }, { val: "asc", text: i18n(50) }, { val: "desc", text: i18n(49) }, { val: "alphabet", text: i18n(323) }], this.data.orderDropdown = [{ val: "relevance", text: "Relevance", type: "radio" }, { val: "asc", text: i18n(50), type: "radio" }, { val: "desc", text: i18n(49), type: "radio" }, { val: "alphabet", text: i18n(323), type: "radio" }]) }, afterCreate: function () { this.childViews.order.selectVal(this.state.order), this.childViews.orderDropdown.selectVal(this.state.order) }, afterRender: function () { this.childViews.order && (this.state.term ? this.childViews.order.setList([{ val: "relevance", text: "Relevance" }, { val: "asc", text: i18n(50) }, { val: "desc", text: i18n(49) }, { val: "alphabet", text: i18n(323) }]) : this.childViews.order.setList([{ val: "asc", text: i18n(50) }, { val: "desc", text: i18n(49) }, { val: "alphabet", text: i18n(323) }])) } }, events: { "click -> .menu-btn": function (e, t) { this.trigger("menu") }, "click -> .create-quiz-btn": function () { Globals.QuizApi.create().done(function (e) { !0 === e.success && (Globals.Analytics.sendEvent("Create", { source: "MyQuizizzHeader" }), window.location = "/quiz/" + e.data.id + "/edit") }) }, "click -> .action-share": function () { this.shareModal = new Krafty2.Views.ShareQuizModal({ state: { shareType: "collectionPrivate" }, data: { collectionId: this.state.collectionId, collectionName: this.state.title } }) }, "click -> .btn-duplicate": function (e, t) { var a = this; user && user.id ? (a.setState({ ajaxLoad: !0 }), a.tag = new Krafty2.Models.Tag({}), a.tag.duplicate(a.state.collectionId).done(function (e) { a.setState({ ajaxLoad: !1 }), e.success ? App.setRoute(new Globals.URI("/collection/" + e.data.id, { query: { duplicate: "true" } }).toString()) : Globals.Toaster.addToast(i18n(501), "times-circle", "error") })) : a.loginView = new Krafty2.Views.LoginModal({ data: { query: { q: encodeURIComponent(window.location.pathname) }, title: i18n(250), message: i18n(502) } }) } } }), new Krafty2.View("TextInput", { template: Krafty2.Templates.TextInput, data: { placeholder: "" }, state: { focus: !1 }, events: { "focus -> input": function () { this.setState({ focus: !0 }) }, "blur -> input": function () { this.setState({ focus: !1 }) }, "keyup -> input": function (e, t) { 13 === t.which && this.sendMessage("return", e.val()) } }, methods: { focus: function () { this.html.find("input").focus() }, blur: function () { this.html.find("input").blur() }, val: function (e) { if (void 0 === e) return this.html.find("#input").val(); this.html.find("#input").val(e) } } }), new Krafty2.View("ExpandableSearchInput", { template: Krafty2.Templates.ExpandableSearchInput, data: { placeholder: i18n(4) }, state: { open: !1 }, filters: { onCreate: function () { void 0 !== this.data.open && (this.state.open = this.data.open, delete this.data.open) } }, methods: { setWidth: function (e) { this.container.find(".material-expandable-search").css({ width: e }) }, setVal: function (e) { this.childViews.search.val(e) }, close: function () { this.setState({ open: !1 }) } }, messages: { "return -> search": function (e) { this.sendMessage("search", e) } }, events: { "click -> .material-search-icon": function () { var e = this; e.state.open ? e.sendMessage("search", e.childViews.search.val()) : (e.setState({ open: !0 }), e.childViews.search.focus(), e.sendMessage("open")) }, "click -> .close-btn": function () { var e = this; e.setState({ open: !1 }), setTimeout(function () { e.sendMessage("close") }, 200) } } }), new Krafty2.View("Drawer", { abstract: !0, data: { open: !1 }, filters: { afterCreate: function () { this.container.find(".drawer-container").removeClass("closed").addClass(this.data.open ? "open" : "closed") } }, methods: { toggle: function () { var e = this; e.data.open = !e.data.open, e.container.find(".drawer-container").removeClass(e.data.open ? "closed" : "open").addClass(e.data.open ? "open" : "closed") } }, events: { "click -> .back-btn": function () { this.data.open = !1, this.container.find(".drawer-container").removeClass("opem").addClass("closed") }, "click -> .drawer": function (e, t) { t.stopPropagation() }, "click -> .drawer-container": function () { this.toggle() } } }), new Krafty2.View("CollectionsDrawer", { template: Krafty2.Templates.CollectionsDrawer, parent: $("body"), state: { tag: "all" }, extends: Krafty2.Views.Drawer, events: { "click -> .collections-list li": function (e, t) { var a = e.attr("data-id"); this.setState({ tag: a }), this.trigger("changeTag", a), this.toggle() }, "click -> .new-collection-btn": function (e, t) { this.newCollectionModal = new Krafty2.Views.NewCollectionModal({ viewModels: { tags: this.viewModels.tags } }), this.newCollectionModal.on("done", function (e) { Globals.Toaster.addToast(i18n(45, [e]), "check-circle", "success") }), t.stopPropagation() }, "click -> .create-collection-btn": function (e, t) { this.newCollectionModal = new Krafty2.Views.NewCollectionModal({ viewModels: { tags: this.viewModels.tags } }), this.newCollectionModal.on("done", function (e) { Globals.Toaster.addToast(i18n(45, [e]), "check-circle", "success") }), t.stopPropagation() } } }), new Krafty2.View("FeaturedPage", { template: Krafty2.Templates.FeaturedPage, parent: $(".page-inner"), state: { selectedQuiz: null, subject: "", focused: !1 }, data: { pageNumber: 0 }, filters: { afterCreate: function () { var e = this, t = function () { e.html && e.adjustPreviewNode(), e.stopPreviewAnim || requestAnimationFrame(t) }; Globals.media.desktop && t(), e.wordPlay(); var a = new Globals.URI(window.location.href); if (a.props.query.toRedesigned && (e.WelcomeRedesignModal = new Krafty2.Views.WelcomeRedesignModal({})), e.state.focused && e.html.find("#search").focus(), a.props.query.hasOwnProperty("refer")) e.referFriendModal = new Krafty2.Views.ReferFriendModal({ data: { triggerSource: "url" } }); else try { if (user && user.id) { var i = localStorage.getItem("rfrmodal") || "{}"; !(i = JSON.parse(i)).seen && i.show && (e.referFriendModal = new Krafty2.Views.ReferFriendModal({ data: { triggerSource: "live" === i.source ? "game_live" : "game_hw" } })) } } catch (e) { } }, afterRender: function () { !Globals.media.desktop && this.previewView && this.previewView.destroy() }, beforeDestroy: function (e) { this.stopPreviewAnim = !0, clearInterval(this.wordAnim), e() } }, methods: { wordPlay: function () { var i = document.getElementsByClassName("word"), o = [], s = 0; i[s].style.opacity = 1; for (var e = 0; e < i.length; e++)a(i[e]); function t() { for (var e = o[s], t = s == i.length - 1 ? o[0] : o[s + 1], a = 0; a < e.length; a++)n(e, a); for (a = 0; a < t.length; a++)t[a].className = "letter behind", t[0].parentElement.style.opacity = 1, r(t, a); s = s == o.length - 1 ? 0 : s + 1 } function n(e, t) { setTimeout(function () { e[t].className = "letter out" }, 80 * t) } function r(e, t) { setTimeout(function () { e[t].className = "letter in" }, 340 + 80 * t) } function a(e) { var t = e.innerHTML; e.innerHTML = ""; for (var a = [], i = 0; i < t.length; i++) { var s = document.createElement("span"); s.className = "letter", s.innerHTML = t.charAt(i), e.appendChild(s), a.push(s) } o.push(a) } t(), this.wordAnim = setInterval(t, 4e3) }, adjustPreviewNode: function () { var e = this; if (e.previewNode) { var t = e.html.find(".search-results-preview-container").get(0).getBoundingClientRect().top + 10; if ((t = t < 84 ? 84 : t) === e.oldTop) return; e.oldTop || (oldTop = t); var a = window.innerHeight - t - 20; a = a < 180 ? 180 : a, console.log(t, a), e.previewNode.css({ top: 0, transform: "translate(0," + t + "px)", height: a }), e.oldTop = t } } }, messages: { "hover -> searchResults": function (e) { var t = this; if (Globals.media.desktop) { t.previewView && (t.previewView.destroy(), t.previewView = null); var a = new Krafty2.Models.Quiz(e.getRaw()); a.info.preRenderQuestions(), t.previewView = new Krafty2.Views.SearchResultsPreview({ parent: t.html.find(".search-results-preview-container"), viewModels: { quiz: a, media: Globals.media }, data: { stickType: "static", stickTop: 128 } }), t.previewNode = t.previewView.container.find(".search-results-preview"), t.oldTop = null, t.adjustPreviewNode(), t.setState({ selectedQuiz: e._id }) } } }, events: { "click -> .search-btn": function () { this.html.find("#search").val() && (Globals.Analytics.sendEvent("search", { source: "FeaturedPage", page: "FeaturedPage", term: this.html.find("#search").val() }), App.setRoute("/admin/search/" + encodeURIComponent(this.html.find("#search").val()), null, { page: Globals.Analytics.pageFromPathname(window.location.pathname), source: "FeaturedPage" }), sessionStorage.setItem("queryId", (user.id || Math.random() * Number.MAX_SAFE_INTEGER) + "-" + Date.now())) }, "keyup -> #search": function (e, t) { 13 === t.which && e.val() && (Globals.UserAnalytics.sendEvent("search.publicQuiz"), Globals.Analytics.sendEvent("search", { source: "FeaturedPage", page: "FeaturedPage", term: this.html.find("#search").val() }), App.setRoute("/admin/search/" + encodeURIComponent(e.val()), null, { page: Globals.Analytics.pageFromPathname(window.location.pathname), source: "FeaturedPage" }), sessionStorage.setItem("queryId", (user.id || Math.random() * Number.MAX_SAFE_INTEGER) + "-" + Date.now())) }, "focus -> #search": function (e, t) { this.setState({ focused: !0 }) }, "blur -> #search": function (e, t) { this.setState({ focused: !1 }) }, "click -> .subject-btn": function (e, t) { var a = this, i = e.attr("data-subject"); a.setState({ subject: i }), Globals.media.mobile ? $("body,html").animate({ scrollTop: 320 }) : $("body,html").animate({ scrollTop: 340 }); try { sessionStorage.setItem("featuredPageCacheExpire", 0), sessionStorage.setItem("featuredPageCache", "null"), sessionStorage.setItem("featuredPageSubjectSelect", "true") } catch (e) { } Globals.Analytics.sendEvent("SubjectButtonClick", { subject: i }), a.childViews.searchResults.setState({ pageLoading: !0 }), a.viewModels.searchResults.getPublicQuizzes(0, { subject: a.state.subject }, !0, "featured").done(function () { a.previewView && a.previewView.destroy(), a.childViews.searchResults.setState({ pageLoading: !1 }) }), a.previewView && a.previewView.destroy(), App.setRouteSoft("/admin/subject/" + i) } } }), new Krafty2.State("FeaturedPage", { load: function (e) { var a = this; try { sessionStorage.getItem("featuredSearchedAt") || sessionStorage.setItem("featuredSearchedAt", Date.now()) } catch (e) { } if (a.subject = decodeURIComponent(e.params.subject || ""), a.subject) { console.log(a.subject); var t = "", i = ""; switch (a.subject) { case "Mathematics": t = "Popular Math Quizzes - Quizizz", i = "Play trending quiz games covering basic addition through advanced math."; break; case "English": t = "Popular English Quizzes - Quizizz", i = "Whether you’re new to English or a grammar expert, explore thousands of quiz games to help you review."; break; case "History": t = "Popular History Quizzes - Quizizz", i = "Find history quizzes appropriate for any grade level."; break; case "Geography": t = "Popular Geography Quizzes - Quizizz", i = "Test your geography skills with thousands of quiz games created by teachers."; break; case "Biology": t = "Popular Biology Quizzes - Quizizz", i = "Explore thousands of biology quizzes covering genetics, ecology, cell structure, and more."; break; case "Chemistry": t = "Popular Chemistry Quizzes - Quizizz", i = "Make chemistry fun by playing quizzes covering atomic structure, organic chemistry, the periodic table, and more"; break; case "Physics": t = "Popular Physics Quizzes - Quizizz", i = "Review laws of motion, thermodynamics, magnetism, and more with thousands of quizzes."; break; case "World Languages": t = "Popular World Language Quizzes - Quizizz", i = "Practice your language and cultural skills with quizzes covering Spanish, French, Japanese, and more." }Globals.SEO.setPage({ title: t, page: window.location.pathname, desc: i }) } else { Globals.SEO.setPage({ title: "Find a Quiz - Quizizz", page: window.location.pathname, desc: "Choose from millions of quizzes covering math, science, English, history and more." }); try { "true" === sessionStorage.getItem("featuredPageSubjectSelect") && (sessionStorage.setItem("featuredPageSubjectSelect", "null"), sessionStorage.setItem("featuredPageCacheExpire", 0), sessionStorage.setItem("featuredPageCache", "null")) } catch (e) { } } Globals.mainHeader ? (Globals.mainNavigation.state.openNav || Globals.mainNavigation.toggle(), Globals.mainHeader.data.hideHeader = !1, Globals.mainHeader.render()) : Globals.Init(), Globals.mainHeader.setHeaderType("featured"), Globals.mainHeader.setPage(i18n(5)), Globals.mainNavigation.setPage("explore"); var s = !1; try { s = !!sessionStorage.getItem("sqs_seen") } catch (e) { } e.query.newUser && !s && user && "teacher" === user.occupation && (a.sampleQuizSelectionView = new Krafty2.Views.SampleQuizSelection({})), a.searchResults = new Krafty2.Models.SearchResults, a.tags = new Krafty2.Models.Tags({}), a.tags.getTags("quiz"); var o = (JSON.parse(sessionStorage.getItem("featuredPageCache")) || { total: 0, hits: [], pageNumber: 0 }).pageNumber; a.view = new Krafty2.Views.FeaturedPage({ state: { subject: a.subject, focused: !!e.query.searchActive }, viewModels: { searchResults: a.searchResults, tags: a.tags, media: Globals.media } }); var n = JSON.parse(localStorage.getItem("QuizizzAnalytics")); a.view.on("hoverEnd", function (e) { 500 <= e.actionTime && Globals.AnalyticsApi.send({ sortKey: "_score", searchTerm: "", actionType: "hover", actionTime: e.actionTime, position: e.position, quizId: e.quizId, searchedAt: sessionStorage.getItem("featuredSearchedAt"), love: e.love, totalPlayers: e.totalPlayers, sessionId: n.sessionId }) }), a.view.on("click", function (e) { try { sessionStorage.setItem("lastScrollTop", $(document).scrollTop()) } catch (e) { } Globals.AnalyticsApi.send({ sortKey: a.view.state.sortKey, searchTerm: "", actionType: "click", actionTime: e.actionTime, position: e.position, quizId: e.quizId, searchedAt: sessionStorage.getItem("featuredSearchedAt"), love: e.love, totalPlayers: e.totalPlayers }) }), a.view.on("like", function (e) { try { var t = JSON.parse(sessionStorage.getItem("featuredPageCache")); t.hits[e].isLoved = a.searchResults.hits.getItem(e).isLoved, sessionStorage.setItem("featuredPageCache", JSON.stringify(t)) } catch (e) { } }), a.view.on("nextPage", function () { console.log("Next page called!"), a.searchResults.getPublicQuizzes(++o, { subject: a.view.state.subject }, !1, "featured").done(function () { console.log("Done called!"), a.view.childViews.searchResults.setState({ loading: !1 }) }) }), a.searchResults.getPublicQuizzes(0, { subject: a.subject }, !1, "featured").done(function () { console.log("Done called!"); var e = sessionStorage.getItem("lastScrollTop"); a.view.childViews.searchResults.setState({ pageLoading: !1, moveTo: e }) }) }, unload: function () { this.view && this.view.destroy(), self.tags && self.tags.destroy(), this.searchResults && this.searchResults.destroy() } }), new Krafty2.View("QuizPage", { template: Krafty2.Templates.QuizPage, parent: $(".page-inner"), data: { UTMSource: "", backto: "", editOrDuplicate: !1 }, state: { showAnswers: !1, loading: !1, notFound: !1, showActionsDropdown: !1, soloGameLoading: !1 }, filters: { afterCreate: function () { var e = this; if (user && user.id) { var t = new Globals.URI(window.location.href); if (t && t.props.query.from && "quizEditor" === t.props.query.from) { var a = localStorage.getItem("shareQuizPrompted"); user.events.quizStatus && user.events.quizStatus.shared || a || setTimeout(function () { e.promptQuizShare = new Krafty2.Views.PromptShareQuiz({ data: { callback: e.showShareModal.bind(e) } }) }, 2e3) } } }, afterRender: function () { }, afterDestroy: function () { this.editTooltip && this.editTooltip.destroy() } }, methods: { showTooltips: function () { var e = this; e.data.editOrDuplicate && (e.viewModels.quiz.createdBy._id === user.id ? e.editTooltip = new Krafty2.Views.Tooltip({ data: { text: "Edit this quiz and add standards to questions. Your future games will have standards reports!", position: "top", parent: e.html.find(".actions-container .edit-btn"), style: { width: 200, color: "#fff", textAlign: "center", position: "fixed" }, backgroundColor: "#292A3A" } }) : e.editTooltip = new Krafty2.Views.Tooltip({ data: { text: "Duplicate this quiz and edit to add tags. Your future games will have standards reports.", position: "top", parent: e.html.find(".actions-container .duplicate-btn"), style: { width: 200, color: "#fff", textAlign: "center", position: "fixed" }, backgroundColor: "#292A3A" } })) }, showTab: function (e, t) { var a = ($(window).width() - 575) / 2, i = "status=1,width=575,height=400,top=" + ($(window).height() - 400) / 2 + ",left=" + a; window.open(e, t, i) }, removeScripts: function () { }, showShareModal: function () { this.shareQuizModal = new Krafty2.Views.ShareQuizModal({ data: { quizId: this.viewModels.quiz._id, quizName: this.viewModels.quiz.getVersion().name } }) }, decorateTag: function (e) { return { title: e.info.statementNotation || e.info.listId || e.info.description, desc: e.info.description, shortTitle: e.standardSet.shortTitle } }, renderStructuredData: function () { } }, events: { "click -> .like-btn": function () { var e = this; Globals.Analytics.sendEvent("QuizLikeButton", { page: "QuizPage", action: e.viewModels.quiz.isLoved ? "dislike" : "like", quizId: e.viewModels.quiz._id }), user && user.id ? e.viewModels.quiz.isLoved ? e.viewModels.quiz.removeLove() : e.viewModels.quiz.addLove() : e.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "Like quizzes with a free account", modalIcon: "like", triggerSource: "quizPage" } }) }, "click -> .save-btn": function () { var e = this; Globals.Analytics.sendEvent("QuizAddButton", { page: "QuizPage", quizId: e.viewModels.quiz._id }), user && user.id ? e.tagsView = new Krafty2.Views.TagsView({ data: { entity: { _id: e.viewModels.quiz._id, name: e.viewModels.quiz.getVersion().name } }, viewModels: { tags: e.viewModels.tags, quiz: e.viewModels.quiz } }) : e.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "Save this quiz with a free account", modalIcon: "addCollection", triggerSource: "quizPage" } }) }, "click -> #share-link": function (e, t) { }, "click -> #share-twitter": function () { this.showTab('https://www.twitter.com/share?text=Play "' + this.viewModels.quiz.getVersion().name + '" %26 other awesome quizzes w/ your class!&via=quizizz', "Twitter") }, "click -> #share-pinterest": function () { var e = "https://cf.quizizz.com/img/dash/quiz-placeholder-sm.png"; this.viewModels.quiz.getVersion().image && (e = this.viewModels.quiz.getVersion().image), e = encodeURIComponent(e), this.showTab("https://www.pinterest.com/pin/create/button/?url=http%3A%2F%2Fquizizz.com%2Fadmin%2Fquiz%2F" + this.viewModels.quiz._id + "%2F&media=" + e + '&description=Play "' + this.viewModels.quiz.getVersion().name + '" and other awesome quizzes with your class! ' + window.location.href, "Pinterest") }, "click -> #share-google-plus": function () { this.showTab("https://plus.google.com/share?url=" + encodeURIComponent(window.location.href), "Google") }, "click -> #share-facebook": function () { this.showTab("https://www.facebook.com/dialog/share?app_id=1589541687945427&display=popup&href=" + window.location.href + "&redirect_uri=" + window.location.href, "Facebook") }, "click -> #user-link": function () { App.setRoute("/profile/" + this.viewModels.quiz.createdBy._id) }, "click -> .edit-img": function () { window.location = "/quiz/" + this.viewModels.quiz._id + "/edit?edit_info=true" }, "click -> .play-live-btn": function () { 1 != this.state.loading && (Globals.Analytics.sendEvent("PlayLiveBtn", { url: "/admin/quiz/start_new/" + this.viewModels.quiz._id, navbarState: Globals.mainNavigation.state.openNav, source: "QuizPage", page: "StartLiveGamePage" }), App.setRoute("/admin/quiz/start_new/" + this.viewModels.quiz._id, !1, { UTMSource: this.data.UTMSource, backto: this.data.backto })) }, "click -> .homework-btn": function () { 1 != this.state.loading && (Globals.Analytics.sendEvent("PlayHomeworkBtn", { url: "/admin/quiz/homework/" + this.viewModels.quiz._id, navbarState: Globals.mainNavigation.state.openNav, source: "QuizPage", page: "StartHomeworkGamePage" }), App.setRoute("/admin/quiz/homework/" + this.viewModels.quiz._id, !1, { UTMSource: this.data.UTMSource, backto: this.data.backto })) }, "click -> .play-solo-btn": function () { var e = this; if (!e.state.soloGameLoading) { e.setState({ soloGameLoading: !0 }); var t = !0; Globals.Analytics.sendEvent("soloGameStarted", { quizId: e.viewModels.quiz._id, source: "quizPage" }, function () { t = !1, e.setState({ soloGameLoading: !1 }), window.location = "/join?solo=" + e.viewModels.quiz._id }), setTimeout(function () { t && (e.setState({ soloGameLoading: !1 }), window.location = "/join?solo=" + e.viewModels.quiz._id) }, 3e3) } }, "mouseenter -> .live-homework-tooltip": function (e, t) { this.statTooltip = new Krafty2.Views.Tooltip({ data: { text: "<u>Live Game:</u> Perfect for students to play together in class.<br><br><u>Homework Game:</u> Set a deadline and participants can play anywhere and anytime before that date.<br><br>You'll receive class and participant level reports for both game modes.", position: "bottom", parent: e, style: { width: 340, color: "#fff", textAlign: "left" }, backgroundColor: "#292A3A" } }) }, "mouseleave -> .live-homework-tooltip": function (e, t) { this.statTooltip && this.statTooltip.destroy() }, "mouseenter -> .solo-tooltip": function (e, t) { this.soloTooltip = new Krafty2.Views.Tooltip({ data: { text: "Solo mode lets you play a quiz on your own, anytime you like.<br><br>You'll receive a game summary after you finish, but won't see a separate report in \"My reports.\"", position: "bottom", parent: e, style: { width: 340, color: "#fff", textAlign: "left" }, backgroundColor: "#292A3A" } }) }, "mouseleave -> .solo-tooltip": function (e, t) { this.soloTooltip && this.soloTooltip.destroy() }, "click -> .finish-editing-btn": function () { window.location = "/quiz/" + this.viewModels.quiz._id + "/edit" }, "click -> #duplicate-btn": function () { var t = this; user && user.id ? (t.duplicateView = new Krafty2.Views.Duplicate({}), t.viewModels.quiz.duplicate().done(function (e) { setTimeout(function () { e.success && e.data ? (App.setRoute("/admin/quiz/" + e.data.quiz._id), Globals.Toaster.addToast(i18n(132), "check-circle", "success")) : Globals.Toaster.addToast(i18n(133), "times-circle", "error"), t.duplicateView.destroy() }, 1e3) }).fail(function () { Globals.Toaster.addToast(i18n(133), "times-circle", "error"), t.duplicateView.destroy() })) : t.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "Save this quiz with a free account", modalIcon: "duplicate", triggerSource: "quizPage" } }) }, "click -> #edit-btn": function () { var e = this; Globals.Analytics.sendEvent("QuizEditBtn", { url: "/quiz/" + e.viewModels.quiz._id + "/edit", navbarState: Globals.mainNavigation.state.openNav, source: "QuizPage", page: "Editor", success: function () { window.location = "/quiz/" + e.viewModels.quiz._id + "/edit" } }) }, "click -> #delete-btn": function () { var e = this; e.deleteView = new Krafty2.Views.QuizDeleteModal({}), e.deleteView.on("delete", function () { e.viewModels.quiz.delete().done(function () { App.setRoute("/admin/private"), e.deleteView.destroy(), Globals.Toaster.addToast(i18n(136), "check-circle", "success") }).fail(function () { e.deleteView.destroy(), Globals.Toaster.addToast(i18n(137), "times-circle", "error") }) }) }, "click -> .print-btn": function () { Globals.Analytics.sendEvent("pageview", { url: "/print/quiz/" + this.viewModels.quiz._id, navbarState: Globals.mainNavigation.state.openNav, source: "QuizPage", page: "QuizPrintPage" }), user && user.username ? window.open("/print/quiz/" + this.viewModels.quiz._id) : this.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "Print quizzes with a free account", modalIcon: "print", triggerSource: "quizPage" } }) }, "click -> #print-btn": function () { Globals.Analytics.sendEvent("pageview", { url: "/print/quiz/" + this.viewModels.quiz._id, navbarState: Globals.mainNavigation.state.openNav, source: "QuizPage", page: "QuizPrintPage" }), user && user.username ? window.open("/print/quiz/" + this.viewModels.quiz._id) : this.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "Print quizzes with a free account", modalIcon: "print", triggerSource: "quizPage" } }) }, "click -> .report-abuse-btn": function () { var t = this; t.reportAbuseModal = new Krafty2.Views.ReportAbuseModal({}), t.reportAbuseModal.on("report", function (e) { t.reportAbuseModal.setState({ loading: !0 }), Globals.Analytics.sendEvent("ReportAbuse", { quizId: t.viewModels.quiz._id }), t.viewModels.quiz.reportAbuse(e.reason, e.comments).done(function () { t.reportAbuseModal.setState({ loading: !1 }), t.reportAbuseModal.destroy() }) }) }, "click -> .report-error-btn": function () { var t = this; t.reportErrorModal = new Krafty2.Views.ReportErrorModal({}), t.reportErrorModal.on("report", function (e) { t.reportErrorModal.setState({ loading: !0 }), Globals.Analytics.sendEvent("ReportError", { quizId: t.viewModels.quiz._id }), t.viewModels.quiz.reportError(e.reason, e.comments).done(function () { t.reportErrorModal.setState({ loading: !1 }), t.reportErrorModal.destroy() }) }) }, "click -> .show-answers-btn": function () { user && user.id ? (this.setState({ showAnswers: !this.state.showAnswers }), Globals.Analytics.sendEvent("ShowAnswers", { quizId: this.viewModels.quiz._id })) : this.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "See answers with a free account", modalIcon: "showAnswer", triggerSource: "quizPage" } }) }, "click -> .question": function (e, t) { var a = this, i = +e.attr("data-idx"); a.questionZoomView = new Krafty2.Views.QuestionZoom({ data: { idx: i, question: a.viewModels.quiz.getVersion().questions.getItem(i) }, viewModels: { quiz: a.viewModels.quiz } }), Globals.Analytics.sendEvent("QuizQuestionExpand", { quizId: a.viewModels.quiz._id, questionId: a.viewModels.quiz.getVersion().questions.getItem(i)._id }) }, "click -> .created-by .username-text": function () { Globals.Analytics.sendEvent("UsernameClick", { url: "/profile/" + this.viewModels.quiz.createdBy._id, navbarState: Globals.mainNavigation.state.openNav, source: "QuizPage", page: "ProfilePage" }), App.setRoute("/profile/" + this.viewModels.quiz.createdBy._id) }, "mouseenter -> .visibility-label": function (e, t) { this.visiblityTooltip = new Krafty2.Views.Tooltip({ data: { text: this.viewModels.quiz.getVersion().visibility ? i18n(138) : i18n(139), position: "bottom", parent: e } }) }, "mouseleave -> .visibility-label": function (e, t) { this.visiblityTooltip && this.visiblityTooltip.destroy() }, "mouseenter -> .quiz-name i.fa-copy": function (e, t) { var a = this; a.viewModels.quiz.cloned && !a.duplicateDetailPopover && (a.duplicateDetailPopover = new Krafty2.Views.DuplicateDetailPopover({ data: { backdrop: !1, position: "top", parent: e, quizId: a.viewModels.quiz.parentDetail.quizId } }), a.duplicateDetailPopover.on("close", function () { a.duplicateDetailPopover = null }), setTimeout(function () { a.duplicateDetailPopover && (a.duplicateDetailPopover.destroy(), a.duplicateDetailPopover = null) }, 5e3)) }, "mouseenter -> .avg-score": function (e, t) { this.statTooltip = new Krafty2.Views.Tooltip({ data: { text: i18n(140, [this.viewModels.quiz.stats.played]), position: "top", parent: e } }) }, "mouseleave -> .avg-score": function (e, t) { this.statTooltip && this.statTooltip.destroy() }, "click -> .bandarbaat-btn": function () { this.showShareModal() }, "click -> .show-actions-btn": function (e, t) { var a = this; a.setState({ showActionsDropdown: !a.state.showActionsDropdown }), $("body").on("click.show-actions", function () { a.setState({ showActionsDropdown: !1 }), $("body").off("click.show-actions") }), t.stopPropagation() }, "click -> .back-to-edmodo": function () { this.data.backto && (window.location = decodeURI(this.data.backto)) }, "click -> .back-to-edmodo-global": function () { this.data.backto && (window.location = decodeURI(this.data.backto)) }, "click -> .welcome-card-wrapper": function () { this.welcomeOnboardModal = new Krafty2.Views.WelcomeOnboardModal({}), Globals.Analytics.sendEvent("welcomeToQuizizzCard", { type: "clicked" }) }, "mousemove -> .question-view .query img": function (e, t) { this.previewImage || (this.previewImage = $("<img/>").attr("src", Globals.URI.extendQuery(e.attr("src"), { w: 400, h: 400 })), $("body").append(this.previewImage)); var a = t.clientY; a = (a = a < 64 ? 65 : a) > window.innerHeight - 300 ? window.innerHeight - 300 : a, this.previewImage.css({ position: "fixed", maxWidth: 300, maxHeight: 300, top: a, left: t.clientX + 20, zIndex: 10 }) }, "mouseleave -> .question-view .query img": function (e, t) { this.previewImage && this.previewImage.remove(), this.previewImage = null }, "mousemove -> .question-view .question-options img": function (e, t) { this.previewImage || (this.previewImage = $("<img/>").attr("src", Globals.URI.extendQuery(e.attr("src"), { w: 400, h: 400 })), $("body").append(this.previewImage)); var a = t.clientY; a = (a = a < 64 ? 65 : a) > window.innerHeight - 300 ? window.innerHeight - 300 : a, this.previewImage.css({ position: "fixed", maxWidth: 300, maxHeight: 300, top: a, left: t.clientX + 20, zIndex: 10 }) }, "mouseleave -> .question-view .question-options img": function (e, t) { this.previewImage && this.previewImage.remove(), this.previewImage = null }, "mouseenter -> .question .question-footer .tags-container .tag": function (e) { this.tagTooltip = new Krafty2.Views.Tooltip({ data: { text: e.attr("data-desc"), parent: e, position: "top", style: { width: 300, color: "#fff" }, backgroundColor: "#292A3A" } }) }, "mouseleave -> .question .question-footer .tags-container .tag": function (e) { this.tagTooltip && this.tagTooltip.destroy() } } }), new Krafty2.State("QuizPage", { load: function (r) { var l = this, e = r.params.quizId; Globals.Init(), Globals.mainHeader.setHeaderType("quiz"), Globals.mainHeader.setPage(i18n(142)), Globals.mainHeader.data.hideJoinGame = !1, l.quiz = new Krafty2.Models.Quiz({}), l.tags = new Krafty2.Models.Tags({}), l.tags.getTags("quiz"), l.view = new Krafty2.Views.QuizPage({ viewModels: { quiz: l.quiz, tags: l.tags, media: Globals.media }, state: { loading: !0 }, data: { UTMSource: r.query.utm_source, backto: r.query.backto, editOrDuplicate: "true" === r.query.eod } }), l.quiz.getQuiz(e).done(function () { if (l.view.setState({ loading: !1 }), l.quiz.getVersion().preRenderQuestions(), l.view.showTooltips(), l.view.renderStructuredData(), !r.params.slug) { var e = new Globals.URI(window.location.toString()); e.path += "/" + Globals.URL.sluggify(l.quiz.getVersion().name), e.path = e.path.replace("//", "/"), App.setRouteSoft(e.toString()) } var t = l.quiz.getVersion().subjects.getRaw(), a = l.quiz.getVersion().topics.getRaw(), i = l.quiz.getVersion().name, s = i + " | " + (a[0] || t[0] || "") + " Quiz - Quizizz", o = 0 < l.quiz.getVersion().questions.length() ? l.quiz.getVersion().questions.getItem(0).structure.query.text : ""; s = s.length <= 60 ? s : i + " Quiz - Quizizz"; var n = "Play this game to review " + (a[0] || t[0] || "") + ".\n" + o; Globals.SEO.setPage({ title: s, page: window.location.pathname, desc: n }) }).error(function (e) { 404 === e.status && l.view.setState({ loading: !1, notFound: !0 }) }) }, unload: function () { this.view.destroy() } }), new Krafty2.View("Popover", { abstract: !0, data: { parent: null, position: "top", backdrop: !0, static: !1 }, filters: { afterCreate: function () { var t = this, e = {}; if (t.data.parent) { var a = t.data.parent.get(0).getBoundingClientRect(); if ("top" === t.data.position) e.top = a.top + $(document).scrollTop() - t.html.outerHeight() - 10, e.left = a.left + a.width / 2 - t.html.outerWidth() / 2; else if ("bottom" === t.data.position) { if (e.top = a.top + $(document).scrollTop() + a.height + 10, e.left = a.left + a.width / 2 - t.html.outerWidth() / 2, e.left + t.html.outerWidth() > window.innerWidth) { var i = e.left + t.html.outerWidth() - window.innerWidth; e.left -= i, t.html.find(".kr-popover-arrow").css({ left: 2 * i }), t.html.find(".kr-popover-arrow-border").css({ left: 2 * i }) } e.left < 0 && (t.html.find(".kr-popover-arrow").css({ left: 2 * e.left }), t.html.find(".kr-popover-arrow-border").css({ left: 2 * e.left }), e.left = 0) } else "left" === t.data.position ? (e.top = $(document).scrollTop() + a.top + a.height / 2 - t.html.outerHeight() / 2, e.left = a.left - t.html.outerWidth() - 10) : "right" === t.data.position && (e.top = $(document).scrollTop() + a.top + a.height / 2 - t.html.outerHeight() / 2, e.left = a.left + a.width + 10); t.html.find(".kr-popover-arrow").removeClass("bottom").removeClass("top").removeClass("left").removeClass("right"), t.html.find(".kr-popover-arrow-border").removeClass("bottom").removeClass("top").removeClass("left").removeClass("right"), t.html.find(".kr-popover-arrow").addClass(t.data.position), t.html.find(".kr-popover-arrow-border").addClass(t.data.position), t.html.css(e) } setTimeout(function () { var e = Date.now(); $(document).on("click." + e, function () { t.data.static || (t.trigger("destroy"), $(document).off("click." + e), t.destroy()) }) }, 100), t.data.backdrop && (t.backdrop = $('<div class="kr-popover-backdrop"/>'), $("body").append(t.backdrop)) }, beforeDestroy: function (e) { this.backdrop && this.backdrop.remove(), e() } }, events: { "click -> .kr-popover": function (e, t) { t.stopPropagation() } } }), new Krafty2.View("ConfirmModal", { template: Krafty2.Templates.ConfirmModalTemplate, parent: $("body"), extends: Krafty2.Views.Modal, data: { title: "Are you Sure ?", message: "", cancelLabel: "Cancel", okLabel: "OK" }, events: { "click -> .btn-cancel": function (e, t) { this.trigger("cancel"), this.sendMessage("cancel"), this.destroy() }, "click -> .btn-ok": function (e, t) { this.trigger("ok"), this.sendMessage("ok"), this.destroy() } } }), new Krafty2.View("LangPopover", { template: Krafty2.Templates.LangPopover, parent: $("body"), extends: Krafty2.Views.Popover, state: { view: null, found: !1, searching: !0, code: "", codeMsg: "" }, data: { str: "", locale: {} }, filters: { afterCreate: function () { } }, events: { "keyup -> .str": function (e, t) { this.data.str = e.val() }, "click -> .cancel": function () { this.setState({ view: null }) }, "click -> .search-old": function () { var t = this; t.setState({ view: "search", searching: !0 }), $.ajax({ type: "GET", url: "/adminPanel/searchOld", data: { str: t.data.str.trim() } }).done(function (e) { t.setState({ found: e.found, searching: !1 }), t.data.locale = e.locale }) }, "click -> .search-new": function () { var t = this; t.setState({ view: "search", searching: !0 }), $.ajax({ type: "GET", url: "/adminPanel/searchNew", data: { str: t.data.str.trim() } }).done(function (e) { e.key ? t.setState({ view: "code", codeMsg: "String found in the new file", code: "i18n (" + e.key + ")" }) : t.setState({ view: "search", found: e.found, searching: !1 }), t.data.locale = e.locale }) }, "click -> .port": function () { var t = this; $.ajax({ type: "POST", url: "/adminPanel/port", data: { locale: t.data.locale } }).done(function (e) { e.done && t.setState({ view: "code", code: "i18n (" + e.num + ")" }) }) }, "click -> .create-new": function (e, t) { var a = this; $.ajax({ type: "POST", url: "/adminPanel/createString", data: { str: a.data.str } }).done(function (e) { e.done && a.setState({ view: "code", code: "i18n (" + e.num + ")" }) }) } } }), new Krafty2.View("ShareLinkPopover", { template: Krafty2.Templates.ShareLinkPopover, parent: $("body"), extends: Krafty2.Views.Popover, methods: { selectElementText: function (e, t) { var a, i, s = (t = t || window).document; t.getSelection && s.createRange ? (a = t.getSelection(), (i = s.createRange()).selectNodeContents(e), a.removeAllRanges(), a.addRange(i)) : s.body.createTextRange && ((i = s.body.createTextRange()).moveToElementText(e), i.select()) } }, events: { "click -> .link": function (e) { this.selectElementText(e.get(0)) } } }), new Krafty2.View("Duplicate", { template: Krafty2.Templates.Duplicate, parent: $("body"), extends: Krafty2.Views.Modal, filters: {} }), new Krafty2.View("QuizDeleteModal", { template: Krafty2.Templates.QuizDeleteModal, parent: $("body"), extends: Krafty2.Views.Modal, events: { "click -> #delete-btn": function () { this.trigger("delete") } } }), new Krafty2.View("ReportAbuseModal", { template: Krafty2.Templates.ReportAbuseModal, parent: $("body"), extends: Krafty2.Views.Modal, state: { loading: !1 }, data: { reasonList: [{ val: "inappropriate_content", text: i18n(212) }, { val: "incorrect_content", text: i18n(213) }, { val: "other", text: i18n(214) }] }, filters: { afterCreate: function () { this.childViews.reason.selectIdx(0) } }, events: { "click -> #submit": function () { var e = this.childViews.reason.val(), t = this.html.find("#comments").val(); this.trigger("report", { reason: e, comments: t }) } } }), new Krafty2.View("ReportErrorModal", { template: Krafty2.Templates.ReportErrorModal, parent: $("body"), extends: Krafty2.Views.Modal, state: { loading: !1 }, data: { reasonList: [{ val: "incorrect_answer", text: i18n(215) }, { val: "spelling_mistake", text: i18n(216) }, { val: "factual_error", text: i18n(217) }, { val: "other", text: i18n(214) }] }, filters: { afterCreate: function () { this.childViews.reason.selectIdx(0) } }, events: { "click -> #submit": function () { var e = this.childViews.reason.val(), t = this.html.find("#comments").val(); this.trigger("report", { reason: e, comments: t }) } } }), new Krafty2.State("StartLiveQuiz", { load: function (e) { var t = this; Globals.Init(), Globals.mainHeader.setHeaderType("quiz"), Globals.mainHeader.setPage("Quiz"), user && user.username || (t.signupPromptSpecial = new Krafty2.Views.SignupPromptSpecial({ data: { modalFor: "live" } })), t.quiz = new Krafty2.Models.Quiz({}), t.memesets = new Krafty2.Models.Memesets({}), t.memesets.getFeatured(), t.quiz.getQuiz(e.params.quizId).done(function () { t.view = new Krafty2.Views.StartLiveQuiz({ viewModels: { quiz: t.quiz, featuredMemesets: t.memesets }, data: { UTMSource: e.params.UTMSource, backto: e.params.backto } }), Globals.SEO.setPage({ title: t.quiz.getVersion().name + " | Live Game Settings - Quizizz", page: window.location.pathname, desc: "Live game settings for " + t.quiz.getVersion().name }) }) }, unload: function () { this.view.destroy(), this.signupPromptSpecial && this.signupPromptSpecial.destroy() } }), new Krafty2.State("StartHomeworkQuiz", { load: function (e) { var t = this; Globals.Init(), Globals.mainHeader.setHeaderType("quiz"), Globals.mainHeader.setPage("Quiz"), user && user.username || (t.signupPromptSpecial = new Krafty2.Views.SignupPromptSpecial({ data: { modalFor: "homework" } })), t.quiz = new Krafty2.Models.Quiz({}), t.memesets = new Krafty2.Models.Memesets({}), t.memesets.getFeatured(), t.quiz.getQuiz(e.params.quizId).done(function () { t.view = new Krafty2.Views.StartHomeworkQuiz({ viewModels: { quiz: t.quiz, featuredMemesets: t.memesets }, data: { UTMSource: e.params.UTMSource, backto: e.params.backto } }), Globals.SEO.setPage({ title: t.quiz.getVersion().name + " | Homework Game Settings - Quizizz", page: window.location.pathname, desc: "Homework game settings for " + t.quiz.getVersion().name }) }) }, unload: function () { this.view.destroy(), this.signupPromptSpecial && this.signupPromptSpecial.destroy() } }), new Krafty2.View("StartLiveQuiz", { template: Krafty2.Templates.StartLiveQuiz, parent: $(".page-inner"), data: { UTMSource: "", backto: "" }, state: { loading: !1, page: 0, selectedMemeset: "default" }, messages: { "switch -> jumble_questions": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> jumble_answers": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_questions": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_quiz_review": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_leaderboard": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_memes": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> question_timer": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> play_music": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") } }, events: { "click -> .proceed-btn": function (e, t) { var a = this; if (!a.state.loading) { var i = { jumble: a.childViews.jumble_questions.val(), jumbleAnswers: a.childViews.jumble_answers.val(), showAnswers: a.childViews.show_answers.val(), studentQuizReview: a.childViews.show_quiz_review.val(), studentLeaderboard: a.childViews.show_leaderboard.val(), memes: a.childViews.show_memes.val(), timer: a.childViews.question_timer.val(), studentMusic: a.childViews.play_music.val(), memeset: a.state.selectedMemeset }; if (user && user.id) { var s = !1; if (user.preferences && user.preferences.quizOptions && user.preferences.quizOptions.live) { for (var o in _.omit(_.clone(i), "memeset")) if (i[o] != ("true" === user.preferences.quizOptions.live[o] || !0 === user.preferences.quizOptions.live[o])) { s = !0; break } } else s = !0; s && Globals.AuthApi.updateLocals({ preferences: _.extend(user.preferences, { quizOptions: _.extend(user.preferences.quizOptions, { live: i }) }) }).done(function () { user.preferences = _.extend(user.preferences, { quizOptions: _.extend(user.preferences.quizOptions, { live: i }) }) }).fail(function () { }) } a.setState({ loading: !0 }), a.viewModels.quiz.startGame("live", i, 7200).done(function (e) { if (e.success) { var t = ""; "edmodo" === a.data.UTMSource && (t += "?utm_source=edmodo&backto=" + a.data.backto), window.location = "/admin/quiz/" + e.data.roomHash + "/startV4" + t } a.setState({ loading: !1 }) }).fail(function () { a.setState({ loading: !1 }) }) } }, "click -> .memeset-carousel .left-arrow": function () { var e = Math.floor(this.html.find(".memeset-carousel-container").width() / 174); Math.ceil(this.html.find(".memeset-carousel-inner").width() / e), this.html.find(".memeset-carousel-container").animate({ scrollLeft: this.html.find(".memeset-carousel-container").scrollLeft() - 174 * e }, 200) }, "click -> .memeset-carousel .right-arrow": function () { var e = Math.floor(this.html.find(".memeset-carousel-container").width() / 174); Math.ceil(this.html.find(".memeset-carousel-inner").width() / e), this.html.find(".memeset-carousel-container").animate({ scrollLeft: this.html.find(".memeset-carousel-container").scrollLeft() + 174 * e }, 200) }, "click -> .memeset-carousel .memeset": function (e, t) { var a = e.attr("data-id"), i = "true" === e.attr("data-featured"); this.setState({ selectedMemeset: a }), i ? Globals.UserAnalytics.sendEvent("liveStatus.featuredMemeset") : Globals.UserAnalytics.sendEvent("liveStatus.customMemeset") }, "click -> .memeset-carousel .memeset .view-memes-btn": function (e, t) { var a = this, i = e.attr("data-id"); a.memeset = new Krafty2.Models.Memeset, a.memesetExploreModal = new Krafty2.Views.MemesetExplore({ viewModels: { memeset: a.memeset } }), a.memeset.getMemeset(i).done(function () { a.memesetExploreModal.setState({ loading: !1 }) }), a.memesetExploreModal.on("select", function () { a.setState({ selectedMemeset: a.memeset._id }), a.memesetExploreModal.destroy(), a.memesetExploreModal = null }), Globals.Analytics.sendEvent("ViewMemeset", { quizId: a.viewModels.quiz._id, memesetId: a.memeset._id, page: "StartLiveGamePage" }), t.stopPropagation() } } }), new Krafty2.View("StartHomeworkQuiz", { template: Krafty2.Templates.StartHomeworkQuiz, parent: $(".page-inner"), state: { loading: !1, selectedDate: "", expiryErr: !1, page: 0, selectedMemeset: "default" }, data: { dateList: [], hourList: [], minList: [], ampmList: [] }, filters: { onCreate: function () { moment().add(1, "day").date(); for (var e = [], t = [], a = 0; a < 14; a++)e.push({ text: moment().add(a, "days").format("MMM Do"), val: moment().add(a, "days").format("MMM Do") }); for (a = 0; a < 12; a++)t.push({ text: a + 1 <= 9 ? "0" + (a + 1) : a + 1, val: a + 1 === 12 ? 0 : a + 1 }); this.data.dateList = e, this.data.hourList = t, this.data.minList = [{ text: "00", val: 0 }, { text: "15", val: 1 }, { text: "30", val: 2 }, { text: "45", val: 3 }], this.data.ampmList = [{ text: "AM", val: "AM" }, { text: "PM", val: "PM" }] }, afterCreate: function () { var e = this; if (user && user.username) { var t = moment().add(1, "day"); e.childViews.date.selectIdx(1), e.childViews.hour.selectVal(Math.floor(t.hour() % 12)), e.childViews.ampm.selectVal(moment().format("A")); var a = Math.ceil(t.minute() / 15); 4 === a && (a = 0, e.childViews.hour.selectVal(Math.floor((t.hour() + 1) % 12)), 12 <= t.hour() + 1 && e.childViews.ampm.selectVal("PM")), e.childViews.min.selectVal(a), e.changeLabel() } } }, methods: { changeLabel: function () { var e = this, t = e.childViews.date.val() + " " + e.childViews.hour.val() + " " + e.childViews.min.text() + " " + e.childViews.ampm.val(), a = moment(), i = moment(t, "MMM Do H mm A"), s = moment.duration(moment(t, "MMM Do H mm A").diff(a)); 11 === a.month() && 0 === i.month() && (i.year(i.year() + 1), s = moment.duration(i.diff(a))); var o = s.days(), n = s.hours(), r = s.minutes(), l = 0 === o ? "" : 1 === o ? "1 day" : o + " days", d = 0 === n ? "" : 1 === n ? "1 hour" : n + " hours", c = 0 === r ? "" : 1 === r ? "1 minute" : r + " minutes"; 0 <= s ? e.setState({ selectedDate: l + (l ? ", " : "") + d + ((l || d) && c ? " and " : "") + c + " from now.", expiryErr: !1 }) : e.setState({ selectedDate: "You cannot set a time before the current time", expiryErr: !0 }) } }, messages: { "select -> date": function () { this.changeLabel() }, "select -> hour": function () { this.changeLabel() }, "select -> min": function () { this.changeLabel() }, "select -> ampm": function () { this.changeLabel() }, "switch -> jumble_questions": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> jumble_answers": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_questions": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_quiz_review": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_leaderboard": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> show_memes": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> question_timer": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") }, "switch -> play_music": function () { Globals.UserAnalytics.sendEvent("liveStatus.adjustedSettings") } }, events: { "click -> .proceed-btn": function (e, t) { var i = this, a = i.childViews.date.val() + " " + i.childViews.hour.val() + " " + i.childViews.min.text() + " " + i.childViews.ampm.val(), s = moment(a, "MMM Do H mm A"), o = moment(), n = moment.duration(moment(a, "MMM Do H mm A").diff(moment())).asSeconds(); if (11 === o.month() && 0 === s.month()) { var r = moment(a, "MMM Do H mm A"); r.year(r.year() + 1), n = moment.duration(r.diff(moment())).asSeconds() } if (!i.state.loading && !i.state.expiryErr) { var l = { jumble: i.childViews.jumble_questions.val(), jumbleAnswers: i.childViews.jumble_answers.val(), showAnswers: i.childViews.show_answers.val(), studentQuizReview: i.childViews.show_quiz_review.val(), studentLeaderboard: i.childViews.show_leaderboard.val(), memes: i.childViews.show_memes.val(), timer: i.childViews.question_timer.val(), studentMusic: i.childViews.play_music.val(), memeset: i.state.selectedMemeset }; if (user && user.id) { var d = !1; if (user.preferences && user.preferences.quizOptions && user.preferences.quizOptions.homework) { for (var c in _.omit(_.clone(l), "memeset")) if (l[c] != ("true" === user.preferences.quizOptions.homework[c] || !0 === user.preferences.quizOptions.homework[c])) { d = !0; break } } else d = !0; d && Globals.AuthApi.updateLocals({ preferences: _.extend(user.preferences, { quizOptions: _.extend(user.preferences.quizOptions, { homework: l }) }) }).done(function () { user.preferences = _.extend(user.preferences, { quizOptions: _.extend(user.preferences.quizOptions, { homework: l }) }) }).fail(function () { }) } i.setState({ loading: !0 }), i.viewModels.quiz.startGame("async", l, n).done(function (e) { if (e.success) { var t = ""; "edmodo" === i.data.UTMSource && (t += "?utm_source=edmodo&backto=" + i.data.backto); try { if (user && user.id) { var a = localStorage.getItem("rfrmodal") || "{}"; (a = JSON.parse(a)).seen || localStorage.setItem("rfrmodal", JSON.stringify({ show: !0, source: "hw" })) } } catch (e) { console.log(e) } window.location = "/admin/reports/" + e.data.roomHash + "/questions" + t } i.setState({ loading: !1 }) }).fail(function () { i.setState({ loading: !1 }) }) } }, "click -> .memeset-carousel .left-arrow": function () { var e = Math.floor(this.html.find(".memeset-carousel-container").width() / 174); Math.ceil(this.html.find(".memeset-carousel-inner").width() / e), this.html.find(".memeset-carousel-container").animate({ scrollLeft: this.html.find(".memeset-carousel-container").scrollLeft() - 174 * e }, 200) }, "click -> .memeset-carousel .right-arrow": function () { var e = Math.floor(this.html.find(".memeset-carousel-container").width() / 174); Math.ceil(this.html.find(".memeset-carousel-inner").width() / e), this.html.find(".memeset-carousel-container").animate({ scrollLeft: this.html.find(".memeset-carousel-container").scrollLeft() + 174 * e }, 200) }, "click -> .memeset-carousel .memeset": function (e, t) { var a = e.attr("data-id"), i = "true" === e.attr("data-featured"); this.setState({ selectedMemeset: a }), i ? Globals.UserAnalytics.sendEvent("liveStatus.featuredMemeset") : Globals.UserAnalytics.sendEvent("liveStatus.customMemeset") }, "click -> .memeset-carousel .memeset .view-memes-btn": function (e, t) { var a = this, i = e.attr("data-id"); a.memeset = new Krafty2.Models.Memeset, a.memesetExploreModal = new Krafty2.Views.MemesetExplore({ viewModels: { memeset: a.memeset } }), a.memeset.getMemeset(i).done(function () { a.memesetExploreModal.setState({ loading: !1 }) }), a.memesetExploreModal.on("select", function () { a.setState({ selectedMemeset: a.memeset._id }), a.memesetExploreModal.destroy(), a.memesetExploreModal = null }), Globals.Analytics.sendEvent("ViewMemeset", { quizId: a.viewModels.quiz._id, memesetId: a.memeset._id, page: "StartHomeworkGamePage" }), t.stopPropagation() }, "click -> .login-btn": function () { this.loginView = new Krafty2.Views.LoginModal({ data: { query: { q: encodeURIComponent(window.location.pathname) }, title: "Login" } }) } } }), new Krafty2.View("Switch", { template: Krafty2.Templates.Switch, state: { on: !1 }, data: { value: !1 }, filters: { onCreate: function () { this.state.on = this.data.value } }, events: { "click -> .kr-switch": function () { this.setState({ on: !this.state.on }), this.sendMessage("switch") } }, methods: { val: function () { return this.state.on } } }), new Krafty2.View("MemesetExplore", { template: Krafty2.Templates.MemesetExplore, parent: $("body"), extends: Krafty2.Views.Modal, state: { loading: !0 }, events: { "click -> #select": function () { this.viewModels.memeset && this.viewModels.memeset._id && this.trigger("select") } } }), new Krafty2.View("QuestionZoom", { parent: $("body"), template: Krafty2.Templates.QuestionZoom, extends: Krafty2.Views.Modal, state: { viewAnswer: !1 }, events: { "click -> #view-answer": function () { user && user.id ? this.setState({ viewAnswer: !this.state.viewAnswer }) : (this.signupPromptCommon = new Krafty2.Views.SignupPromptCommon({ data: { sourceUrl: encodeURIComponent(window.location.pathname), modalTitle: "See answers with a free account", modalIcon: "showAnswer", triggerSource: "questionZoomView" } }), this.destroy()) }, "click -> #prev": function () { var e = this; 0 < e.data.idx && (e.data.idx-- , e.data.question = e.viewModels.quiz.getVersion().questions.getItem(e.data.idx), e.render()) }, "click -> #next": function () { var e = this; e.data.idx < e.viewModels.quiz.getVersion().questions.length() - 1 && (e.data.idx++ , e.data.question = e.viewModels.quiz.getVersion().questions.getItem(e.data.idx), e.render()) } } }), new Krafty2.View("NewCollectionModal", { template: Krafty2.Templates.NewCollectionModal, parent: $("body"), extends: Krafty2.Views.Modal, state: { loading: !1, error: "" }, filters: { afterCreate: function () { this.html.find("#collection-name").focus() } }, events: { "keyup -> #collection-name": function (e, t) { this.setState({ error: "" }), 13 === t.which && this.html.find("#create-collection").trigger("click") }, "click -> .kr-radio": function (e) { e.find("input").click() }, "click -> .kr-radio input": function (e, t) { t.stopPropagation() }, "click -> #create-collection": function (e, t) { var a = this, i = a.html.find("#collection-name").val(), s = "public" === a.html.find("input[type=radio]:checked").val(); a.state.loading || ("" !== i ? a.viewModels.tags.list.find({ name: i }) ? a.setState({ error: i18n(147) }) : (a.setState({ loading: !0 }), Globals.Analytics.sendEvent("CreateCollection", { page: Globals.Analytics.pageFromPathname(window.location.pathname), source: "CreateCollectionModal" }), Globals.UserAnalytics.sendEvent("collectionStatus.created"), a.viewModels.tags.newTag({ name: i, type: "quiz", visibility: s }).done(function () { a.setState({ loading: !1 }), a.viewModels.tags.getTags("quiz"), a.destroy(), a.trigger("done", i) })) : a.setState({ error: i18n(146) })) } } }), new Krafty2.View("MemeSet", { template: Krafty2.Templates.MemeSetTemplate, parent: Krafty2.$(".app-container"), data: {}, state: {}, filters: { afterRender: function () { }, onDestroy: function () { } }, props: {}, events: { "click -> .memeset-card .username": function (e, t) { t.stopPropagation(), App.setRoute("/profile/" + this.viewModels.memeset.createdBy._id) }, "click -> .memeset-card": function (t, e) { var a = this; $(t).data("id") ? e.metaKey || e.ctrlKey ? window.open("/admin/memes/" + a.viewModels.memeset._id) : App.setRoute("/admin/memes/" + a.viewModels.memeset._id) : ($(t).find(".fa").removeClass("fa-plus").addClass("fa-refresh kr-anim-spin"), a.memeset = new Krafty2.Models.Memeset({}), a.memeset.create().done(function (e) { e.success ? App.setRoute("/admin/memes/" + a.memeset._id) : ($(t).find(".fa").removeClass("fa-refresh kr-anim-spin").addClass("fa-plus"), Globals.Toaster.addToast(i18n(566), "times-circle", "error")) })) } } }), new Krafty2.View("MemeSetsPage", { template: Krafty2.Templates.MemeSetsPageTemplate, parent: Krafty2.$(".page-inner"), data: { isTitleHidden: !1, hasBlankMemeset: !0, showEmptyMsg: !0 }, state: { pageLoading: !0 }, filters: { onCreate: function () { }, afterCreate: function () { var e = this; Globals.Tour.canShowPrompt("usingMemesOnMemesetPage") && user && user.id && setTimeout(function () { 0 < e.viewModels.memesets.getRaw().list.filter(function (e) { return (new Date).getTime() - new Date(e.updated).getTime() < 3e4 }).length && (e.promptTutorial = new Krafty2.Views.TutorialPrompt({ parent: $(".top-header .help-tut-btn").parent(), data: { targetElement: $(".top-header .help-tut-btn"), name: "usingMemesOnMemesetPage" } })) }, 2e3) }, onDestroy: function () { this.memeset && this.memeset.destroy() } }, events: { "click -> .no-memeset-panel .create-new-memeset-btn": function (t, e) { var a = this; $(t).find(".fa").removeClass("hidden"), a.memeset = new Krafty2.Models.Memeset({}), a.memeset.create().done(function (e) { e.success ? App.setRoute("/admin/memes/" + a.memeset._id) : (Globals.Toaster.addToast(i18n(566), "times-circle", "error"), $(t).find(".fa").addClass("hidden")) }) } } }), new Krafty2.View("EmailVerificationHeader", { template: Krafty2.Templates.EmailVerificationHeader, parent: $(".page-container") }), new Krafty2.View("UpdateProfileModal", { template: Krafty2.Templates.UpdateProfileModal, parent: $("body"), extends: Krafty2.Views.Modal, events: { "click -> .update-now": function (e, t) { this.destroy(), App.setRoute("/profile/" + user.id) }, "click -> .maybe-later": function (e, t) { this.destroy() } } }), new Krafty2.View("RedesignModal", { template: Krafty2.Templates.RedesignModal, parent: $("body"), extends: Krafty2.Views.Modal, events: { "click -> .learn-more": function (e, t) { this.destroy() }, "click -> .close": function (e, t) { this.destroy() } } }), new Krafty2.State("CollectionsPage", { load: function () { var e = this; Globals.Init(), Globals.mainHeader.setHeaderType("collections"), Globals.mainHeader.setPage(i18n(36)), Globals.mainNavigation.setPage("collections"), e.tags = new Krafty2.Models.Tags({}), e.view = new Krafty2.Views.CollectionsPage({ viewModels: { tags: e.tags, media: Globals.media }, state: { loading: !0 } }), e.tags.getTags("quiz").done(function () { e.view.setState({ loading: !1 }) }) }, unload: function () { this.view.destroy(), this.tags && this.tags.destroy() } }), new Krafty2.View("CollectionsPage", { template: Krafty2.Templates.CollectionsPage, parent: $(".page-inner"), state: { loading: !1, createCollectionOption: !0, collectionLoading: null, isPublicView: !1 }, methods: { getBgImageUrl: function (e) { return "https://cf.quizizz.com/img/collection_page_assets/" + (e % 6 + 1) + ".png" } }, events: { "click -> .collection": function (e, t) { var a = e.attr("data-id"); this.state.isPublicView ? t.metaKey || t.ctrlKey ? window.open("/collection/" + a) : App.setRoute("/collection/" + a) : (Globals.Analytics.sendEvent("CollectionNavigation", { page: "CollectionsPage", collectionId: a }), t.metaKey || t.ctrlKey ? window.open("/admin/private?tag=" + a) : App.setRoute("/admin/private?tag=" + a)) }, "click -> .rename-btn": function (e, t) { this.renameView = Krafty2.Views.RenameCollectionModal({ data: { collectionsView: this }, viewModels: { tag: this.viewModels.tags.list.getItem(+e.attr("data-idx")), tags: this.viewModels.tags } }), t.stopPropagation() }, "click -> .delete-btn": function (e, t) { var a = this, i = a.viewModels.tags.list.getItem(+e.attr("data-idx")); a.deleteView = Krafty2.Views.DeleteCollectionModal({ data: { collectionsView: a }, viewModels: { tag: i } }), a.deleteView.on("delete", function () { i.delete({ type: "quiz" }).done(function (e) { e.success && (a.viewModels.tags.list.findAndDelete({ _id: i._id }), Globals.Toaster.addToast(i18n(57), "check-circle", "success")) }) }), t.stopPropagation() }, "click -> .create-collection-btn": function (e, t) { this.newCollectionView = new Krafty2.Views.NewCollectionModal({ viewModels: { tags: this.viewModels.tags } }) }, "click -> .e-create-collection": function (e, t) { this.newCollectionView = new Krafty2.Views.NewCollectionModal({ viewModels: { tags: this.viewModels.tags } }) } } }), new Krafty2.View("RenameCollectionModal", { template: Krafty2.Templates.RenameCollectionModal, parent: $("body"), extends: Krafty2.Views.Modal, data: { collectionsView: null }, state: { error: "" }, filters: { afterCreate: function () { this.viewModels.tag.visibility ? this.html.find('input[type=radio][value="public"]').prop("checked", !0) : this.html.find('input[type=radio][value="private"]').prop("checked", !0) } }, events: { "click -> .rename-btn": function () { var e = this, t = e.html.find("#collection-name").val(), a = "public" === e.html.find("input[type=radio]:checked").val(); if (e.data.collectionsView && e.data.collectionsView.setState({ collectionLoading: e.viewModels.tag._id }), e.viewModels.tag.name == t || e.viewModels.tags.isUnique(t)) { var i = { type: "quiz", visibility: a, name: t }; e.viewModels.tag.rename(i).done(function () { e.viewModels.tag.visibility = a, e.data.collectionsView && e.data.collectionsView.setState({ collectionLoading: null }) }), Globals.Analytics.sendEvent("RenameCollection", { page: Globals.Analytics.pageFromPathname(window.location.pathname) }), e.trigger("done", t), e.destroy() } else e.setState({ error: 'Collection "' + t + '" already exists' }) }, "keyup -> #collection-name": function (e, t) { 13 === t.which && this.html.find(".rename-btn").trigger("click") }, "click -> .kr-radio": function (e) { e.find("input").click() }, "click -> .kr-radio input": function (e, t) { t.stopPropagation() } } }), new Krafty2.View("DeleteCollectionModal", { template: Krafty2.Templates.DeleteCollectionModal, parent: $("body"), extends: Krafty2.Views.Modal, events: { "click -> .delete-btn": function () { this.trigger("delete"), Globals.Analytics.sendEvent("DeleteCollection", { page: Globals.Analytics.pageFromPathname(window.location.pathname) }), this.destroy() } } }), new Krafty2.View("Tooltip", { template: Krafty2.Templates.Tooltip, parent: $("body"), data: { text: "Krafty tooltip placeholder", position: "top", parent: null, style: null, backgroundColor: "", fixedTooltip: !1 }, filters: { afterCreate: function () { var t = this, e = {}; if (t.data.style && t.html.css(t.data.style), t.data.parent) { var a = t.data.parent.get(0).getBoundingClientRect(); if ("top" === t.data.position) { if (t.data.fixedTooltip ? e.top = a.top - t.html.outerHeight() - 10 : e.top = a.top + $(window).scrollTop() - t.html.outerHeight() - 10, e.left = a.left + a.width / 2 - t.html.outerWidth() / 2, e.left + t.html.outerWidth() > window.innerWidth) { var i = e.left + t.html.outerWidth() - window.innerWidth; e.left -= i, t.html.find(".kr-tooltip-arrow").css({ left: 2 * i }) } } else "bottom" === t.data.position ? (t.data.fixedTooltip ? e.top = a.top + a.height + 10 : e.top = a.top + $(window).scrollTop() + a.height + 10, e.left = a.left + a.width / 2 - t.html.outerWidth() / 2, e.left + t.html.outerWidth() > window.innerWidth && (i = e.left + t.html.outerWidth() - window.innerWidth, e.left -= i, t.html.find(".kr-tooltip-arrow").css({ left: 2 * i }))) : "right" === t.data.position && (e.left = a.left + a.width + 10, e.top = a.top + $(window).scrollTop() + a.height / 2 - t.html.outerHeight() / 2); t.html.find(".kr-tooltip-arrow").removeClass("bottom").removeClass("top").removeClass("left").removeClass("right"), t.html.find(".kr-tooltip-arrow").addClass(t.data.position), t.html.css(e), t.data.backgroundColor && (t.html.css({ backgroundColor: t.data.backgroundColor }), "top" === t.data.position ? t.html.find(".kr-tooltip-arrow").css({ borderTopColor: t.data.backgroundColor }) : "bottom" === t.data.position && t.html.find(".kr-tooltip-arrow").css({ borderBottomColor: t.data.backgroundColor })) } setTimeout(function () { var e = Date.now(); $(document).on("click." + e, function () { t.trigger("destroy"), $(document).off("click." + e), t.destroy() }) }, 100) } } }), new Krafty2.View("DuplicateDetailPopover", { template: Krafty2.Templates.DuplicateDetailPopover, parent: $("body"), extends: Krafty2.Views.Popover, events: { "click -> .original-link": function (e, t) { window.open("/admin/quiz/" + this.data.quizId), this.destroy(), this.trigger("close") } } }), new Krafty2.View("RingChart", { template: Krafty2.Templates.RingChartTemplate, parent: Krafty2.$(".page-container"), state: { percentComplete: 0 }, data: {}, filters: { afterRender: function () { this.$chart = Krafty2.$(".ring-chart-wrapper .ring-chart") } }, methods: { setPercent: function (e) { this.setState({ percentComplete: e }), this.updateChart() }, updateChart: function () { var e = this.state.percentComplete, t = this.$chart.find("circle.outer").attr("r"), a = Math.floor(2 * Math.PI * t); this.$chart.find("circle.outer").css("stroke-dasharray", a).css("stroke-dashoffset", a), this.$chart.find("circle.outer").animate({ strokeDashoffset: a - e * a / 100 }, 2e3) } }, messages: {}, events: {} }), new Krafty2.State("Profile", { load: function (e) { var t = this, a = e.params.userId !== user.id ? "view" : "edit", i = e.params.userId, s = 0; Globals.Init(), Globals.mainHeader.setHeaderType("profile"), Globals.mainHeader.setPage("Profile"), Globals.mainNavigation.setPage("profile"), t.user = new Krafty2.Models.User, t.tags = new Krafty2.Models.Tags, t.tagsPersonal = new Krafty2.Models.Tags, t.tags.getPublicTags(i, "quiz"), t.tagsPersonal.getTags("quiz"), t.searchResults = new Krafty2.Models.SearchResults, t.memesets = new Krafty2.Models.Memesets({}), t.view = new Krafty2.Views.Profile({ viewModels: { user: t.user, searchResults: t.searchResults, memesets: t.memesets, tags: t.tags, tagsPersonal: t.tagsPersonal }, data: { mode: a } }), t.user.find(i, function () { t.view.setState({ pageLoading: !1 }), t.searchResults.getPersonalQuizzes(0, t.user.local.username, function () { t.view.setState({ searchResultsLoading: !1 }), t.view.childViews.quizSearchResults && t.view.childViews.quizSearchResults.setState({ pageLoading: !1 }) }), t.memesets.getList(t.user._id, function () { }), t.view.updateProfileCompletenessChart(); var e = ((t.user.title || "") + " " + (t.user.firstName || "") + " " + (t.user.lastName || "")).replace(/\s\s+/g, " "); Globals.SEO.setPage({ title: e + " - Quizizz", page: window.location.pathname, desc: "See " + e + "'s profile on Quizizz to discover quizzes, meme sets and more" }) }), t.view.on("nextPage", function () { t.searchResults.getPersonalQuizzes(++s, t.user.local.username).done(function () { t.view.childViews.quizSearchResults.setState({ loading: !1 }) }) }) }, unload: function () { this.view.destroy(), this.searchResults.destroy() } }), new Krafty2.View("Profile", { template: Krafty2.Templates.Profilev4, parent: Krafty2.$(".page-inner"), state: { pageLoading: !0, searchResultsLoading: !0, currentTab: "quizizz", userType: { type: null, label: null }, currentUser: null, selectedQuiz: null, isImageEditMode: !1, imageUploadInProgress: !1 }, data: { mode: "", settingsOpen: !1 }, filters: { afterCreate: function () { var e = this, t = function () { e.html && e.adjustPreviewNode(), e.stopPreviewAnim || requestAnimationFrame(t) }; t(), e.setUserType(), e.setState({ currentUser: user && user.id ? user : null }) }, beforeDestroy: function (e) { this.stopPreviewAnim = !0, e() } }, methods: { adjustPreviewNode: function () { var e = this; if (e.previewNode) { var t = e.html.find(".search-results-preview-container").get(0).getBoundingClientRect().top + 19; if ((t = t < 84 ? 84 : t) === e.oldTop) return; e.oldTop || (oldTop = t); var a = window.innerHeight - t - 20; a = a < 180 ? 180 : a, e.previewNode.css({ top: t, height: a }), e.oldTop = t } }, getOccupationLabel: function () { var e = this.viewModels.user; return "teacher_school" === e.occupation || "teacher_university" === e.occupation ? i18n("448").toUpperCase() : "student" === e.occupation ? i18n("449").toUpperCase() : "parent" === e.occupation ? i18n("450").toUpperCase() : "" }, getSubjects: function () { return this.viewModels.user.subject_tags.length ? (this.viewModels.user.subject_tags.setRaw(_.compact(this.viewModels.user.subject_tags)), this.viewModels.user.subject_tags.join(", ")) : "" }, getGrades: function () { var e = this.viewModels.user.grades.getRaw(); return 1 < e.length ? _.find(Globals.grades, { val: e[0] }).text + " - " + _.find(Globals.grades, { val: e[e.length - 1] }).text : 1 === e.length ? _.find(Globals.grades, { val: e[0] }).text : "" }, setUserType: function () { var e = { type: null, label: null }; switch (this.viewModels.user.occupation) { case "teacher_school": case "teacher_university": e.type = "Teacher", e.label = "label-teacher"; break; case "parent": e.type = "Parent", e.label = "label-parent"; break; case "student": e.type = "Student", e.label = "label-student" }this.setState({ userType: e }) }, hidePreviewPane: function () { this.previewNode && this.previewNode.hide() }, showPreviewPane: function () { this.previewNode && this.previewNode.show() }, updateProfileCompletenessChart: function () { user && this.viewModels.user._id === user.id && Globals.media.desktop && this.childViews.profileCompleteChart.setPercent(Math.round(user.profileCompleteness)) }, toTitleCase: function (e) { if (e) return e.split(" ").map(function (e) { return e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() }).join(" ") }, getFullName: function (e) { if (e) { var t = ""; return t += e.title ? e.title + " " : "", t += e.firstName ? e.firstName + " " : "", t += e.lastName ? e.lastName + " " : "" } return "" }, showTab: function (e, t) { var a = ($(window).width() - 575) / 2, i = "status=1,width=575,height=400,top=" + ($(window).height() - 400) / 2 + ",left=" + a; window.open(e, t, i) }, getMediaUrl: function (e, t) { var a, i; return a = i = "90", new Globals.URI(e, { query: { w: a, h: i } }).getFullURI() }, getOrganizationText: function (e) { var t = ""; return e.name && (t += this.toTitleCase(e.name)), e.city && (t += (t ? ", " : "") + this.toTitleCase(e.city)), e.state && (t += (t ? ", " : "") + e.state), e.country && (t += (t ? ", " : "") + e.country), t }, shouldShowUserName: function () { var e = this.viewModels.user; return !(!e.firstName && !e.lastName || (!this.state.currentUser || this.state.currentUser.id !== e._id) && "student" === e.occupation && e.student && e.student.underAge) }, shouldShowOrgInfo: function () { var e = this.viewModels.user; return !(!this.state.currentUser || this.state.currentUser.id !== e._id) || "student" !== e.occupation || !e.student || !e.student.underAge } }, messages: { "hover -> quizSearchResults": function (e) { var t = this; Globals.media.desktop && (t.previewView && t.previewView.destroy(), t.previewView = new Krafty2.Views.SearchResultsPreview({ parent: t.html.find(".search-results-preview-container"), viewModels: { quiz: e }, data: { stickType: "static", stickTop: 128 } }), t.previewNode = t.previewView.container.find(".search-results-preview"), t.oldTop = null, t.adjustPreviewNode(), t.setState({ selectedQuiz: e._id })) } }, events: { "click -> .profile-tabs-container > .tabs > .tab, .tab-container > .tabs > .tab": function (e, t) { $(e).hasClass("tab-quizzes") ? (this.setState({ currentTab: "quizizz" }), this.showPreviewPane()) : $(e).hasClass("tab-collections") ? (this.setState({ currentTab: "collections" }), this.hidePreviewPane()) : $(e).hasClass("tab-memesets") && (this.setState({ currentTab: "memesets" }), this.hidePreviewPane()) }, "click -> .btn-edit-profile": function (e, t) { this.profileEditView = new Krafty2.Views.ProfileEditView({ state: { user: this.viewModels.user.getRaw() } }) }, "click -> .social-icons .icon": function (e, t) { $(e).hasClass("icon-fb") ? this.showTab("https://www.facebook.com/dialog/share?app_id=1589541687945427&display=popup&href=" + window.location.href + "&redirect_uri=" + window.location.href, "Facebook") : $(e).hasClass("icon-twitter") ? this.showTab("https://www.twitter.com/share?text=Check out these awesome quizzes and meme sets created by " + this.viewModels.user.local.username + " on Quizizz!&via=quizizz", "Twitter") : $(e).hasClass("icon-gplus") && this.showTab("https://plus.google.com/share?url=" + encodeURIComponent(window.location.href), "Google") }, "mouseover -> .profile-image": function () { var e = this.viewModels.user; "student" === e.occupation && e.student && e.student.underAge || this.setState({ isImageEditMode: !0 }) }, "mouseout -> .profile-image": function () { this.setState({ isImageEditMode: !1 }) }, "change -> .upload-profile-image": function (e, t) { var a = this, i = new FileReader; a.setState({ imageUploadInProgress: !0 }), i.onload = function (e) { new Krafty2.Models.User({}).saveProfileImage(e.target.result, { error: function (e) { Globals.Toaster.addToast(e, "times-circle", "error"), a.setState({ imageUploadInProgress: !1 }) }, success: function (e, t) { e.done(function (e) { e.success ? (Globals.Toaster.addToast(i18n("Changes_saved_successfully"), "check-circle", "success"), a.viewModels.user.media = t, window.user.media = t) : Globals.Toaster.addToast(e.message, "times-circle", "error"), a.setState({ imageUploadInProgress: !1 }) }) } }) }, i.readAsDataURL(t.target.files[0]) } } }), new Krafty2.View("ShareQuizModal", { template: Krafty2.Templates.ShareQuizModal, parent: $("body"), extends: Krafty2.Views.Modal, state: { isGuestUser: !0, loading: !0, suggestions: [], hideSuggestions: !1, shareType: "quiz" }, data: {}, filters: { onCreate: function () { var t = this; t.userModel = new Krafty2.Models.User({}), user && user.id && (t.setState({ isGuestUser: !1 }), t.userModel.getSuggestedUsers({}, function (e) { t.setState({ suggestions: e, loading: !1 }), 0 === e.length && t.setState({ hideSuggestions: !0 }) })) } }, methods: { getShareUrls: function (e) { var t = this; switch (t.state.shareType) { case "quiz": if ("fb" === e) return "https://www.facebook.com/dialog/share?app_id=1589541687945427&display=popup&href=" + window.location.href + "&redirect_uri=" + window.location.href; if ("twitter" === e) return 'https://www.twitter.com/share?text=Play "' + t.data.quizName + '" %26 other awesome quizzes w/ your class! 👍&url=' + encodeURIComponent(window.location.origin + "/admin/quiz/" + t.data.quizId) + "&via=quizizz"; if ("gplus" === e) return "https://plus.google.com/share?url=" + encodeURIComponent(window.location.href); break; case "collectionPublic": case "collectionPrivate": if ("fb" === e) return "https://www.facebook.com/dialog/share?app_id=1589541687945427&display=popup&href=" + t.getSharableLink() + "&redirect_uri=" + t.getSharableLink(); if ("twitter" === e) return 'https://www.twitter.com/share?text="' + t.data.collectionName + '" is a great collection of quizzes! 👍&url=' + encodeURIComponent(t.getSharableLink()) + "&via=quizizz"; if ("gplus" === e) return "https://plus.google.com/share?url=" + encodeURIComponent(t.getSharableLink()); break; case "memes": if ("fb" === e) return "https://www.facebook.com/dialog/share?app_id=1589541687945427&display=popup&href=" + t.getSharableLink() + "&redirect_uri=" + t.getSharableLink(); if ("twitter" === e) return 'https://www.twitter.com/share?text="' + t.data.memesetName + '" is a great collection of memes! 👍&url=' + encodeURIComponent(t.getSharableLink()) + "&via=quizizz"; if ("gplus" === e) return "https://plus.google.com/share?url=" + encodeURIComponent(t.getSharableLink()) } }, getFullName: function (e) { return e.firstName || e.lastName ? (e.title || "") + " " + (e.firstName || "") + " " + (e.lastName || "") : "@" + e.local.casedUsername }, getGrades: function (e) { if (e.grades && e.grades.length) return e.grades.map(function (e) { return 0 === e ? "KG" : 1 === e ? e + "st" : 2 === e ? e + "nd" : 3 === e ? e + "rd" : e <= 12 ? e + "th" : 13 === e ? "University" : 14 === e ? "Professional Development" : "" }).filter(Boolean).join(", ") + " Grade" }, getSubjects: function (e) { return e.subject_tags && e.subject_tags.join(", ") }, showTab: function (e, t) { var a = ($(window).width() - 575) / 2, i = "status=1,width=575,height=400,top=" + ($(window).height() - 400) / 2 + ",left=" + a; window.open(e, t, i) }, getSharableLink: function () { var e = this; if ("quiz" === e.state.shareType || "memes" === e.state.shareType) return window.location.href; if ("collectionPrivate" === e.state.shareType || "collectionPublic" === e.state.shareType) { var t = document.createElement("a"); return t.href = window.location.href, t.protocol + "//" + t.host + "/collection/" + e.data.collectionId } return "" }, sendShareEvent: function (e) { var t = ""; switch (this.state.shareType) { case "quiz": t = "quizShare", e.quizId = this.data.quizId; break; case "collectionPrivate": case "collectionPublic": t = "collectionShare", eventPrams.collectionId = this.data.collectionId; break; case "memes": t = "memeShare", e.memesetId = this.data.memesetId }Globals.Analytics.sendEvent(t, e); var a = ""; "quizShare" === t ? a = "quizStatus" : "collectionShare" === t ? a = "collectionStatus" : "memeShare" === t && (a = "memeStatus"), a && Globals.UserAnalytics.sendEvent(a + ".shared") } }, events: { "click -> .cta-get-sharable-link": function (e, t) { $(".sharable-link-panel").slideToggle(200), this.sendShareEvent({ type: "link" }) }, 'click -> .btn-send-link:not(".btn-success")': function (t, e) { var a = this, i = "", s = "", o = new RegExp("^[A-Za-z0-9._-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,4}$"); if ($(t).hasClass("is-suggested-user")) i = $(t).closest(".suggestion").attr("data-email"), s = $(t).closest(".suggestion").attr("data-id"); else if (!(i = $(t).closest(".share-via-email").find(".shared-email").val()) || !o.test(i)) return void Globals.Toaster.addToast("Invalid email address", "times-circle", "error"); $(t).hide().siblings(".email-sending").show(); var n = "", r = ""; switch (a.state.shareType) { case "quiz": n = a.data.quizId, r = "quiz"; break; case "collectionPublic": case "collectionPrivate": n = a.data.collectionId, r = "collection"; break; case "memes": n = a.data.memesetId, r = "meme" }a.userModel.shareWithUser({ type: r, entityId: n, redirect: a.getSharableLink(), shareWith: i }).done(function (e) { $(t).show().siblings(".email-sending").hide(), e.success ? $(t).hasClass("is-suggested-user") ? ($(t).addClass("btn-success").text("SENT"), a.sendShareEvent({ type: "teacherShare", sharedWith: s })) : (Globals.Toaster.addToast("Link has been shared.", "check-circle", "success"), $(t).closest(".share-via-email").find(".shared-email").val(""), a.sendShareEvent({ type: "emailShare", sharedWith: i })) : Globals.Toaster.addToast("Error while sharing!", "times-circle", "error") }).error(function (e) { $(t).show().siblings(".email-sending").hide(), Globals.Toaster.addToast("Error while sharing! Please try again later.", "times-circle", "error") }) }, "click -> .sharable-link": function (e, t) { t.currentTarget.select() }, "click -> .copy-url-btn": function (e, t) { var a; if ($(e).closest(".sharable-link-panel").find(".sharable-link").trigger("click"), document.queryCommandSupported("copy")) try { a = document.execCommand("copy") } catch (e) { a = !1 } else a = !1; a ? Globals.Toaster.addToast("Link copied to clipboard", "info-circle", "info") : Globals.Toaster.addToast("Copy operation not supported. Please copy the link manually.", "times-circle", "error") }, "click -> .icon-twitter": function () { this.showTab(this.getShareUrls("twitter"), "Twitter"), this.sendShareEvent({ type: "twitterShare" }) }, "click -> .icon-gplus": function () { this.showTab(this.getShareUrls("gplus"), "Google"), this.sendShareEvent({ type: "googleShare" }) }, "click -> .icon-fb": function () { this.showTab(this.getShareUrls("fb"), "Facebook"), this.sendShareEvent({ type: "fbShare" }) }, "click -> .btn-close": function () { this.destroy() }, "keyup -> .shared-email": function (e, t) { 13 === t.which && this.html.find(".send-email-btn .btn-send-link").trigger("click") } } }), new Krafty2.View("Settings", { template: Krafty2.Templates.Settings, parent: Krafty2.$(".page-inner"), filters: { afterCreate: function () { "teacher_school" == user.occupation && user.preferences && null != user.preferences.notificationLevel && (null == user.preferences.notificationLevel || 5 == user.preferences.notificationLevel ? this.childViews.notificationLevel.selectVal(1) : this.childViews.notificationLevel.selectVal(user.preferences.notificationLevel)), window.locale && this.childViews.langSelector.selectVal(window.locale) } }, state: { email: { loading: !1, ok: null, message: "", class: "" }, username: { loading: !1, ok: null, message: "", class: "" }, notificationLevel: { loading: !1, ok: null, message: "", class: "" }, password: { loading: !1, ok: null, message: "", class: "" }, passwordAgain: { loading: !1, ok: null, message: "", class: "" }, media: { orientation: "orientation-0", loading: !1, temp: "", ok: null }, validProfile: !0, validPassword: !1, loadingProfile: !1, loadingPassword: !1, showDeleteInput: !1, deletingAccount: !1, isDeleteFinalActive: !1, errMsg: "", deleteTickCount: 3 }, data: { emailVal: "", usernameVal: "", notificationLevels: [{ val: 0, text: "Never" }, { val: 1, text: "Daily" }, { val: 7, text: "Weekly" }], langs: [{ val: "en", text: "English", img: "https://cf.quizizz.com/img/flag_icons/us.png" }, { val: "es", text: "Español", img: "https://cf.quizizz.com/img/flag_icons/es.png" }, { val: "fr", text: "Français", img: "https://cf.quizizz.com/img/flag_icons/fr.png" }, { val: "nl", text: "Dutch", img: "https://cf.quizizz.com/img/flag_icons/nl.png" }, { val: "pl", text: "Polish", img: "https://cf.quizizz.com/img/flag_icons/pl.png" }, { val: "ru", text: "Russian", img: "https://cf.quizizz.com/img/flag_icons/ru.png" }] }, methods: { getOrientation: function (e, l) { var t = new FileReader; t.onload = function (e) { var t = new DataView(e.target.result); if (65496 != t.getUint16(0, !1)) return l(-2); for (var a = t.byteLength, i = 2; i < a;) { var s = t.getUint16(i, !1); if (i += 2, 65505 == s) { if (1165519206 != t.getUint32(i += 2, !1)) return l(-1); var o = 18761 == t.getUint16(i += 6, !1); i += t.getUint32(i + 4, o); var n = t.getUint16(i, o); i += 2; for (var r = 0; r < n; r++)if (274 == t.getUint16(i + 12 * r, o)) return l(t.getUint16(i + 12 * r + 8, o)) } else { if (65280 != (65280 & s)) break; i += t.getUint16(i, !1) } } return l(-1) }, t.readAsArrayBuffer(e) }, uploadFileToS3: function (i, e, t, a, s) { Krafty2.$.ajax({ type: "POST", url: "https://quizizz.com/media/getUploadURL?destination=users", headers: { "x-csrf-token": Globals.CSRFToken }, ContentType: "application/json", success: function (e) { var t = new XMLHttpRequest, a = new FormData; a.append("file", i), t.open("POST", e, !0), t.send(a), t.upload && t.upload.addEventListener("progress", function () { s.progress && s.progress(t) }), t.onerror = function () { s.error && s.error() }, t.ontimeout = function () { s.timeout && s.timeout() }, t.onload = function () { s.load && s.load(t.responseText) } } }) }, checkValid: function () { var e = this; !1 === e.state.email.ok || !1 === e.state.username.ok || e.state.email.loading || e.state.username.loading || e.state.media.loading ? e.setState({ validProfile: !1 }) : e.setState({ validProfile: !0 }), !1 !== e.state.password.ok && !1 !== e.state.passwordAgain.ok && e.html.find("#new-password").val() && e.html.find("#new-password-again").val() ? e.setState({ validPassword: !0 }) : e.setState({ validPassword: !1 }) } }, events: { "keyup -> #email": function (e, t) { var a = e.val(), i = this; /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(a) ? (i.emailTimeout && clearTimeout(i.emailTimeout), i.emailTimeout = setTimeout(function () { i.setState({ email: { loading: !0, ok: !1, message: "" } }), i.checkValid(), Globals.AuthApi.checkEmailAvail(a, function (e) { i.setState({ email: { loading: !1, ok: e.avail || a === user.email, message: e.err && a !== user.email ? i18n("account_already_exists") : "", class: e.err ? "fail" : "ok" } }), i.checkValid() }) }, 500)) : i.setState({ email: { message: i18n("enter_valid_email"), ok: !1, loading: !1, class: "fail" } }), i.checkValid() }, "keyup -> #username": function (e, t) { var a = e.val(), i = this; /^\w{5,}$/g.test(a) ? (i.usernameTimeout && clearTimeout(i.usernameTimeout), i.usernameTimeout = setTimeout(function () { console.log("Checking username please wait ..."), i.setState({ username: { loading: !0, error: !1, message: "" } }), i.checkValid(), Globals.AuthApi.checkUsernameAvail(a, function (e) { i.setState({ username: { loading: !1, ok: e.avail || user.username.toLowerCase() === a, message: e.err && user.username.toLowerCase() !== a ? i18n("username_not_available") : "", class: e.err ? "fail" : "ok" } }), i.checkValid() }) }, 500)) : i.setState({ username: { message: i18n("enter_valid_username"), ok: !1, loading: !1, class: "fail" } }), i.checkValid() }, "keyup -> #new-password": function (e, t) { 5 < e.val().length ? this.setState({ password: { loading: !1, ok: !0, message: "", class: "ok" } }) : this.setState({ password: { loading: !1, ok: !1, message: i18n("enter_valid_password"), class: "fail" } }), this.checkValid() }, "keyup -> #new-password-again": function (e, t) { var a = this, i = a.html.find("#new-password").val(), s = e.val(); 5 < i.length ? i === s ? a.setState({ passwordAgain: { loading: !1, ok: !0, message: "", class: "ok" } }) : a.setState({ passwordAgain: { loading: !1, ok: !1, message: i18n("passwords_dont_match"), class: "fail" } }) : a.setState({ passwordAgain: { loading: !1, ok: !1, message: i18n("enter_valid_password"), class: "fail" } }), a.checkValid() }, "change -> #media-input": function (e, a) { var i = this, s = new FormData, t = new FileReader; t.onload = function (e) { var t = new Image; t.src = e.target.result, t.onload = function () { i.setState({ media: { temp: t.src, loading: !0 } }), i.checkValid(), i.getOrientation(a.target.files[0], function (e) { i.setState({ media: { temp: t.src, orientation: "orientation-" + e, loading: i.state.media.loading, ok: i.state.media.ok, message: i.state.media.message } }), i.checkValid() }), i.uploadFileToS3(a.target.files[0], a.target.files[0].type, a.target.files[0].name, s, { error: function () { i.setState({ media: { temp: "", loading: !1, ok: !1, message: i18n("server_encountered_an_error_upload"), class: "fail" } }), i.checkValid() }, progress: function () { }, timeout: function () { i.setState({ media: { temp: "", loading: !1, ok: !1, message: i18n("server_encountered_an_error_upload"), class: "fail" } }), i.checkValid() }, load: function (e) { i.setState({ media: { temp: e, loading: !1, ok: !0, class: "ok" } }), i.checkValid() } }) }, t.onerror = function () { i.setState({ media: { loading: !1, ok: !1, message: i18n("invalid_img"), class: "fail", temp: "" } }), i.checkValid() } }, t.readAsDataURL(a.target.files[0]) }, "click -> .delete-account-btn": function () { this.setState({ showDeleteInput: !0 }) }, "keyup -> .delete-input input": function (e, t) { "delete" === $(e).val().trim() ? this.setState({ isDeleteFinalActive: !0 }) : this.setState({ isDeleteFinalActive: !1 }) }, "click -> .delete-account-final-btn": function (e, t) { var a = this; if (a.state.isDeleteFinalActive && !a.state.deletingAccount) { a.setState({ deletingAccount: !0 }); var i = setInterval(function () { 0 < a.state.deleteTickCount ? a.setState({ deleteTickCount: a.state.deleteTickCount - 1 }) : (clearInterval(i), Globals.AuthApi.deactivate().done(function (e) { e.success && (a.setState({ deletingAccount: !1 }), window.location.href = "/") }).fail(function (e) { var t = JSON.parse(e.responseText); a.setState({ deletingAccount: !1, errMsg: _.get(t, "message", "") }) })) }, 1e3) } }, "click -> #save-changes": function (e, t) { var a = this, i = a.html.find("#email").val().trim(), s = a.html.find("#username").val().trim(), o = a.state.media.temp, n = {}; if (a.childViews.notificationLevel) { var r = a.childViews.notificationLevel.val(); r !== user.notificationLevel && (n.preferences ? n.preferences.notificationLevel = r : n.preferences = { notificationLevel: r }) } e.hasClass("disabled") || a.state.loadingProfile || (i !== user.email && (n.email = i), s !== user.username && (n.username = s), a.state.media.ok && (n.media = o), 0 !== _.keys(n).length && (a.setState({ loadingProfile: !0 }), Globals.AuthApi.register2(n).done(function (e) { user.email = n.email || user.email, user.username = n.username || user.username, user.media = n.media || user.media, (n.preferences || user.preferences) && (user.preferences = n.preferences || user.preferences), a.setState({ loadingProfile: !1, email: { loading: !1, ok: null, message: "", class: "" }, username: { loading: !1, ok: null, message: "", class: "" }, media: { orientation: "orientation-0", loading: !1, temp: "", ok: null } }), Globals.Toaster.addToast(i18n("Changes_saved_successfully"), "check-circle", "success") }).fail(function () { a.setState({ loadingProfile: !1, email: { loading: !1, ok: null, message: "", class: "" }, username: { loading: !1, ok: null, message: "", class: "" }, media: { orientation: "orientation-0", loading: !1, temp: "", ok: null } }), Globals.Toaster.addToast(i18n("Profile_Save_Error"), "times-circle", "error") }))) }, "click -> #update-password": function (e, t) { var a = this, i = a.html.find("#old-password").val().trim(), s = a.html.find("#new-password").val().trim(); if (!e.hasClass("disabled") && !a.state.loadingPassword) { var o = { newPassword: s }; user.hasPassword && (o.oldPassword = i), a.setState({ loadingPassword: !0 }), Globals.AuthApi.updatePassword(o).done(function (e) { a.html.find("#old-password").val(""), a.html.find("#new-password").val(""), a.html.find("#new-password-again").val(""), e.success && (user.hasPassword || (user.hasPassword = !0), a.setState({ loadingPassword: !1, password: { loading: !1, ok: null, message: "", class: "" }, passwordAgain: { loading: !1, ok: null, message: "", class: "" }, validPassword: !1 }), Globals.Toaster.addToast(i18n("Changes_saved_successfully"), "check-circle", "success")) }).fail(function (e) { a.html.find("#old-password").val(""), a.html.find("#new-password").val(""), a.html.find("#new-password-again").val(""), 401 === e.status ? (a.setState({ loadingPassword: !1, password: { loading: !1, ok: null, message: "", class: "" }, passwordAgain: { loading: !1, ok: null, message: "", class: "" }, validPassword: !1 }), Globals.Toaster.addToast(i18n("wrong_old_password"), "times-circle", "error")) : (a.setState({ loadingPassword: !1, password: { loading: !1, ok: null, message: "", class: "" }, passwordAgain: { loading: !1, ok: null, message: "", class: "" }, validPassword: !1 }), Globals.Toaster.addToast(i18n("Profile_Save_Error"), "times-circle", "error")) }) } } }, messages: { "select -> langSelector": function (e) { Globals.AuthApi.register2({ preferences: _.extend(user.preferences, { lang: e.val }) }).done(function () { Globals.Toaster.addToast(i18n("Changes_saved_successfully"), "check-circle", "success"), setTimeout(function () { window.location.reload() }, 500) }).fail(function () { Globals.Toaster.addToast(i18n("Profile_Save_Error"), "times-circle", "error") }) } } }), new Krafty2.State("Settings", { load: function () { Globals.Init(), Globals.mainHeader.setHeaderType("settings_page"), Globals.mainHeader.setPage("Settings"), Globals.mainNavigation.setPage("settings"), self.view = new Krafty2.Views.Settings({}) }, unload: function () { self.view.destroy() } }), new Krafty2.View("CheckButtonGroup", { template: Krafty2.Templates.CheckButtonGroup, state: { list: [] }, data: { list: [] }, filters: { onCreate: function () { this.state.list = this.data.list } }, events: { "click -> .kr-check-button-group-button": function (e, t) { var a = +e.attr("data-idx"); this.state.list[a].checked = !this.state.list[a].checked, this.setState({ list: this.state.list }), this.sendMessage("check", this.state.list[a]) } }, methods: { val: function () { return _.map(_.filter(this.state.list, function (e) { return e.checked }), function (e) { return e.val }) }, setVal: function (e) { for (var t = 0; t < e.length; t++) { var a = _.find(this.data.list, { val: e[t] }); a && (a.checked = !0) } this.setState({ list: this.data.list }) } } }), new Krafty2.View("OrganizationView", { template: Krafty2.Templates.OrganizationTemplate, parent: Krafty2.$(".app-container"), data: { countryLabel: i18n("country"), countries: [], country: null, zip: null, classList: [] }, filters: { onCreate: function () { for (var e = 0; e < Globals.Countries.length; e++)this.data.countries[e] = { text: Globals.Countries[e].Name, val: Globals.Countries[e].Code, img: "/img/flags/" + Globals.Countries[e].Code + ".png" }; Globals.SEO.sendPageView("/signup/info#organization") }, afterCreate: function () { var e = this; e.data.country && e.childViews.country.selectVal(e.data.country), e.data.zip && e.html.find("#zip").val(e.data.zip) }, afterRender: function () { var e = this; setTimeout(function () { e.html.find(".kr-modal-container").css({ opacity: 1, marginTop: 50 }) }, 100) } }, events: { "click -> .kr-modal": function () { this.destroy(), this.events.trigger("destroy") }, "click -> .kr-modal-container": function (e, t) { t.stopPropagation() }, "click -> .cancel-btn": function () { this.destroy(), this.trigger("destroy") }, "click -> .create-btn": function () { var t = this, e = t.childViews.country.val().trim(), a = t.html.find("#state").val().trim(), i = t.html.find("#city").val().trim(), s = t.html.find("#zip").val().trim(), o = t.html.find("#name").val().trim(); Krafty2.$.ajax({ type: "POST", url: "/organization/add", headers: { "x-csrf-token": Globals.CSRFToken }, data: { country: e, state: a, city: i, zip: s, name: o }, success: function (e) { e.success && (t.trigger("org-create", e.data), t.destroy(), t.trigger("destroy")) } }) } } }), new Krafty2.View("TagBox", { template: Krafty2.Templates.TagBoxTemplate, state: { allTags: [], selectedTags: [], selectedVals: [], isDropDownHidden: !0, tagSuggestions: [] }, data: { placeholderText: "", randomColors: !1, colorPalette: ["#5DE2A5", "#F47998", "#6B7C93", "#7B6BEA"] }, filters: { onCreate: function () { }, afterCreate: function () { this.filterTags() }, afterRender: function () { this.renderTags() } }, events: { "click -> .tag-list-item .option-close": function (e, t) { var a = $(e).parents(".tag-list-item").attr("data-val"); this.unselect(a) }, "keyup -> .selectbox-field": function (e, t) { var a = this, i = $(e).val().trim(); if (27 !== t.keyCode) if (13 === t.keyCode && 1 === a.state.tagSuggestions.length && (a.select(a.state.tagSuggestions[0].val), a.closeSuggestions()), 2 <= i.length) { var s = new RegExp(i, "ig"), o = a.state.allTags.filter(function (t) { return t.text.match(s) && !a.state.selectedVals.some(function (e) { return e.toLowerCase() === t.val.toLowerCase() }) }); a.setState({ isDropDownHidden: !1, tagSuggestions: o }) } else a.setState({ isDropDownHidden: !0 }); else a.closeSuggestions() }, "click -> .tag-suggestion-item": function (e, t) { var a = $(e).attr("data-val"); this.select(a), this.closeSuggestions() } }, methods: { select: function (e) { var t = this; t.setState({ selectedVals: t.state.selectedVals.concat([e]) }), t.filterTags(), t.trigger("addTag", e), t.sendMessage("addTag", e) }, unselect: function (t) { var e = this; e.setState({ selectedVals: e.state.selectedVals.filter(function (e) { return e.toLowerCase() !== t.toLowerCase() }) }), e.filterTags(), e.trigger("removeTag", t), e.sendMessage("removeTag", t) }, filterTags: function () { var a = this, e = a.state.selectedVals.filter(Boolean).map(function (t) { return { text: a.state.allTags.filter(function (e) { return e.val.toLowerCase() === t.toLowerCase() })[0].text, val: t } }); a.data.randomColors && (e = e.map(function (e, t) { return e.color = a.data.colorPalette[t % a.data.colorPalette.length], e })), a.setState({ selectedTags: e }) }, closeSuggestions: function () { this.html.find(".selectbox-field").val(""), this.setState({ isDropDownHidden: !0 }) }, renderTags: function () { var e = this.html.find(".selectbox-field"), t = this.html.find(".tagbox-tag-wrapper"), a = this.html.find(".tag-list"), i = 0, s = 0; t.get(0).getBoundingClientRect().height < a.get(0).getBoundingClientRect().height && (s = (i = t.get(0).getBoundingClientRect().height) + a.get(0).getBoundingClientRect().height - t.get(0).getBoundingClientRect().height, t.css("height", s + "px")); var o = 0, n = 0; if (0 !== a.find(".tag-list-item").length) { var r = a.find(".tag-list-item:last").position(), l = e.get(0).getBoundingClientRect(), d = a.find(".tag-list-item:last").get(0).getBoundingClientRect(); r.left + d.width + l.width > t.get(0).getBoundingClientRect().width ? (i = t.get(0).getBoundingClientRect().height, r.top + d.height + l.height > i ? (s = i + 20, t.css("height", s + "px"), n = i - 6 - 2) : n = r.top + d.height + 6 + 2, o = 6) : (o = r.left + 6 + d.width + 6, n = r.top) } e.css({ left: o + "px", top: n + "px" }) } } }), new Krafty2.View("ProfileEditView", { template: Krafty2.Templates.ProfileEditTemplate, parent: Krafty2.$(".app-container"), extends: Krafty2.Views.Modal, state: { schools: [], schoolLoading: !1, loading: !1, subjectTagCloud: [], subjectTagMoreState: 0, selectedSubjectTags: [], showNoOrgLink: !1 }, data: { countries: [], schoolBtnLabel: i18n("cant_find_organization"), subjects: Globals.subjects, gradesList: Globals.grades, titles: [{ val: "Mr.", text: "Mr." }, { val: "Ms.", text: "Ms." }, { val: "Mrs.", text: "Mrs." }, { val: "Dr.", text: "Dr." }], defaultSubjects: [{ text: "Geography", val: "Geography", image: "https://cf.quizizz.com/img/icons/diamond.png" }, { text: "English", val: "English", image: "https://cf.quizizz.com/img/icons/talk.png" }, { text: "History", val: "History", image: "https://cf.quizizz.com/img/icons/lincoln.png" }, { text: "Physics", val: "Physics", image: "https://cf.quizizz.com/img/icons/magnet.png" }, { text: "Biology", val: "Biology", image: "https://cf.quizizz.com/img/icons/bacteria.png" }, { text: "Chemistry", val: "Chemistry", image: "https://cf.quizizz.com/img/icons/burner.png" }, { text: "World languages", val: "World languages", image: "https://cf.quizizz.com/img/icons/planet-earth.png" }, { text: "Mathematics", val: "Mathematics", image: "https://cf.quizizz.com/img/icons/antique.png" }] }, filters: { onCreate: function () { for (var e = 0; e < Globals.Countries.length; e++)this.data.countries[e] = { text: Globals.Countries[e].Name, val: Globals.Countries[e].Code, img: "/img/flags/" + Globals.Countries[e].Code + ".png" }; this.data.countries.unshift({ text: "United States", val: "US", img: "/img/flags/US.png" }) }, afterCreate: function () { var a = this; a.setState({ subjectTagCloud: a.data.defaultSubjects, selectedSubjectTags: a.state.user.subject_tags }), a.state.user.organization && a.state.user.organization.country && a.childViews.country.selectVal(a.state.user.organization.country), a.state.user.organization && a.state.user.organization.zip && a.html.find("#zip-code").val(a.state.user.organization.zip), a.state.user.grades && a.state.user.grades.length && a.childViews.grades.setVal(a.state.user.grades), a.state.user.title && a.childViews.title.selectVal(a.state.user.title), a.state.user.firstName && a.html.find("#first-name").val(a.state.user.firstName), a.state.user.lastName && a.html.find("#last-name").val(a.state.user.lastName), a.setState({ schoolLoading: !0 }), Globals.AuthApi.searchOrganization({ country: a.state.user.organization.country, zip: a.state.user.organization.zip }, function (e) { a.setState({ schools: e, schoolLoading: !1 }); var t = _.map(e.organizations, function (e) { return { text: e.name, val: e._id } }); a.childViews.schools.setList(t), a.childViews.schools.selectVal(a.state.user.organization._id) }), Globals.media.mobile && a.html.find(".section-title.collapsible").slice(1).trigger("click") } }, methods: { isSubjectSelected: function (t) { return this.state.selectedSubjectTags.some(function (e) { return e.toLowerCase() === t.toLowerCase() }) ? "selected" : "" }, showOrgView: function () { var t = this; t.html.find(".kr-modal-container").css({ opacity: 0, marginTop: 200 }), t.organizationView = new Krafty2.Views.OrganizationView({ data: { country: t.childViews.country.val(), zip: t.html.find("#zip-code").val(), classList: ["from-profile-edit"] } }), t.organizationView.on("org-create", function (e) { t.childViews.country.selectVal(e.country), t.html.find("#zip-code").val(e.zip), t.childViews.schools.setList([{ text: e.name, val: e._id }]), t.childViews.schools.selectIdx(0) }), t.organizationView.on("destroy", function () { t.html.find(".kr-modal-container").css({ opacity: 1, marginTop: 50 }), t.childViews.schools.close() }) } }, messages: { "select -> country": function (e) { this.html.find("#zip-code").val(""), this.childViews.schools.reset() }, "SelectBoxBtn -> schools": function () { this.showOrgView() }, "select -> schools": function () { this.setState({ showNoOrgLink: !0 }) }, "close -> schools": function () { this.childViews.schools.val() && this.setState({ showNoOrgLink: !1 }) }, "removeTag -> subjectTags": function (t) { this.setState({ selectedSubjectTags: this.state.selectedSubjectTags.filter(function (e) { return e.toLowerCase() !== t.toLowerCase() }) }) }, "addTag -> subjectTags": function (e) { this.setState({ selectedSubjectTags: this.state.selectedSubjectTags.concat([e]) }) } }, events: { "click -> .kr-modal-close": function () { this.events.trigger("close"), this.destroy() }, "click -> .kr-modal": function () { this.events.trigger("close"), this.destroy() }, "click -> .kr-modal-container": function (e, t) { t.stopPropagation() }, "click -> .btn-save": function () { var t = this, e = t.state.selectedSubjectTags, a = t.childViews.grades.val(), i = t.childViews.title.val(), s = t.html.find("#first-name").val(), o = t.html.find("#last-name").val(), n = t.childViews.schools.val(); n ? t.state.loading || (t.setState({ loading: !0 }), Globals.AuthApi.register2({ subject_tags: e.length ? e : null, grades: a.length ? a : null, title: i, firstName: s, lastName: o, organization: { _id: n } }, function (e) { e && (window.user = e), t.setState({ loading: !1 }), Globals.Toaster.addToast(i18n("Changes_saved_successfully"), "check-circle", "success"), setTimeout(function () { t.events.trigger("close"), t.destroy(), window.location.reload() }, 500) }, function () { Globals.Toaster.addToast(i18n("Profile_Save_Error"), "times-circle", "error") })) : Globals.Toaster.addToast(i18n("new_org_error"), "times-circle", "error") }, "keyup -> #zip-code": function (e, t) { var a = this, i = e.val(); e.val() && (a.zipTimeout && (clearTimeout(a.zipTimeout), a.zipTimeout = null), a.zipTimeout = setTimeout(function () { a.zipTimeout = null, a.setState({ schoolLoading: !0 }), console.log("Calling timeout"), Globals.AuthApi.searchOrganization({ country: a.childViews.country.val(), zip: i }, function (e) { a.setState({ schools: e, schoolLoading: !1 }); var t = _.map(e.organizations, function (e) { return { text: e.name, val: e._id } }); a.childViews.schools.setList(t), a.childViews.schools.open() }) }, 500)) }, "click -> .subject-btn": function (e, t) { var a = $(e).attr("data-subject"); $(e).hasClass("selected") ? this.childViews.subjectTags.unselect(a) : this.childViews.subjectTags.select(a) }, "click -> .see-more-btn": function (e, t) { var a = this; a.state.subjectTagMoreState ? a.setState({ subjectTagCloud: a.data.defaultSubjects, subjectTagMoreState: 0 }) : a.setState({ subjectTagCloud: a.data.subjects, subjectTagMoreState: 1 }) }, "click -> .cancel-btn": function () { this.events.trigger("close"), this.destroy() }, "click -> .section-title.collapsible": function (e, t) { var a = $(e).closest(".section-wrapper"); a.find(".field-wrapper").slideToggle(150), a.next(".hr-section").toggle(150), $(e).find(".section-collapse-arrow").toggleClass("collapse") }, "click -> .schools .kr-selectbox-selected-option": function () { var e = this; setTimeout(function () { e.setState({ showNoOrgLink: !0 }) }, 150) }, "click -> .no-org-action-link": function () { this.showOrgView() }, "click -> .btn-close": function () { this.events.trigger("close"), this.destroy() } } }), new Krafty2.View("CollectionsPublicHeader", { template: Krafty2.Templates.CollectionsPublicHeader, data: { orderList: [{ val: "asc", text: i18n(50) }, { val: "desc", text: i18n(49) }, { val: "alphabet", text: i18n(323) }], orderDropdown: [{ val: "asc", text: i18n(50), type: "radio" }, { val: "desc", text: i18n(49), type: "radio" }, { val: "alphabet", text: i18n(323), type: "radio" }], collectionId: null }, state: { title: "", order: "desc", searchOpenBottom: !1, numResults: 0, ajaxLoad: !1 }, messages: { "select -> order": function (e) { this.setState({ order: e.val }), Globals.Analytics.sendEvent("MyQuizizzFilter", { page: "MyQuizizzPage", source: "Order" }), this.trigger("filter", { order: e.val }) }, "select -> orderDropdown": function (e) { this.setState({ order: e.val }), Globals.Analytics.sendEvent("MyQuizizzFilter", { page: "MyQuizizzPage", source: "Order" }), this.trigger("filter", { order: e.val }) } }, filters: { onCreate: function () { }, afterCreate: function () { this.childViews.order.selectVal(this.state.order), this.childViews.orderDropdown.selectVal(this.state.order) }, afterRender: function () { } }, events: { "click -> .btn-share": function (e, t) { this.shareModal = new Krafty2.Views.ShareQuizModal({ state: { shareType: "collectionPublic" }, data: { collectionId: this.data.collectionId, collectionName: this.state.title } }) }, "click -> .btn-duplicate": function (e, t) { var a = this; user && user.id ? (a.setState({ ajaxLoad: !0 }), a.tag = new Krafty2.Models.Tag({}), a.tag.duplicate(a.data.collectionId).done(function (e) { a.setState({ ajaxLoad: !1 }), e.success ? App.setRoute(new Globals.URI("/collection/" + e.data.id, { query: { duplicate: "true" } }).toString()) : Globals.Toaster.addToast(i18n(501), "times-circle", "error") })) : a.loginView = new Krafty2.Views.LoginModal({ data: { query: { q: encodeURIComponent(window.location.pathname) }, title: i18n(250), message: i18n(502) } }) } } }), new Krafty2.State("CollectionsPublic", { load: function (e) { var i = this, s = e.params.collectionId; Globals.Init(), Globals.mainHeader.setHeaderType("collections"), Globals.mainHeader.setPage(i18n(36)), Globals.mainNavigation.setPage("collections"), i.searchResults = new Krafty2.Models.SearchResults, i.view = new Krafty2.Views.CollectionsPublicPage({ viewModels: { searchResults: i.searchResults } }), i.tag = new Krafty2.Models.Tag({}), i.tag.getEntities(s).done(function (e) { var t, a = ((t = e.data).total = t.items.length, t.hits = t.items, delete t.items, t.hits.forEach(function (e) { e.createdBy && (e.createdBy.name = (e.createdBy.title ? e.createdBy.title + " " : "") + (e.createdBy.firstName ? e.createdBy.firstName + " " : "") + (e.createdBy.lastName ? e.createdBy.lastName : "")), Krafty2._.defaults(e, e.latestVersion), delete e.latestVersion, e.hasUnpublishedDraft && e.createdBy._id !== user.id && (e.hasUnpublishedDraft = !1, e.draft && delete e.draft) }), t); Globals.mainHeader.setHeaderType("collectionsPublic", { collectionId: s }, { title: a.name, numResults: a.total, order: "alphabet" }), i.searchResults.set(a), i.view.childViews.searchResults.setState({ pageLoading: !1 }), Globals.SEO.setPage({ title: a.name + " | Collection - Quizizz", page: window.location.pathname, desc: "Play " + a.name + ", a quiz collection on Quizizz" }) }), i.filterEvent = Globals.mainHeader.on("filter", function (a) { if (i.searchResults && -1 !== ["asc", "desc", "alphabet"].indexOf(a.order)) { var e = i.searchResults.getRaw(), t = e.hits.sort(function (e, t) { return "asc" === a.order ? new Date(e.createdAt) - new Date(t.createdAt) : "desc" === a.order ? new Date(t.createdAt) - new Date(e.createdAt) : "alphabet" === a.order ? e.name.localeCompare(t.name) : void 0 }); e.hits = t, i.searchResults.set(e) } }) }, unload: function () { this.view.destroy(), Globals.mainHeader.off(this.filterEvent) } }), new Krafty2.View("CollectionsPublicPage", { template: Krafty2.Templates.CollectionsPublicPage, parent: $(".page-inner"), state: { selectedQuiz: null }, filters: { afterCreate: function () { var e = this, t = function () { e.html && e.adjustPreviewNode(), e.stopPreviewAnim || requestAnimationFrame(t) }; t(), new Globals.URI(window.location.href).props.query.duplicate && Globals.Toaster.addToast(i18n(503), "check-circle", "success") }, beforeDestroy: function (e) { this.stopPreviewAnim = !0, e() } }, methods: { adjustPreviewNode: function () { var e = this; if (e.previewNode) { var t = e.html.find(".search-results-preview-container").get(0).getBoundingClientRect().top + 10; if ((t = t < 84 ? 84 : t) === e.oldTop) return; e.oldTop || (oldTop = t); var a = window.innerHeight - t - 20; a = a < 180 ? 180 : a, e.previewNode.css({ top: t, height: a }), e.oldTop = t } } }, messages: { "hover -> searchResults": function (e) { var t = this; Globals.media.desktop && (t.previewView && t.previewView.destroy(), t.previewView = new Krafty2.Views.SearchResultsPreview({ parent: t.html.find(".search-results-preview-container"), viewModels: { quiz: e }, data: { stickType: "static", stickTop: 128 } }), t.previewNode = t.previewView.container.find(".search-results-preview"), t.oldTop = null, t.adjustPreviewNode(), t.setState({ selectedQuiz: e._id })) } }, events: {} }), new Krafty2.View("PromptShareQuiz", { template: Krafty2.Templates.PromptShareQuiz, parent: $("body"), extends: Krafty2.Views.Modal, state: { isClicked: !1 }, data: { callback: null }, filters: { afterCreate: function () { Globals.Analytics.sendEvent("promptQuizShare", { status: "prompted" }), localStorage.setItem("shareQuizPrompted", "true") }, onDestroy: function () { this.state.isClicked || Globals.Analytics.sendEvent("promptQuizShare", { status: "dismissed" }) } }, events: { "click -> .share-btn": function (e, t) { var a = this; a.setState({ isClicked: !0 }), Globals.Analytics.sendEvent("promptQuizShare", { status: "clicked" }), a.destroy(), a.data.callback && setTimeout(function () { a.data.callback() }, 150) } } }), new Krafty2.View("WelcomeOnboardModal", { template: Krafty2.Templates.WelcomeOnboardModalTemplate, parent: $("body"), extends: Krafty2.Views.Modal, state: { activeSlide: 1 }, filters: { afterCreate: function () { var e = this; if (e.$sliderWrapper = $(".welcome-onboard-modal-view .modal-slide-wrapper"), Globals.media.mobile) { var t = 3 * e.$sliderWrapper.closest(".kr-modal-body").outerWidth(), a = e.$sliderWrapper.closest(".kr-modal-body").width(); e.$sliderWrapper.css("width", t), e.$sliderWrapper.find(".modal-slide").css("width", a) } }, onDestroy: function () { Globals.Analytics.sendEvent("welcomeToQuizizzModal", { type: "modalDismiss" }) } }, methods: { slideSlider: function () { var e; if (this.$sliderWrapper.css("margin-left"), Globals.media.mobile) { var t = this.$sliderWrapper.closest(".kr-modal-body").outerWidth(); e = [0, -t, 2 * -t] } else e = Globals.media.tablet ? [0, -600, -1200] : [0, -750, -1500]; this.$sliderWrapper.css("margin-left", e[this.state.activeSlide - 1]) } }, events: { "click -> .next-btn": function (e, t) { Globals.Analytics.sendEvent("welcomeToQuizizzModal", { type: "slideBtnClick", name: ["slide1", "slide2", "slide3"][this.state.activeSlide - 1] }), $(e).hasClass("done-btn") && this.destroy(), this.setState({ activeSlide: this.state.activeSlide + 1 }), this.slideSlider() }, "click -> .slider-dots-wrapper .dot": function (e, t) { $(e).hasClass("dot-1") && this.setState({ activeSlide: 1 }), $(e).hasClass("dot-2") && this.setState({ activeSlide: 2 }), $(e).hasClass("dot-3") && this.setState({ activeSlide: 3 }), this.slideSlider() } } }), new Krafty2.View("WelcomeRedesignModal", { template: Krafty2.Templates.WelcomeRedesignModalTemplate, parent: $("body"), extends: Krafty2.Views.Modal, state: { activeSlide: 1 }, filters: { afterCreate: function () { var e = this; if (e.$sliderWrapper = $(".welcome-redesign-modal-view .modal-slide-wrapper"), Globals.media.mobile) { var t = 3 * e.$sliderWrapper.closest(".kr-modal-body").outerWidth(), a = e.$sliderWrapper.closest(".kr-modal-body").width(); e.$sliderWrapper.css("width", t), e.$sliderWrapper.find(".modal-slide").css("width", a) } }, onDestroy: function () { Globals.Analytics.sendEvent("welcomeToRedesignedQuizizzModal", { type: "modalDismiss" }) } }, methods: { slideSlider: function () { var e; if (this.$sliderWrapper.css("margin-left"), Globals.media.mobile) { var t = this.$sliderWrapper.closest(".kr-modal-body").outerWidth(); e = [0, -t, 2 * -t] } else e = Globals.media.tablet ? [0, -600, -1200] : [0, -750, -1500]; this.$sliderWrapper.css("margin-left", e[this.state.activeSlide - 1]) } }, events: { "click -> .next-btn": function (e, t) { Globals.Analytics.sendEvent("welcomeToRedesignedQuizizzModal", { type: "slideBtnClick", name: ["slide1", "slide2", "slide3"][this.state.activeSlide - 1] }), $(e).hasClass("done-btn") && this.destroy(), this.setState({ activeSlide: this.state.activeSlide + 1 }), this.slideSlider() }, "click -> .slider-dots-wrapper .dot": function (e, t) { $(e).hasClass("dot-1") && this.setState({ activeSlide: 1 }), $(e).hasClass("dot-2") && this.setState({ activeSlide: 2 }), $(e).hasClass("dot-3") && this.setState({ activeSlide: 3 }), this.slideSlider() } } }), new Krafty2.View("PromptSignupModal", { template: Krafty2.Templates.PromptSignupModal, parent: $("body"), extends: Krafty2.Views.Modal, data: { promptFrom: "myQuizzes", modalContents: { create: { image: "https://cf.quizizz.com/img/illustrations/create.png", title: "Create and save quizzes with a free account", desc: "To create a new quiz, start with a free account. You’ll have access to millions of teacher-created questions in addition to your own!" }, myQuizzes: { image: "https://cf.quizizz.com/img/illustrations/myquizes.png", title: "Where should we save your quizzes?", desc: "Pick from millions of teacher-created questions and we'll save your work so it's ready when you need it." }, reports: { image: "https://cf.quizizz.com/img/illustrations/reports.png", title: "Don't lose hard-earned feedback!", desc: "Save them to a free account instead. Quizizz tracks results for every quiz to help you see how each student, and each class, can improve." }, collections: { image: "https://cf.quizizz.com/img/illustrations/organize.png", title: "Organize your quizzes with a free account.", desc: "Save and organize any quiz by unit, class, topic, and more so that they're easy to find when you need them." }, memes: { image: "https://cf.quizizz.com/img/illustrations/memes.png", title: "Customize Quizizz for your classroom.", desc: "Create a free account to customize your students' experience with class photos, bitmoji, and more." } } }, state: { hasClickedCTA: !1 }, filters: { onDestroy: function () { this.state.hasClickedCTA || Globals.Analytics.sendEvent("signupPromptModal", { status: "dismissed", source: this.data.promptFrom }) } }, methods: {}, events: { "click -> .close-modal-btn": function (e, t) { this.destroy() }, "click -> .signup-continue-btn": function (e, t) { this.setState({ hasClickedCTA: !0 }), window.location.href = "/signup?source=signupPromptModal_" + this.data.promptFrom } } }), new Krafty2.View("SignupSuccessModal", { template: Krafty2.Templates.SignupSuccessModal, parent: $("body"), extends: Krafty2.Views.Modal, data: { modalTitle: "", modalBody: "" }, state: { shouldEnter: !1, isRedirecting: !1 }, filters: { afterCreate: function () { var e = this; setTimeout(function () { e.setState({ shouldEnter: !0 }) }, 100) }, onDestroy: function () { this.state.isRedirecting || (this.trigger("close"), this.sendMessage("close")) } }, methods: { getModalTitle: function () { return "" === this.data.modalTitle ? Globals.media.mobile ? "Welcome to Quizizz!" : "You're all set!" : this.data.modalTitle }, getModalBodyText: function () { return "" === this.data.modalBody ? Globals.media.mobile ? "Now choose a quiz or join a game" : "Welcome to Quizizz! Time to find the perfect quiz or create your own." : this.data.modalBody } }, events: { "click -> .btn-ok": function () { this.setState({ isRedirecting: !0 }), this.trigger("close"), this.sendMessage("close") } } }), new Krafty2.View("NotificationWidget", { template: Krafty2.Templates.NotificationWidget, parent: $(".top-header"), data: {}, state: { unreadNotifs: 0, notifications: [{ group: "today", list: [] }, { group: "thisWeek", list: [] }, { group: "past", list: [] }], notifCount: 0, isNotifLoading: !1, shouldLoadMoreNotif: !0 }, filters: { onCreate: function () { var t = this; t.processNotifications({ unread: Globals.NotificationService.getUnreadNotifCount(), notifications: Globals.NotificationService.getNotifications() }), t.notifSubscription = Globals.NotificationService.subscribe(function (e) { "notif-data" === e.pushType && t.processNotifications(e) }) }, afterCreate: function () { var e = this; Globals.media.mobile ? (e.html.css({ top: e.parent.height(), left: 0, width: e.parent.width(), height: "calc(100vh - " + e.parent.outerHeight() + "px)" }), $("body").addClass("no-scroll")) : (e.html.css({ top: e.parent.height(), right: -16 }), $("body").on("click.notifWidget", function () { e.destroy(), $("body").off("click.notifWidget") })), e.state.notifCount && (e.markAppearedNotifsRead(), e.html.find(".widget-body").on("scroll", function () { e.throttledMarkRead(), this.scrollHeight - this.scrollTop === this.clientHeight && e.loadMoreNotifs() })) }, beforeDestroy: function (e) { Globals.media.mobile ? (this.html.css({ top: "110vh" }), setTimeout(function () { e() }, 200)) : e() }, onDestroy: function () { this.trigger("destroy"), Globals.mainHeader.updateUnreadNotifCount(Globals.NotificationService.getUnreadNotifCount(), !1), Globals.NotificationService.flushMarkReadQueue(), Globals.NotificationService.unsubscribe(this.notifSubscription), $("body").removeClass("no-scroll"), $("body").off("click.notifWidget") } }, methods: { hasPreviewImage: function (e) { return e.images && e.images.secondary }, getTimeString: function (e) { return moment(e).fromNow() }, getWidgetTitle: function () { return this.state.unreadNotifs ? "You have " + this.state.unreadNotifs + " unread notification" + (1 < this.state.unreadNotifs ? "s" : "") : "You're all caught up!" }, getGroupLabel: function (e) { switch (e) { case "today": return "Today"; case "thisWeek": return "This Week"; case "past": return "Past"; default: return "All" } }, getNotifClasses: function (e) { var t = ""; return t += this.hasPreviewImage(e) ? "has-preview-img " : "", t += e.read ? "" : "notif-unread " }, getNotifImage: function (e) { if ("user" === e.trigger) return e.images.primary; if ("marketing" === e.trigger) return "https://cf.quizizz.com/img/notification/team-quizizz.png"; if ("system" === e.trigger) switch (e.kind) { case "game-expired": return "https://cf.quizizz.com/img/notification/homework-game.png"; case "quiz-played": return "https://cf.quizizz.com/img/notification/players.png" }return "https://cf.quizizz.com/img/notification/team-quizizz.png" }, getNotifTypeIcon: function (e) { if ("marketing" == e.trigger) return '<i class="far fa-list-alt color-success"></i>'; switch (e.kind) { case "game-expired": return '<i class="far fa-list-alt color-success"></i>'; case "quiz-liked": return '<i class="far fa-heart color-danger"></i>'; case "quiz-shared": case "meme-shared": return '<i class="far fa-share color-accent"></i>'; case "quiz-played": return '<i class="far fa-play-circle color-accent"></i>' }return '<i class="far fa-list-alt color-success"></i>' }, processNotifications: function (e) { var t = moment(); this.setState({ unreadNotifs: e.unread, notifications: [{ group: "today", list: e.notifications.filter(function (e) { return moment(e.at).isSame(t, "day") }) }, { group: "thisWeek", list: e.notifications.filter(function (e) { return !moment(e.at).isSame(t, "day") && moment(e.at).isSame(t, "week") }) }, { group: "past", list: e.notifications.filter(function (e) { return !moment(e.at).isSame(t, "day") && !moment(e.at).isSame(t, "week") }) }] }), this.setState({ notifCount: e.notifications.length }) }, getNotifById: function (t, e) { var a = this.state.notifications[e].list.filter(function (e) { return e._id == t }); if (0 < a.length) return a[0] }, markNotifsRead: function (e) { 0 < e.length && Globals.NotificationService.markNotificationRead(e) }, markAppearedNotifsRead: function () { var a = [], i = $(".widget-body"); i.find(".notif-group").each(function (e, t) { $(t).find(".notification-item").each(function (e, t) { 0 < $(t).position().top && $(t).position().top + $(t).outerHeight() < i.outerHeight() && a.push($(t).attr("data-notif-id")) }) }), this.markNotifsRead(a) }, throttledMarkRead: function () { var e = this; e.throttledFunc || (e.throttledFunc = _.throttle(e.markAppearedNotifsRead, 500, { trailing: !1 })), 0 < e.state.notifCount && e.throttledFunc() }, loadMoreNotifs: function () { var t = this; !t.state.isNotifLoading && t.state.shouldLoadMoreNotif && (t.setState({ isNotifLoading: !0 }), Globals.NotificationService.loadMoreNotif(t.state.notifCount + 1, 10, function (e) { t.setState({ isNotifLoading: !1 }), 0 === e.notifications.length && t.setState({ shouldLoadMoreNotif: !1 }), Globals.Analytics.sendEvent("notif-scroll", { category: "notification", start: t.state.notifCount + 1, limit: 10, notifIds: Globals.NotificationService.getNotifications().map(function (e) { return e._id }).join(",") }) })) } }, events: { "click -> .notification-widget-wrapper": function (e, t) { t.stopPropagation() }, "click -> .go-back-btn": function (e, t) { this.destroy() }, "click -> .notification-item": function (e, t) { var a = $(e).attr("data-notif-id"), i = $(e).closest(".notif-group").attr("data-group-idx"), s = this.getNotifById(a, i); this.markNotifsRead([a]), Globals.Analytics.sendEvent("notif-click", { category: "notification", notifId: a, notifIndex: _.findIndex(Globals.NotificationService.getNotifications(), { _id: a }) }), s.target && (App.setRoute(new Globals.URI(s.target) + ""), this.destroy()) } } }), new Krafty2.View("ReferFriendModal", { template: Krafty2.Templates.ReferFriendModal, parent: $("body"), extends: Krafty2.Views.Modal, data: { triggerSource: "" }, state: { isReferAjax: !1, emailValidationMsg: "", emailCount: 0, isSent: !1, shouldShowEmailTip: !1 }, filters: { afterCreate: function () { if ("game_live" === this.data.triggerSource || "game_hw" === this.data.triggerSource) try { localStorage.setItem("rfrmodal", JSON.stringify({ seen: !0 })) } catch (e) { } Globals.Analytics.sendEvent("referModal", { action: "prompted", source: this.data.triggerSource }) } }, methods: { isEmailValid: function (e) { return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(e.trim()) }, getShareLink: function (e) { var t = ""; return t = user && user.id ? window.location.protocol + "//" + window.location.host + "/invite/" + user.id : window.location.protocol + "//" + window.location.host + "/signup", "email" === e ? t += "?medium=email" : "twitter" === e ? t += "?medium=twitter" : "fb" === e && (t += "?medium=fb"), t }, copyLinkToClipboard: function () { var t; if (document.queryCommandSupported("copy")) try { t = document.execCommand("copy") } catch (e) { t = !1 } else t = !1; t ? Globals.Toaster.addToast("Link copied to clipboard", "info-circle", "success") : Globals.Toaster.addToast("Copy operation not supported. Please copy the link manually.", "times-circle", "error") }, openWindow: function (e, t) { var a = ($(window).width() - 575) / 2, i = "status=1,width=575,height=400,top=" + ($(window).height() - 400) / 2 + ",left=" + a; window.open(e, t, i) }, sendInvitations: function () { var a = this, t = a.childViews.emailsInput.getValues(); if (0 === t.length) return a.setState({ emailValidationMsg: "No email address provided." }), void a.setErrorOnEmailInput(!0); var e = t.reduce(function (e, t) { return a.isEmailValid(t) ? e : e + 1 }, 0); return 1 == e ? (a.setState({ emailValidationMsg: "One of the email address is invalid." }), void a.setErrorOnEmailInput(!0)) : 1 < e ? (a.setState({ emailValidationMsg: "Multiple invalid email addresses present." }), void a.setErrorOnEmailInput(!0)) : (a.setState({ isReferAjax: !0 }), void new Krafty2.Models.User({}).refer({ referrals: t, redirect: a.getShareLink("email") }, function (e) { a.setState({ isReferAjax: !1, isSent: !0 }), Globals.Toaster.addToast("Invitation(s) sucessfully sent.", "check-circle", "success"), Globals.Analytics.sendEvent("referModal", { action: "emailInvite", source: a.data.triggerSource, invitee: t.join(",") }), a.childViews.emailsInput.clearValues() })) }, setErrorOnEmailInput: function (e) { this.childViews.emailsInput.setState({ error: e }) } }, events: { "click -> .send-btn": function (e, t) { var a = this; setTimeout(function () { a.sendInvitations() }, 50) }, "click -> .share-opt-link": function (e, t) { this.html.find(".share-link-wrapper").slideDown(100) }, "mouseup -> .share-opt-link": function (e, t) { var a = this; setTimeout(function () { a.html.find(".share-link-field input").focus(), a.copyLinkToClipboard(), Globals.Analytics.sendEvent("referModal", { action: "linkInvite", source: a.data.triggerSource }) }, 50) }, "focus -> .share-link-field input": function (e, t) { $(e).select() }, "click -> .share-opt-twitter": function (e, t) { var a = "https://www.twitter.com/share?text=Join Quizizz—a free tool to help you grade less, find teacher-made quizzes, and motivate students to learn.&url=" + encodeURIComponent(this.getShareLink("twitter")) + "&via=quizizz"; this.openWindow(a, "Twitter"), Globals.Analytics.sendEvent("referModal", { action: "twitterInvite", source: this.data.triggerSource }) }, "click -> .share-opt-fb": function (e, t) { var a = "https://www.facebook.com/dialog/share?app_id=1589541687945427&display=popup&href=" + this.getShareLink("fb") + "&redirect_uri=" + this.getShareLink("fb"); this.openWindow(a, "Facebook"), Globals.Analytics.sendEvent("referModal", { action: "fbInvite", source: this.data.triggerSource }) } }, messages: { "tagAdd -> emailsInput": function (e) { this.isEmailValid(e.text) ? this.setState({ emailCount: this.state.emailCount + 1 }) : this.childViews.emailsInput.markErrorOnTag(e.id) }, "focus -> emailsInput": function () { this.setState({ emailValidationMsg: "", shouldShowEmailTip: !0 }), this.setErrorOnEmailInput(!1) }, "blur -> emailsInput": function () { this.setState({ shouldShowEmailTip: !1 }) }, "tagRemove -> emailsInput": function (e) { this.setState({ emailValidationMsg: "", emailCount: this.state.emailCount - 1 }), 0 === this.state.emailCount && this.setState({ isSent: !1 }), this.setErrorOnEmailInput(!1) }, "enterKey -> emailsInput": function () { this.sendInvitations() } } }), new Krafty2.View("TagInput", { template: Krafty2.Templates.TagInput, state: { error: !1, tagCount: 0 }, filters: { afterCreate: function () { this.resizeInputField() } }, methods: { resizeInputField: function () { var e = this.html.find(".kr2-tagfield-input"), t = this.html.find(".kr2-tagfield-outer"), a = this.calcInputFieldWidth(), i = this.html.find(".kr2-tagfield-taglist").find(".kr2-tagfield-tag").last(), s = t.outerWidth(); i.length && (s = t.outerWidth() - (i.position().left + i.outerWidth(!0))), i.length ? (s < a ? (e.outerWidth(t.outerWidth()), e.css({ left: 0, top: i.position().top + i.outerHeight(!0) })) : (e.outerWidth(s), e.css({ left: i.position().left + i.outerWidth(!0), top: i.position().top })), t.outerHeight() < e.position().top + e.outerHeight(!0) && t.outerHeight(t.outerHeight() + e.outerHeight(!0)), t.outerHeight() > e.position().top + e.outerHeight(!0) && t.outerHeight(t.outerHeight() - e.outerHeight(!0))) : (e.outerWidth(t.outerWidth()), e.css({ left: 0, top: 0 }), t.outerHeight(e.outerHeight(!0))) }, calcInputFieldWidth: function () { var e = this.html.find(".kr2-tagfield-input"), t = this.html.find(".kr2-tagfield-outer").outerWidth(), a = e.val().length; return 10 * a < 60 ? 60 : t < 10 * a ? t : 10 * a }, addTag: function (e) { var t = this; if (e) { var a = t.html.find(".kr2-tagfield-taglist"), i = '<div class="kr2-tagfield-tag" data-tag-id="' + (t.state.tagCount + 1) + '"><span class="kr2-tagfield-tag-text">' + e.trim() + '</span><span class="kr2-tagfield-tag-close"><i class="far fa-times"></i></span></div>'; a.append(i), t.resizeInputField(), t.setState({ tagCount: t.state.tagCount + 1 }), t.trigger("tagAdd", { id: t.state.tagCount, text: e.trim() }), t.sendMessage("tagAdd", { id: t.state.tagCount, text: e.trim() }) } }, removeTag: function (e) { var t = this; t.html.find('.kr2-tagfield-taglist [data-tag-id="' + e + '"]').fadeOut(150, function () { $(this).remove(), t.resizeInputField(), t.setState({ tagCount: t.state.tagCount - 1 }), t.trigger("tagRemove", e), t.sendMessage("tagRemove", e) }) }, getValues: function () { var a = []; return this.html.find(".kr2-tagfield-taglist .kr2-tagfield-tag > .kr2-tagfield-tag-text").each(function (e, t) { a.push($(t).text()) }), a }, clearValues: function () { this.html.find(".kr2-tagfield-taglist .kr2-tagfield-tag").remove(), this.setState({ tagCount: 0 }), this.resizeInputField() }, markErrorOnTag: function (e) { this.html.find('.kr2-tagfield-taglist [data-tag-id="' + e + '"]').addClass("kr2-tagfield-tag-danger") }, unmarkErrorOnTag: function (e) { this.html.find('.kr2-tagfield-taglist [data-tag-id="' + e + '"]').removeClass("kr2-tagfield-tag-danger") } }, events: { "keyup -> .kr2-tagfield-input": function (e, t) { var a = this, i = t.which, s = $(e).val().trim(); 8 == i && a.shouldRemoveLastTag ? (a.removeTag(a.state.tagCount), a.shouldRemoveLastTag = !1) : 13 != i && 32 != i && 186 != i && 188 != i || (s && ($(e).val(""), a.addTag(s)), 13 == i && (a.trigger("enterKey"), a.sendMessage("enterKey"))) }, "keydown -> .kr2-tagfield-input": function (e, t) { var a = t.which; if (8 != a || $(e).val() || (this.shouldRemoveLastTag = !0), this.resizeInputField(), 13 == a || 32 == a || 186 == a || 188 == a) return t.preventDefault(), !1 }, "focus -> .kr2-tagfield-input": function (e, t) { this.trigger("focus"), this.sendMessage("focus") }, "blur -> .kr2-tagfield-input": function (e, t) { var a = $(e).val().trim(); $(e).val(""), this.addTag(a), this.trigger("blur"), this.sendMessage("blur") }, "click -> .kr2-tagfield-tag": function (e, t) { t.preventDefault(), t.stopPropagation() }, "click -> .kr2-tagfield-tag .kr2-tagfield-tag-close": function (e, t) { var a = $(e).closest(".kr2-tagfield-tag").attr("data-tag-id"); this.removeTag(a) }, "click -> .kr2-tagfield-taglist": function (e, t) { this.html.find(".kr2-tagfield-input").focus() } } }), new Krafty2.View("SignupPromptCommon", { template: Krafty2.Templates.SignupPromptCommon, parent: $("body"), extends: Krafty2.Views.Modal, data: { sourceUrl: "", modalTitle: "", modalIcon: "", triggerSource: "" }, state: { actionTaken: !1 }, filters: { onCreate: function () { }, afterCreate: function () { Globals.Analytics.sendEvent("signupPromptsCommon", { page: Globals.currentPage, triggerSource: this.data.triggerSource, type: this.data.modalIcon, status: "prompted" }) }, onDestroy: function () { this.state.actionTaken || Globals.Analytics.sendEvent("signupPromptsCommon", { page: Globals.currentPage, triggerSource: this.data.triggerSource, type: this.data.modalIcon, status: "dismissed" }) } }, methods: { getIconBg: function () { switch (this.data.modalIcon) { case "like": case "duplicate": return "modal-icon-danger"; case "print": return "modal-icon-grey"; case "addCollection": return "modal-icon-accent"; case "showAnswer": return "modal-icon-primary" } }, getFaIconClass: function () { switch (this.data.modalIcon) { case "like": return "fas fa-heart"; case "duplicate": return "fas fa-copy"; case "print": return "fas fa-print"; case "addCollection": return "fas fa-bookmark"; case "showAnswer": return "fas fa-eye" } }, getLoginModalTitle: function () { switch (this.data.modalIcon) { case "like": return "Like this quiz?"; case "duplicate": return "Login to duplicate quiz."; case "print": return "Need a worksheet? Login to print this quiz."; case "addCollection": return "Found a great quiz? Log in to save it for later." } } }, events: { "click -> .signup-continue-btn": function () { this.setState({ actionTaken: !0 }), window.location.href = "/signup?source=prompt-" + this.data.modalIcon + "&tSource=" + this.data.triggerSource + "&p=" + Globals.currentPage + "&q=" + this.data.sourceUrl }, "click -> .footer-login-btn": function () { var e = this, t = {}; this.setState({ actionTaken: !0 }), e.data.sourceUrl && (t.q = e.data.sourceUrl), e.loginModal = new Krafty2.Views.LoginModal({ data: { query: t, title: e.getLoginModalTitle() } }), Globals.Analytics.sendEvent("signupPromptsCommon", { page: Globals.currentPage, triggerSource: e.data.triggerSource, type: e.data.modalIcon, status: "loginClick" }), e.destroy() } } }), new Krafty2.View("SignupPromptSpecial", { template: Krafty2.Templates.SignupPromptSpecial, parent: $("body"), extends: Krafty2.Views.Modal, data: { modalFor: "create" }, state: { isGoogleLoginInProcess: !1, emailFieldState: "pristine", isEmailCheckInProgress: !1, isEmailValid: !1, validationCheckMsg: "", email: "", isEmailSignupInProcess: !1, actionTaken: !1 }, filters: { afterCreate: function () { this.emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i, Globals.Analytics.sendEvent("signupPromptsSpecial", { type: this.data.modalFor, status: "prompted" }) }, onDestroy: function () { this.state.actionTaken || Globals.Analytics.sendEvent("signupPromptsSpecial", { type: this.data.modalFor, status: "dismissed" }) } }, methods: { getEmailFieldStateClasses: function () { if ("dirty" == this.state.emailFieldState) return this.state.isEmailCheckInProgress ? "kr2-textfield-process" : this.state.isEmailValid ? "kr2-textfield-success" : "kr2-textfield-danger" }, getIllustration: function () { switch (this.data.modalFor) { case "create": return "https://cf.quizizz.com/img/illustrations/create-transparentBG.png"; case "live": return "https://cf.quizizz.com/img/illustrations/live-transparentBG.png"; case "homework": return "https://cf.quizizz.com/img/illustrations/homework-transparentBG.png" } }, getBgColorClass: function () { switch (this.data.modalFor) { case "create": return "illust-bg-1"; case "live": return "illust-bg-2"; case "homework": return "illust-bg-3" } }, getModalTitle: function () { switch (this.data.modalFor) { case "create": return "Create quizzes with a free account"; case "live": return "Don't lose your results&mdash;create a free account!"; case "homework": return "Start a Homework game with a free account" } }, checkForEmailAvailability: function (e) { var t = this; e.length < 7 ? t.setState({ isEmailValid: !1, validationCheckMsg: i18n("enter_valid_email") }) : (t.setState({ emailFieldState: "dirty" }), t.emailCheckTimeout && clearTimeout(t.emailCheckTimeout), t.checkEmailCall && t.checkEmailCall.abort(), t.emailRegex.test(e) ? t.emailCheckTimeout = setTimeout(function () { t.checkEmailCall && t.checkEmailCall.abort(), t.setState({ isEmailCheckInProgress: !0, isEmailValid: !1 }), t.checkEmailCall = Globals.AuthApi.checkEmailAvail(e, function (e) { t.setState({ isEmailCheckInProgress: !1, isEmailValid: e.avail, validationCheckMsg: e.err ? e.err : "" }) }) }, 500) : t.setState({ validationCheckMsg: i18n("enter_valid_email"), isEmailValid: !1, isEmailCheckInProgress: !1 })) }, redirectToGoogle: function () { var e = "/auth/google?ref=signup&q=" + encodeURIComponent(window.location.href); e += "&source=modal_" + this.data.modalFor, window.location.href = e }, sendGoogleEvent: function () { var t = this; return $.Deferred(function () { var e = this; Globals.Analytics.sendEvent("signup_flow", { action_name: "signup_google_click", authentication: "google", source: "prompt-" + t.data.modalFor, page: "prompt_" + t.data.modalFor }, function () { e.resolve() }) }) }, sendEmailEvent: function () { var t = this; return $.Deferred(function () { var e = this; Globals.Analytics.sendEvent("signup_flow", { action_name: "signup_type_next_click", authentication: "email", source: "prompt-" + t.data.modalFor, page: "prompt_" + t.data.modalFor }, function () { e.resolve() }) }) }, sendSignupFlowInitEvent: function () { var t = this; return $.Deferred(function () { var e = this; Globals.Analytics.sendEvent("signup_flow", { action_name: "entered_" + t.data.modalFor, page: "prompt_" + t.data.modalFor, source: "prompt-" + t.data.modalFor }, function () { e.resolve() }) }) } }, events: { "keyup -> .signup-email-input input": function (e, t) { 13 == t.which ? this.html.find(".next-step-btn").click() : 9 == t.which || 14 <= t.which && t.which < 32 || 33 <= t.which && t.which < 46 || 91 <= t.which && t.which <= 93 || 112 <= t.which && t.which <= 145 || t.altKey || t.ctrlKey || (this.setState({ email: $(e).val() }), this.checkForEmailAvailability($(e).val())) }, "click -> .google-signup-btn": function (e, t) { var a = this, i = !0; a.setState({ isGoogleLoginInProcess: !0, actionTaken: !0 }), $.when(a.sendSignupFlowInitEvent(), a.sendGoogleEvent()).done(function () { i = !1, a.setState({ isGoogleLoginInProcess: !1 }), a.redirectToGoogle() }), setTimeout(function () { i && a.redirectToGoogle() }, 3500) }, "click -> .next-step-btn": function (e, t) { var a = this; if (a.state.isEmailValid) { var i = !0; a.setState({ isEmailSignupInProcess: !0, actionTaken: !0 }), $.when(a.sendSignupFlowInitEvent(), a.sendEmailEvent()).done(function () { i = !1, a.setState({ isEmailSignupInProcess: !1 }), window.location.href = "/signup/occupation?eid=" + encodeURIComponent(btoa(a.state.email)) + "&q=" + encodeURIComponent(window.location.href) }), setTimeout(function () { i && (window.location.href = "/signup/occupation?eid=" + encodeURIComponent(btoa(a.state.email)) + "&q=" + encodeURIComponent(window.location.href)) }, 3500) } }, "click -> .footer-login-btn": function () { this.setState({ actionTaken: !0 }), Globals.Analytics.sendEvent("signupPromptsSpecial", { type: this.data.modalFor, status: "loginClicked" }), this.loginModal = new Krafty2.Views.LoginModal({ data: { query: { q: window.location.href } } }), this.destroy() }, "click -> .skip-btn": function () { this.destroy() } } }), Globals.Cookies = { getCookie: function (e) { var t, a, i = e + "=", s = document.cookie.split(";"), o = s.length; for (t = 0; t < o; t += 1) { for (a = s[t]; " " === a.charAt(0);)a = a.substring(1); if (-1 !== a.indexOf(i)) return a.substring(i.length, a.length) } return "" }, setCookie: function (e, t, a) { var i = new Date; i = new Date(i.getTime() + 1e3 * a), document.cookie = e + "=" + t + "; expires=" + i.toGMTString() + ";path=/" } }, new Krafty2.View("SampleQuizSelection", { template: Krafty2.Templates.SampleQuizSelection, parent: $("body"), data: { quizSet: [{ id: "5b808d632c64f10019dfff4a", media: "https://quizizz.com/media/resource/gs/quizizz-media/quizzes/dd7eb67b-140a-4fbc-83c3-9c66f9819419", title: "Basic Math Formative Assessment" }, { id: "5b84f0c3be67880019867441", media: "https://quizizz.com/media/resource/gs/quizizz-media/quizzes/9c265de4-3899-44bf-ba78-f22acf245080", title: "Spanish Review: Food Vocabulary" }, { id: "5b84e643be67880019866e0f", media: "https://quizizz.com/media/resource/gs/quizizz-media/quizzes/84f72092-d23b-4bc0-86d0-27ce4e356a6a", title: "Cell Biology Quiz" }] }, state: {}, filters: { onCreate: function () { try { sessionStorage.setItem("sqs_seen", "1") } catch (e) { } } }, methods: { appendImageDimensions: function (e) { return Globals.media.mobile ? 375 <= window.innerWidth ? e + "?w=160&h=160" : e + "?w=136&h=136" : e + "?w=280&h=280" }, startDestroy: function () { var e = this; e.html.animate({ left: "-101vw" }, 150, function () { e.destroy() }) } }, events: { "mouseenter -> .quiz-card": function (e, t) { Globals.media.desktop && ($(e).addClass("quiz-card-hover"), $(e).find(".play-overlay").fadeIn(200)) }, "mouseleave -> .quiz-card": function (e, t) { Globals.media.desktop && ($(e).removeClass("quiz-card-hover"), $(e).find(".play-overlay").fadeOut(200)) }, "click -> .quiz-card": function (e, t) { var a = $(e).attr("data-idx"), i = this.data.quizSet[a].id; Globals.Analytics.sendEvent("sampleQuizSelect", { quizId: i }), App.setRoute("/admin/quiz/" + i), this.startDestroy() }, "click -> .browse-quiz-btn": function (e, t) { Globals.Analytics.sendEvent("sampleQuizSkip"), this.startDestroy() } } });